/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import type { FusionPlugin, Context } from 'fusion-core';
import Emitter from './emitter';
import type { IEmitter, UniversalEventsPluginDepsType as DepsType } from './types';
export declare class GlobalEmitter extends Emitter {
    from: (ctx: Context) => ScopedEmitter;
    ctx: Context;
    constructor();
    emit(type: string, payload: unknown, ctx?: Context): void;
    setFrequency(): void;
    teardown(): void;
}
declare class ScopedEmitter extends Emitter {
    ctx: Context;
    parent: GlobalEmitter;
    batch: Array<{
        type: string;
        payload: any;
    }>;
    flushed: boolean;
    constructor(ctx: Context, parent: GlobalEmitter);
    emit(type: string, payload: unknown): void;
    handleBatchedEvent({ type, payload }: {
        type: string;
        payload: unknown;
    }): void;
    flush(): void;
    setFrequency(): void;
    teardown(): void;
}
declare const _default: FusionPlugin<DepsType, IEmitter>;
export default _default;
//# sourceMappingURL=server.d.ts.map