/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const globalEventType = '*';
export default class UniversalEmitter {
  constructor() {
    this.handlers = {};
    this.mappers = {};
  }
  map(...args) {
    const {
      type,
      callback
    } = getArgs(args);
    if (!this.mappers[type]) this.mappers[type] = [];
    this.mappers[type].push(callback);
  }
  on(...args) {
    const {
      type,
      callback
    } = getArgs(args);
    if (!this.handlers[type]) this.handlers[type] = [];
    this.handlers[type].push(callback);
  }
  off(...args) {
    const {
      type,
      callback
    } = getArgs(args);
    const index = this.handlers[type].indexOf(callback);
    if (index > -1) this.handlers[type].splice(index, 1);
  }
  mapEvent(type, payload, ctx) {
    const globalMappers = this.mappers[globalEventType] || [];
    const mappers = (this.mappers[type] || []).concat(globalMappers);
    return mappers.reduce((payload, mapper) => {
      return mapper(payload, ctx, type);
    }, payload);
  }
  handleEvent(type, payload, ctx) {
    const globalHandlers = this.handlers[globalEventType] || [];
    const handlers = (this.handlers[type] || []).concat(globalHandlers);
    handlers.forEach(handler => handler(payload, ctx, type));
  }

  /* eslint-disable-next-line  no-unused-vars */
  from(ctx) {
    throw new Error('Not implemented.');
  }
  /* eslint-disable-next-line  no-unused-vars */
  emit(type, payload, ctx) {
    // throw new Error('Not implemented.');
  }
  /* eslint-disable-next-line  no-unused-vars */
  setFrequency(frequency) {
    throw new Error('Not implemented.');
  }
  teardown() {
    throw new Error('Not implemented.');
  }
  flush() {
    throw new Error('Not implemented.');
  }
}
function validateHandler(handler) {
  if (typeof handler !== 'function') throw new TypeError('handler must be a function');
}
function getArgs(args) {
  const type = typeof args[0] === 'string' ? args[0] : globalEventType;
  const callback = args[1] || args[0];
  validateHandler(callback);
  return {
    type,
    callback
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWxFdmVudFR5cGUiLCJVbml2ZXJzYWxFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJoYW5kbGVycyIsIm1hcHBlcnMiLCJtYXAiLCJhcmdzIiwidHlwZSIsImNhbGxiYWNrIiwiZ2V0QXJncyIsInB1c2giLCJvbiIsIm9mZiIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIm1hcEV2ZW50IiwicGF5bG9hZCIsImN0eCIsImdsb2JhbE1hcHBlcnMiLCJjb25jYXQiLCJyZWR1Y2UiLCJtYXBwZXIiLCJoYW5kbGVFdmVudCIsImdsb2JhbEhhbmRsZXJzIiwiZm9yRWFjaCIsImhhbmRsZXIiLCJmcm9tIiwiRXJyb3IiLCJlbWl0Iiwic2V0RnJlcXVlbmN5IiwiZnJlcXVlbmN5IiwidGVhcmRvd24iLCJmbHVzaCIsInZhbGlkYXRlSGFuZGxlciIsIlR5cGVFcnJvciJdLCJzb3VyY2VzIjpbInNyYy9lbWl0dGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHR5cGUge0NvbnRleHR9IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuaW1wb3J0IHR5cGUge0lFbWl0dGVyfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZ2xvYmFsRXZlbnRUeXBlID0gJyonO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pdmVyc2FsRW1pdHRlciBpbXBsZW1lbnRzIElFbWl0dGVyIHtcbiAgaGFuZGxlcnM6IGFueTtcbiAgbWFwcGVyczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICB0aGlzLm1hcHBlcnMgPSB7fTtcbiAgfVxuICBtYXAoLi4uYXJnczogYW55KTogYW55IHtcbiAgICBjb25zdCB7dHlwZSwgY2FsbGJhY2t9ID0gZ2V0QXJncyhhcmdzKTtcbiAgICBpZiAoIXRoaXMubWFwcGVyc1t0eXBlXSkgdGhpcy5tYXBwZXJzW3R5cGVdID0gW107XG4gICAgdGhpcy5tYXBwZXJzW3R5cGVdLnB1c2goY2FsbGJhY2spO1xuICB9XG4gIG9uKC4uLmFyZ3M6IGFueSk6IGFueSB7XG4gICAgY29uc3Qge3R5cGUsIGNhbGxiYWNrfSA9IGdldEFyZ3MoYXJncyk7XG4gICAgaWYgKCF0aGlzLmhhbmRsZXJzW3R5cGVdKSB0aGlzLmhhbmRsZXJzW3R5cGVdID0gW107XG4gICAgdGhpcy5oYW5kbGVyc1t0eXBlXS5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuICBvZmYoLi4uYXJnczogYW55KTogYW55IHtcbiAgICBjb25zdCB7dHlwZSwgY2FsbGJhY2t9ID0gZ2V0QXJncyhhcmdzKTtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaGFuZGxlcnNbdHlwZV0uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHRoaXMuaGFuZGxlcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICBtYXBFdmVudCh0eXBlOiBzdHJpbmcsIHBheWxvYWQ6IHVua25vd24sIGN0eD86IENvbnRleHQpOiB1bmtub3duIHtcbiAgICBjb25zdCBnbG9iYWxNYXBwZXJzID0gdGhpcy5tYXBwZXJzW2dsb2JhbEV2ZW50VHlwZV0gfHwgW107XG4gICAgY29uc3QgbWFwcGVycyA9ICh0aGlzLm1hcHBlcnNbdHlwZV0gfHwgW10pLmNvbmNhdChnbG9iYWxNYXBwZXJzKTtcbiAgICByZXR1cm4gbWFwcGVycy5yZWR1Y2UoKHBheWxvYWQsIG1hcHBlcikgPT4ge1xuICAgICAgcmV0dXJuIG1hcHBlcihwYXlsb2FkLCBjdHgsIHR5cGUpO1xuICAgIH0sIHBheWxvYWQpO1xuICB9XG4gIGhhbmRsZUV2ZW50KHR5cGU6IHN0cmluZywgcGF5bG9hZDogdW5rbm93biwgY3R4PzogQ29udGV4dCk6IHZvaWQge1xuICAgIGNvbnN0IGdsb2JhbEhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tnbG9iYWxFdmVudFR5cGVdIHx8IFtdO1xuICAgIGNvbnN0IGhhbmRsZXJzID0gKHRoaXMuaGFuZGxlcnNbdHlwZV0gfHwgW10pLmNvbmNhdChnbG9iYWxIYW5kbGVycyk7XG4gICAgaGFuZGxlcnMuZm9yRWFjaCgoaGFuZGxlcikgPT4gaGFuZGxlcihwYXlsb2FkLCBjdHgsIHR5cGUpKTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAgbm8tdW51c2VkLXZhcnMgKi9cbiAgZnJvbShjdHg6IENvbnRleHQpOiBJRW1pdHRlciB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICBuby11bnVzZWQtdmFycyAqL1xuICBlbWl0KHR5cGU6IHN0cmluZywgcGF5bG9hZDogdW5rbm93biwgY3R4PzogQ29udGV4dCkge1xuICAgIC8vIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkLicpO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAgbm8tdW51c2VkLXZhcnMgKi9cbiAgc2V0RnJlcXVlbmN5KGZyZXF1ZW5jeTogbnVtYmVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbiAgdGVhcmRvd24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbiAgZmx1c2goKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVIYW5kbGVyKGhhbmRsZXIpIHtcbiAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hhbmRsZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIGdldEFyZ3MoYXJncykge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnID8gYXJnc1swXSA6IGdsb2JhbEV2ZW50VHlwZTtcbiAgY29uc3QgY2FsbGJhY2sgPSBhcmdzWzFdIHx8IGFyZ3NbMF07XG4gIHZhbGlkYXRlSGFuZGxlcihjYWxsYmFjayk7XG4gIHJldHVybiB7dHlwZSwgY2FsbGJhY2t9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTUEsTUFBTUEsZUFBZSxHQUFHLEdBQUc7QUFDM0IsZUFBZSxNQUFNQyxnQkFBZ0IsQ0FBcUI7RUFJeERDLFdBQVcsR0FBRztJQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUM7RUFDbkI7RUFDQUMsR0FBRyxDQUFDLEdBQUdDLElBQVMsRUFBTztJQUNyQixNQUFNO01BQUNDLElBQUk7TUFBRUM7SUFBUSxDQUFDLEdBQUdDLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDO0lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDSCxPQUFPLENBQUNHLElBQUksQ0FBQyxHQUFHLEVBQUU7SUFDaEQsSUFBSSxDQUFDSCxPQUFPLENBQUNHLElBQUksQ0FBQyxDQUFDRyxJQUFJLENBQUNGLFFBQVEsQ0FBQztFQUNuQztFQUNBRyxFQUFFLENBQUMsR0FBR0wsSUFBUyxFQUFPO0lBQ3BCLE1BQU07TUFBQ0MsSUFBSTtNQUFFQztJQUFRLENBQUMsR0FBR0MsT0FBTyxDQUFDSCxJQUFJLENBQUM7SUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQ0gsUUFBUSxDQUFDSSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUNKLFFBQVEsQ0FBQ0ksSUFBSSxDQUFD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