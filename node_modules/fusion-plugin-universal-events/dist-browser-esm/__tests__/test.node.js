/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

import App, { createPlugin, compose } from 'fusion-core';
import { getSimulator } from 'fusion-test-utils';
import UniversalEventsPlugin, { GlobalEmitter } from '../server';
import { UniversalEventsToken } from '../index';
test('Instantiation', () => {
  const a = {
    memoized: new Map()
  };
  const b = {
    memoized: new Map()
  };
  const Emitter = new GlobalEmitter();
  // @ts-expect-error
  expect(Emitter.from(a)).not.toBe(Emitter.from(b));
  // @ts-expect-error
  expect(Emitter.from(a)).not.toBe(Emitter);
});
test('Server EventEmitter - events from browser', async () => {
  let called = false;
  let globalCalled = false;
  const mockCtx = {
    headers: {},
    method: 'POST',
    path: '/_events',
    request: {
      body: {
        items: [{
          type: 'a',
          payload: {
            x: 1
          }
        }]
      }
    },
    timing: {
      end: Promise.resolve(5)
    }
  };
  const app = new App('el', el => el);
  app.register(UniversalEventsToken, UniversalEventsPlugin);
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    events.on('a', ({
      x
    }, ctx) => {
      expect(x).toBe(1);
      expect(ctx).toBeTruthy();
      globalCalled = true;
    });
    return (ctx, next) => {
      const ctxEmitter = events.from(ctx);
      ctxEmitter.on('a', ({
        x
      }, ctx) => {
        expect(x).toBe(1);
        expect(ctx).toBeTruthy();
        called = true;
      });
      return next();
    };
  });
  app.resolve();
  await expect(
  // @ts-expect-error
  compose(app.plugins)(mockCtx, () => Promise.resolve())).resolves.not.toThrow();
  expect(called).toBeTruthy();
  expect(globalCalled).toBeTruthy();
});
test('Server EventEmitter - events with ctx', done => {
  let globalCalled = false;
  const mockCtx = {
    mock: true
  };
  const app = new App('el', el => el);
  app.register(UniversalEventsToken, UniversalEventsPlugin);
  app.register(createPlugin({
    deps: {
      events: UniversalEventsToken
    },
    provides: ({
      events
    }) => {
      events.on('b', ({
        x
      }, ctx) => {
        expect(x).toBe(1);
        expect(ctx).toBe(mockCtx);
        globalCalled = true;
      });
      // @ts-expect-error
      events.emit('b', {
        x: 1
      }, mockCtx);
      expect(globalCalled).toBeTruthy();
      done();
    }
  }));
  app.resolve();
});
test('Server EventEmitter - mapping', async () => {
  let called = false;
  let globalCalled = false;
  const mockCtx = {
    headers: {},
    method: 'POST',
    path: '/lol',
    timing: {
      end: Promise.resolve(5)
    }
  };
  const app = new App('fake-element', el => el);
  app.register(UniversalEventsToken, UniversalEventsPlugin);
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    events.on('a', (payload, c) => {
      expect(c).toBe(mockCtx);
      expect(payload).toStrictEqual({
        x: 1,
        b: true,
        global: true
      });
      globalCalled = true;
    });
    events.map('a', (payload, c) => {
      expect(c).toBe(mockCtx);
      return {
        ...payload,
        global: true
      };
    });
    return (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('a', (payload, c) => {
        expect(c).toBe(ctx);
        expect(payload).toStrictEqual({
          x: 1,
          b: true,
          global: true
        });
        called = true;
      });
      emitter.map('a', (payload, c) => {
        expect(c).toBe(ctx);
        return {
          ...payload,
          b: true
        };
      });
      emitter.emit('a', {
        x: 1
      });
      return next();
    };
  });
  app.resolve();
  await expect(
  // @ts-expect-error
  compose(app.plugins)(mockCtx, () => Promise.resolve())).resolves.not.toThrow();
  expect(called).toBeTruthy();
  expect(globalCalled).toBeTruthy();
});
test('Server EventEmitter error handling', done => {
  expect.assertions(1);
  const app = new App('fake-element', el => el);
  app.register(UniversalEventsToken, UniversalEventsPlugin);
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-pre-await', ({
        x
      }) => {
        expect(x).toBe(1);
      });
      emitter.emit('test-pre-await', {
        x: 1
      });
      ctx.throw(403, 'error');
      return next();
    };
  });
  app.middleware((ctx, next) => {
    // $FlowFixMe
    done.fail('should not reach this middleware');
    return next();
  });
  const simulator = getSimulator(app);
  simulator.request('/lol', {
    method: 'POST'
  }).then(() => {
    // $FlowFixMe
    done.fail('should throw');
  }).catch(() => {
    done();
  });
});
test('Server EventEmitter batching', done => {
  const app = new App('fake-element', el => el);
  const flags = {
    preawait: false,
    postawait: false,
    postend: false,
    timeout: false
  };
  app.register(UniversalEventsToken, UniversalEventsPlugin);
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-pre-await', ({
        x
      }) => {
        expect(x).toBe(1);
        flags.preawait = true;
      });
      emitter.emit('test-pre-await', {
        x: 1
      });
      expect(flags.preawait).toBeFalsy();
      // @ts-expect-error
      expect(emitter.flushed).toBeFalsy();
      return next();
    };
  });
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-post-await', ({
        x,
        lol
      }) => {
        expect(x).toBe(1);
        expect(lol).toBeTruthy();
        flags.postawait = true;
      });
      await next();
      emitter.emit('test-post-await', {
        x: 1
      });
      emitter.map(payload => {
        return {
          ...payload,
          lol: true
        };
      });
      // @ts-expect-error
      expect(emitter.flushed).toBeFalsy();
      expect(flags.postawait).toBeFalsy();
    };
  });
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-post-end', ({
        x,
        lol
      }) => {
        expect(x).toBe(1);
        expect(lol).toBeTruthy();
        flags.postend = true;
      });
      ctx.timing.end.then(() => {
        // @ts-expect-error
        expect(emitter.flushed).toBeFalsy();
        emitter.emit('test-post-end', {
          x: 1
        });
        expect(flags.postend).toBeFalsy();
      });
      return next();
    };
  });
  app.middleware({
    events: UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-timeout', ({
        x,
        lol
      }) => {
        expect(x).toBe(1);
        expect(lol).toBeTruthy();
        flags.timeout = true;
      });
      setTimeout(() => {
        // @ts-expect-error
        expect(emitter.flushed).toBeTruthy();
        emitter.emit('test-timeout', {
          x: 1
        });
        expect(flags.timeout).toBeTruthy();
      }, 100);
      return next();
    };
  });
  const simulator = getSimulator(app);
  simulator.request('/lol', {
    method: 'POST'
  });
  setTimeout(() => {
    expect(flags.preawait).toBeTruthy();
    expect(flags.postawait).toBeTruthy();
    expect(flags.postend).toBeTruthy();
    expect(flags.timeout).toBeTruthy();
    done();
  }, 150);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcHAiLCJjcmVhdGVQbHVnaW4iLCJjb21wb3NlIiwiZ2V0U2ltdWxhdG9yIiwiVW5pdmVyc2FsRXZlbnRzUGx1Z2luIiwiR2xvYmFsRW1pdHRlciIsIlVuaXZlcnNhbEV2ZW50c1Rva2VuIiwidGVzdCIsImEiLCJtZW1vaXplZCIsIk1hcCIsImIiLCJFbWl0dGVyIiwiZXhwZWN0IiwiZnJvbSIsIm5vdCIsInRvQmUiLCJjYWxsZWQiLCJnbG9iYWxDYWxsZWQiLCJtb2NrQ3R4IiwiaGVhZGVycyIsIm1ldGhvZCIsInBhdGgiLCJyZXF1ZXN0IiwiYm9keSIsIml0ZW1zIiwidHlwZSIsInBheWxvYWQiLCJ4IiwidGltaW5nIiwiZW5kIiwiUHJvbWlzZSIsInJlc29sdmUiLCJhcHAiLCJlbCIsInJlZ2lzdGVyIiwibWlkZGxld2FyZSIsImV2ZW50cyIsIm9uIiwiY3R4IiwidG9CZVRydXRoeSIsIm5leHQiLCJjdHhFbWl0dGVyIiwicGx1Z2lucyIsInJlc29sdmVzIiwidG9UaHJvdyIsImRvbmUiLCJtb2NrIiwiZGVwcyIsInByb3ZpZGVzIiwiZW1pdCIsImMiLCJ0b1N0cmljdEVxdWFsIiwiZ2xvYmFsIiwibWFwIiwiZW1pdHRlciIsImFzc2VydGlvbnMiLCJ0aHJvdyIsImZhaWwiLCJzaW11bGF0b3IiLCJ0aGVuIiwiY2F0Y2giLCJmbGFncyIsInByZWF3YWl0IiwicG9zdGF3YWl0IiwicG9zdGVuZCIsInRpbWVvdXQiLCJ0b0JlRmFsc3kiLCJmbHVzaGVkIiwibG9sIiwic2V0VGltZW91dCJdLCJzb3VyY2VzIjpbInNyYy9fX3Rlc3RzX18vdGVzdC5ub2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IEFwcCwge2NyZWF0ZVBsdWdpbiwgY29tcG9zZX0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuaW1wb3J0IHtnZXRTaW11bGF0b3J9IGZyb20gJ2Z1c2lvbi10ZXN0LXV0aWxzJztcblxuaW1wb3J0IFVuaXZlcnNhbEV2ZW50c1BsdWdpbiwge0dsb2JhbEVtaXR0ZXJ9IGZyb20gJy4uL3NlcnZlcic7XG5pbXBvcnQge1VuaXZlcnNhbEV2ZW50c1Rva2VufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgdHlwZSB7SUVtaXR0ZXJ9IGZyb20gJy4uL3R5cGVzJztcblxudGVzdCgnSW5zdGFudGlhdGlvbicsICgpID0+IHtcbiAgY29uc3QgYSA9IHtcbiAgICBtZW1vaXplZDogbmV3IE1hcCgpLFxuICB9O1xuICBjb25zdCBiID0ge1xuICAgIG1lbW9pemVkOiBuZXcgTWFwKCksXG4gIH07XG4gIGNvbnN0IEVtaXR0ZXI6IElFbWl0dGVyID0gbmV3IEdsb2JhbEVtaXR0ZXIoKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBleHBlY3QoRW1pdHRlci5mcm9tKGEpKS5ub3QudG9CZShFbWl0dGVyLmZyb20oYikpO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gIGV4cGVjdChFbWl0dGVyLmZyb20oYSkpLm5vdC50b0JlKEVtaXR0ZXIpO1xufSk7XG5cbnRlc3QoJ1NlcnZlciBFdmVudEVtaXR0ZXIgLSBldmVudHMgZnJvbSBicm93c2VyJywgYXN5bmMgKCkgPT4ge1xuICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gIGxldCBnbG9iYWxDYWxsZWQgPSBmYWxzZTtcbiAgY29uc3QgbW9ja0N0eCA9IHtcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBwYXRoOiAnL19ldmVudHMnLFxuICAgIHJlcXVlc3Q6IHtcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgaXRlbXM6IFt7dHlwZTogJ2EnLCBwYXlsb2FkOiB7eDogMX19XSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB0aW1pbmc6IHtcbiAgICAgIGVuZDogUHJvbWlzZS5yZXNvbHZlKDUpLFxuICAgIH0sXG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoJ2VsJywgKGVsKSA9PiBlbCk7XG4gIGFwcC5yZWdpc3RlcihVbml2ZXJzYWxFdmVudHNUb2tlbiwgVW5pdmVyc2FsRXZlbnRzUGx1Z2luKTtcbiAgYXBwLm1pZGRsZXdhcmUoe2V2ZW50czogVW5pdmVyc2FsRXZlbnRzVG9rZW59LCAoe2V2ZW50c30pID0+IHtcbiAgICBldmVudHMub24oJ2EnLCAoe3h9LCBjdHgpID0+IHtcbiAgICAgIGV4cGVjdCh4KS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGN0eCkudG9CZVRydXRoeSgpO1xuICAgICAgZ2xvYmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgY3R4RW1pdHRlciA9IGV2ZW50cy5mcm9tKGN0eCk7XG4gICAgICBjdHhFbWl0dGVyLm9uKCdhJywgKHt4fSwgY3R4KSA9PiB7XG4gICAgICAgIGV4cGVjdCh4KS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoY3R4KS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfTtcbiAgfSk7XG4gIGFwcC5yZXNvbHZlKCk7XG4gIGF3YWl0IGV4cGVjdChcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29tcG9zZShhcHAucGx1Z2lucykobW9ja0N0eCwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpXG4gICkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgZXhwZWN0KGNhbGxlZCkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoZ2xvYmFsQ2FsbGVkKS50b0JlVHJ1dGh5KCk7XG59KTtcblxudGVzdCgnU2VydmVyIEV2ZW50RW1pdHRlciAtIGV2ZW50cyB3aXRoIGN0eCcsIChkb25lKSA9PiB7XG4gIGxldCBnbG9iYWxDYWxsZWQgPSBmYWxzZTtcbiAgY29uc3QgbW9ja0N0eCA9IHttb2NrOiB0cnVlfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgnZWwnLCAoZWwpID0+IGVsKTtcbiAgYXBwLnJlZ2lzdGVyKFVuaXZlcnNhbEV2ZW50c1Rva2VuLCBVbml2ZXJzYWxFdmVudHNQbHVnaW4pO1xuICBhcHAucmVnaXN0ZXIoXG4gICAgY3JlYXRlUGx1Z2luKHtcbiAgICAgIGRlcHM6IHtldmVudHM6IFVuaXZlcnNhbEV2ZW50c1Rva2VufSxcbiAgICAgIHByb3ZpZGVzOiAoe2V2ZW50c30pID0+IHtcbiAgICAgICAgZXZlbnRzLm9uKCdiJywgKHt4fSwgY3R4KSA9PiB7XG4gICAgICAgICAgZXhwZWN0KHgpLnRvQmUoMSk7XG4gICAgICAgICAgZXhwZWN0KGN0eCkudG9CZShtb2NrQ3R4KTtcbiAgICAgICAgICBnbG9iYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBldmVudHMuZW1pdCgnYicsIHt4OiAxfSwgbW9ja0N0eCk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxDYWxsZWQpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSxcbiAgICB9KVxuICApO1xuICBhcHAucmVzb2x2ZSgpO1xufSk7XG5cbnRlc3QoJ1NlcnZlciBFdmVudEVtaXR0ZXIgLSBtYXBwaW5nJywgYXN5bmMgKCkgPT4ge1xuICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gIGxldCBnbG9iYWxDYWxsZWQgPSBmYWxzZTtcbiAgY29uc3QgbW9ja0N0eCA9IHtcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBwYXRoOiAnL2xvbCcsXG4gICAgdGltaW5nOiB7XG4gICAgICBlbmQ6IFByb21pc2UucmVzb2x2ZSg1KSxcbiAgICB9LFxuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKCdmYWtlLWVsZW1lbnQnLCAoZWwpID0+IGVsKTtcbiAgYXBwLnJlZ2lzdGVyKFVuaXZlcnNhbEV2ZW50c1Rva2VuLCBVbml2ZXJzYWxFdmVudHNQbHVnaW4pO1xuICBhcHAubWlkZGxld2FyZSh7ZXZlbnRzOiBVbml2ZXJzYWxFdmVudHNUb2tlbn0sICh7ZXZlbnRzfSkgPT4ge1xuICAgIGV2ZW50cy5vbignYScsIChwYXlsb2FkLCBjKSA9PiB7XG4gICAgICBleHBlY3QoYykudG9CZShtb2NrQ3R4KTtcbiAgICAgIGV4cGVjdChwYXlsb2FkKS50b1N0cmljdEVxdWFsKHt4OiAxLCBiOiB0cnVlLCBnbG9iYWw6IHRydWV9KTtcbiAgICAgIGdsb2JhbENhbGxlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgZXZlbnRzLm1hcCgnYScsIChwYXlsb2FkLCBjKSA9PiB7XG4gICAgICBleHBlY3QoYykudG9CZShtb2NrQ3R4KTtcbiAgICAgIHJldHVybiB7Li4ucGF5bG9hZCwgZ2xvYmFsOiB0cnVlfTtcbiAgICB9KTtcbiAgICByZXR1cm4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgZW1pdHRlciA9IGV2ZW50cy5mcm9tKGN0eCk7XG4gICAgICBlbWl0dGVyLm9uKCdhJywgKHBheWxvYWQsIGMpID0+IHtcbiAgICAgICAgZXhwZWN0KGMpLnRvQmUoY3R4KTtcbiAgICAgICAgZXhwZWN0KHBheWxvYWQpLnRvU3RyaWN0RXF1YWwoe3g6IDEsIGI6IHRydWUsIGdsb2JhbDogdHJ1ZX0pO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBlbWl0dGVyLm1hcCgnYScsIChwYXlsb2FkLCBjKSA9PiB7XG4gICAgICAgIGV4cGVjdChjKS50b0JlKGN0eCk7XG4gICAgICAgIHJldHVybiB7Li4ucGF5bG9hZCwgYjogdHJ1ZX07XG4gICAgICB9KTtcbiAgICAgIGVtaXR0ZXIuZW1pdCgnYScsIHt4OiAxfSk7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH07XG4gIH0pO1xuICBhcHAucmVzb2x2ZSgpO1xuICBhd2FpdCBleHBlY3QoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbXBvc2UoYXBwLnBsdWdpbnMpKG1vY2tDdHgsICgpID0+IFByb21pc2UucmVzb2x2ZSgpKVxuICApLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG4gIGV4cGVjdChjYWxsZWQpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGdsb2JhbENhbGxlZCkudG9CZVRydXRoeSgpO1xufSk7XG5cbnRlc3QoJ1NlcnZlciBFdmVudEVtaXR0ZXIgZXJyb3IgaGFuZGxpbmcnLCAoZG9uZSkgPT4ge1xuICBleHBlY3QuYXNzZXJ0aW9ucygxKTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgnZmFrZS1lbGVtZW50JywgKGVsKSA9PiBlbCk7XG4gIGFwcC5yZWdpc3RlcihVbml2ZXJzYWxFdmVudHNUb2tlbiwgVW5pdmVyc2FsRXZlbnRzUGx1Z2luKTtcbiAgYXBwLm1pZGRsZXdhcmUoe2V2ZW50czogVW5pdmVyc2FsRXZlbnRzVG9rZW59LCAoe2V2ZW50c30pID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgZW1pdHRlciA9IGV2ZW50cy5mcm9tKGN0eCk7XG4gICAgICBlbWl0dGVyLm9uKCd0ZXN0LXByZS1hd2FpdCcsICh7eH0pID0+IHtcbiAgICAgICAgZXhwZWN0KHgpLnRvQmUoMSk7XG4gICAgICB9KTtcbiAgICAgIGVtaXR0ZXIuZW1pdCgndGVzdC1wcmUtYXdhaXQnLCB7eDogMX0pO1xuICAgICAgY3R4LnRocm93KDQwMywgJ2Vycm9yJyk7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH07XG4gIH0pO1xuICBhcHAubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGRvbmUuZmFpbCgnc2hvdWxkIG5vdCByZWFjaCB0aGlzIG1pZGRsZXdhcmUnKTtcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9KTtcbiAgY29uc3Qgc2ltdWxhdG9yID0gZ2V0U2ltdWxhdG9yKGFwcCk7XG4gIHNpbXVsYXRvclxuICAgIC5yZXF1ZXN0KCcvbG9sJywge21ldGhvZDogJ1BPU1QnfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBkb25lLmZhaWwoJ3Nob3VsZCB0aHJvdycpO1xuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbn0pO1xuXG50ZXN0KCdTZXJ2ZXIgRXZlbnRFbWl0dGVyIGJhdGNoaW5nJywgKGRvbmUpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgnZmFrZS1lbGVtZW50JywgKGVsKSA9PiBlbCk7XG4gIGNvbnN0IGZsYWdzID0ge1xuICAgIHByZWF3YWl0OiBmYWxzZSxcbiAgICBwb3N0YXdhaXQ6IGZhbHNlLFxuICAgIHBvc3RlbmQ6IGZhbHNlLFxuICAgIHRpbWVvdXQ6IGZhbHNlLFxuICB9O1xuICBhcHAucmVnaXN0ZXIoVW5pdmVyc2FsRXZlbnRzVG9rZW4sIFVuaXZlcnNhbEV2ZW50c1BsdWdpbik7XG4gIGFwcC5taWRkbGV3YXJlKHtldmVudHM6IFVuaXZlcnNhbEV2ZW50c1Rva2VufSwgKHtldmVudHN9KSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgIGNvbnN0IGVtaXR0ZXIgPSBldmVudHMuZnJvbShjdHgpO1xuICAgICAgZW1pdHRlci5vbigndGVzdC1wcmUtYXdhaXQnLCAoe3h9KSA9PiB7XG4gICAgICAgIGV4cGVjdCh4KS50b0JlKDEpO1xuICAgICAgICBmbGFncy5wcmVhd2FpdCA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIGVtaXR0ZXIuZW1pdCgndGVzdC1wcmUtYXdhaXQnLCB7eDogMX0pO1xuICAgICAgZXhwZWN0KGZsYWdzLnByZWF3YWl0KS50b0JlRmFsc3koKTtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIGV4cGVjdChlbWl0dGVyLmZsdXNoZWQpLnRvQmVGYWxzeSgpO1xuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9O1xuICB9KTtcblxuICBhcHAubWlkZGxld2FyZSh7ZXZlbnRzOiBVbml2ZXJzYWxFdmVudHNUb2tlbn0sICh7ZXZlbnRzfSkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBjb25zdCBlbWl0dGVyID0gZXZlbnRzLmZyb20oY3R4KTtcbiAgICAgIGVtaXR0ZXIub24oJ3Rlc3QtcG9zdC1hd2FpdCcsICh7eCwgbG9sfSkgPT4ge1xuICAgICAgICBleHBlY3QoeCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGxvbCkudG9CZVRydXRoeSgpO1xuICAgICAgICBmbGFncy5wb3N0YXdhaXQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBhd2FpdCBuZXh0KCk7XG4gICAgICBlbWl0dGVyLmVtaXQoJ3Rlc3QtcG9zdC1hd2FpdCcsIHt4OiAxfSk7XG4gICAgICBlbWl0dGVyLm1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgbG9sOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICBleHBlY3QoZW1pdHRlci5mbHVzaGVkKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChmbGFncy5wb3N0YXdhaXQpLnRvQmVGYWxzeSgpO1xuICAgIH07XG4gIH0pO1xuXG4gIGFwcC5taWRkbGV3YXJlKHtldmVudHM6IFVuaXZlcnNhbEV2ZW50c1Rva2VufSwgKHtldmVudHN9KSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgIGNvbnN0IGVtaXR0ZXIgPSBldmVudHMuZnJvbShjdHgpO1xuICAgICAgZW1pdHRlci5vbigndGVzdC1wb3N0LWVuZCcsICh7eCwgbG9sfSkgPT4ge1xuICAgICAgICBleHBlY3QoeCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGxvbCkudG9CZVRydXRoeSgpO1xuICAgICAgICBmbGFncy5wb3N0ZW5kID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgY3R4LnRpbWluZy5lbmQudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgZXhwZWN0KGVtaXR0ZXIuZmx1c2hlZCkudG9CZUZhbHN5KCk7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgndGVzdC1wb3N0LWVuZCcsIHt4OiAxfSk7XG4gICAgICAgIGV4cGVjdChmbGFncy5wb3N0ZW5kKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9O1xuICB9KTtcblxuICBhcHAubWlkZGxld2FyZSh7ZXZlbnRzOiBVbml2ZXJzYWxFdmVudHNUb2tlbn0sICh7ZXZlbnRzfSkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBjb25zdCBlbWl0dGVyID0gZXZlbnRzLmZyb20oY3R4KTtcbiAgICAgIGVtaXR0ZXIub24oJ3Rlc3QtdGltZW91dCcsICh7eCwgbG9sfSkgPT4ge1xuICAgICAgICBleHBlY3QoeCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGxvbCkudG9CZVRydXRoeSgpO1xuICAgICAgICBmbGFncy50aW1lb3V0ID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgZXhwZWN0KGVtaXR0ZXIuZmx1c2hlZCkudG9CZVRydXRoeSgpO1xuICAgICAgICBlbWl0dGVyLmVtaXQoJ3Rlc3QtdGltZW91dCcsIHt4OiAxfSk7XG4gICAgICAgIGV4cGVjdChmbGFncy50aW1lb3V0KS50b0JlVHJ1dGh5KCk7XG4gICAgICB9LCAxMDApO1xuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9O1xuICB9KTtcbiAgY29uc3Qgc2ltdWxhdG9yID0gZ2V0U2ltdWxhdG9yKGFwcCk7XG4gIHNpbXVsYXRvci5yZXF1ZXN0KCcvbG9sJywge21ldGhvZDogJ1BPU1QnfSk7XG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgZXhwZWN0KGZsYWdzLnByZWF3YWl0KS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGZsYWdzLnBvc3Rhd2FpdCkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChmbGFncy5wb3N0ZW5kKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGZsYWdzLnRpbWVvdXQpLnRvQmVUcnV0aHkoKTtcbiAgICBkb25lKCk7XG4gIH0sIDE1MCk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEdBQUcsSUFBR0MsWUFBWSxFQUFFQyxPQUFPLFFBQU8sYUFBYTtBQUN0RCxTQUFRQyxZQUFZLFFBQU8sbUJBQW1CO0FBRTlDLE9BQU9DLHFCQUFxQixJQUFHQyxhQUFhLFFBQU8sV0FBVztBQUM5RCxTQUFRQyxvQkFBb0IsUUFBTyxVQUFVO0FBRzdDQyxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU07RUFDMUIsTUFBTUMsQ0FBQyxHQUFHO0lBQ1JDLFFBQVEsRUFBRSxJQUFJQyxHQUFHO0VBQ25CLENBQUM7RUFDRCxNQUFNQyxDQUFDLEdBQUc7SUFDUkYsUUFBUSxFQUFFLElBQUlDLEdBQUc7RUFDbkIsQ0FBQztFQUNELE1BQU1FLE9BQWlCLEdBQUcsSUFBSVAsYUFBYSxFQUFFO0VBQzdDO0VBQ0FRLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxJQUFJLENBQUNOLENBQUMsQ0FBQyxDQUFDLENBQUNPLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDSixPQUFPLENBQUNFLElBQUksQ0FBQ0gsQ0FBQyxDQUFDLENBQUM7RUFDakQ7RUFDQUUsTUFBTSxDQUFDRCxPQUFPLENBQUNFLElBQUksQ0FBQ04sQ0FBQyxDQUFDLENBQUMsQ0FBQ08sR0FBRyxDQUFDQyxJQUFJLENBQUNKLE9BQU8sQ0FB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