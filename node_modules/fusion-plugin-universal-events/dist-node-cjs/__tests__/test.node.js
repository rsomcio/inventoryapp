"use strict";

var _fusionCore = _interopRequireWildcard(require("fusion-core"));
var _fusionTestUtils = require("fusion-test-utils");
var _server = _interopRequireWildcard(require("../server"));
var _index = require("../index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

test('Instantiation', () => {
  const a = {
    memoized: new Map()
  };
  const b = {
    memoized: new Map()
  };
  const Emitter = new _server.GlobalEmitter();
  // @ts-expect-error
  expect(Emitter.from(a)).not.toBe(Emitter.from(b));
  // @ts-expect-error
  expect(Emitter.from(a)).not.toBe(Emitter);
});
test('Server EventEmitter - events from browser', async () => {
  let called = false;
  let globalCalled = false;
  const mockCtx = {
    headers: {},
    method: 'POST',
    path: '/_events',
    request: {
      body: {
        items: [{
          type: 'a',
          payload: {
            x: 1
          }
        }]
      }
    },
    timing: {
      end: Promise.resolve(5)
    }
  };
  const app = new _fusionCore.default('el', el => el);
  app.register(_index.UniversalEventsToken, _server.default);
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    events.on('a', ({
      x
    }, ctx) => {
      expect(x).toBe(1);
      expect(ctx).toBeTruthy();
      globalCalled = true;
    });
    return (ctx, next) => {
      const ctxEmitter = events.from(ctx);
      ctxEmitter.on('a', ({
        x
      }, ctx) => {
        expect(x).toBe(1);
        expect(ctx).toBeTruthy();
        called = true;
      });
      return next();
    };
  });
  app.resolve();
  await expect(
  // @ts-expect-error
  (0, _fusionCore.compose)(app.plugins)(mockCtx, () => Promise.resolve())).resolves.not.toThrow();
  expect(called).toBeTruthy();
  expect(globalCalled).toBeTruthy();
});
test('Server EventEmitter - events with ctx', done => {
  let globalCalled = false;
  const mockCtx = {
    mock: true
  };
  const app = new _fusionCore.default('el', el => el);
  app.register(_index.UniversalEventsToken, _server.default);
  app.register((0, _fusionCore.createPlugin)({
    deps: {
      events: _index.UniversalEventsToken
    },
    provides: ({
      events
    }) => {
      events.on('b', ({
        x
      }, ctx) => {
        expect(x).toBe(1);
        expect(ctx).toBe(mockCtx);
        globalCalled = true;
      });
      // @ts-expect-error
      events.emit('b', {
        x: 1
      }, mockCtx);
      expect(globalCalled).toBeTruthy();
      done();
    }
  }));
  app.resolve();
});
test('Server EventEmitter - mapping', async () => {
  let called = false;
  let globalCalled = false;
  const mockCtx = {
    headers: {},
    method: 'POST',
    path: '/lol',
    timing: {
      end: Promise.resolve(5)
    }
  };
  const app = new _fusionCore.default('fake-element', el => el);
  app.register(_index.UniversalEventsToken, _server.default);
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    events.on('a', (payload, c) => {
      expect(c).toBe(mockCtx);
      expect(payload).toStrictEqual({
        x: 1,
        b: true,
        global: true
      });
      globalCalled = true;
    });
    events.map('a', (payload, c) => {
      expect(c).toBe(mockCtx);
      return {
        ...payload,
        global: true
      };
    });
    return (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('a', (payload, c) => {
        expect(c).toBe(ctx);
        expect(payload).toStrictEqual({
          x: 1,
          b: true,
          global: true
        });
        called = true;
      });
      emitter.map('a', (payload, c) => {
        expect(c).toBe(ctx);
        return {
          ...payload,
          b: true
        };
      });
      emitter.emit('a', {
        x: 1
      });
      return next();
    };
  });
  app.resolve();
  await expect(
  // @ts-expect-error
  (0, _fusionCore.compose)(app.plugins)(mockCtx, () => Promise.resolve())).resolves.not.toThrow();
  expect(called).toBeTruthy();
  expect(globalCalled).toBeTruthy();
});
test('Server EventEmitter error handling', done => {
  expect.assertions(1);
  const app = new _fusionCore.default('fake-element', el => el);
  app.register(_index.UniversalEventsToken, _server.default);
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-pre-await', ({
        x
      }) => {
        expect(x).toBe(1);
      });
      emitter.emit('test-pre-await', {
        x: 1
      });
      ctx.throw(403, 'error');
      return next();
    };
  });
  app.middleware((ctx, next) => {
    // $FlowFixMe
    done.fail('should not reach this middleware');
    return next();
  });
  const simulator = (0, _fusionTestUtils.getSimulator)(app);
  simulator.request('/lol', {
    method: 'POST'
  }).then(() => {
    // $FlowFixMe
    done.fail('should throw');
  }).catch(() => {
    done();
  });
});
test('Server EventEmitter batching', done => {
  const app = new _fusionCore.default('fake-element', el => el);
  const flags = {
    preawait: false,
    postawait: false,
    postend: false,
    timeout: false
  };
  app.register(_index.UniversalEventsToken, _server.default);
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-pre-await', ({
        x
      }) => {
        expect(x).toBe(1);
        flags.preawait = true;
      });
      emitter.emit('test-pre-await', {
        x: 1
      });
      expect(flags.preawait).toBeFalsy();
      // @ts-expect-error
      expect(emitter.flushed).toBeFalsy();
      return next();
    };
  });
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-post-await', ({
        x,
        lol
      }) => {
        expect(x).toBe(1);
        expect(lol).toBeTruthy();
        flags.postawait = true;
      });
      await next();
      emitter.emit('test-post-await', {
        x: 1
      });
      emitter.map(payload => {
        return {
          ...payload,
          lol: true
        };
      });
      // @ts-expect-error
      expect(emitter.flushed).toBeFalsy();
      expect(flags.postawait).toBeFalsy();
    };
  });
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-post-end', ({
        x,
        lol
      }) => {
        expect(x).toBe(1);
        expect(lol).toBeTruthy();
        flags.postend = true;
      });
      ctx.timing.end.then(() => {
        // @ts-expect-error
        expect(emitter.flushed).toBeFalsy();
        emitter.emit('test-post-end', {
          x: 1
        });
        expect(flags.postend).toBeFalsy();
      });
      return next();
    };
  });
  app.middleware({
    events: _index.UniversalEventsToken
  }, ({
    events
  }) => {
    return async (ctx, next) => {
      const emitter = events.from(ctx);
      emitter.on('test-timeout', ({
        x,
        lol
      }) => {
        expect(x).toBe(1);
        expect(lol).toBeTruthy();
        flags.timeout = true;
      });
      setTimeout(() => {
        // @ts-expect-error
        expect(emitter.flushed).toBeTruthy();
        emitter.emit('test-timeout', {
          x: 1
        });
        expect(flags.timeout).toBeTruthy();
      }, 100);
      return next();
    };
  });
  const simulator = (0, _fusionTestUtils.getSimulator)(app);
  simulator.request('/lol', {
    method: 'POST'
  });
  setTimeout(() => {
    expect(flags.preawait).toBeTruthy();
    expect(flags.postawait).toBeTruthy();
    expect(flags.postend).toBeTruthy();
    expect(flags.timeout).toBeTruthy();
    done();
  }, 150);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,