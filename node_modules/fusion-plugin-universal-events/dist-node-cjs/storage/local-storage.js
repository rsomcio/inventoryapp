"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localBatchStorage = void 0;
var _inMemory = require("./in-memory");
var _split = require("./split");
/* global window */

const storageKey = 'fusion-events';
const get = () => {
  try {
    const events = JSON.parse(window.localStorage.getItem(storageKey));
    return Array.isArray(events) ? events : [];
  } catch (e) {
    return [];
  }
};
const set = events => {
  try {
    window.localStorage.setItem(storageKey, JSON.stringify(events));
  } catch (e) {
    // storage might be full, do nothing
  }
};
class LocalBatchStorage {
  add = (...toBeAdded) => {
    set(get().concat(toBeAdded));
  };
  addToStart = (...toBeAdded) => {
    set(toBeAdded.concat(get()));
  };
  getAndClear = (limit = Infinity) => {
    const allEvents = get();
    const [eventsToSend, eventsToStore] = (0, _split.split)(allEvents, limit);
    set(eventsToStore);
    return eventsToSend;
  };
}
let isLocalStorageWritable = true;
try {
  window.localStorage.setItem('test', 'test');
  window.localStorage.removeItem('test');
} catch (e) {
  // if set/remove item fails localStorage is not writable
  // fallback to in-memory storage
  isLocalStorageWritable = false;
}
const localBatchStorage = isLocalStorageWritable ? new LocalBatchStorage() : _inMemory.inMemoryBatchStorage;
exports.localBatchStorage = localBatchStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdG9yYWdlS2V5IiwiZ2V0IiwiZXZlbnRzIiwiSlNPTiIsInBhcnNlIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkFycmF5IiwiaXNBcnJheSIsImUiLCJzZXQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiTG9jYWxCYXRjaFN0b3JhZ2UiLCJhZGQiLCJ0b0JlQWRkZWQiLCJjb25jYXQiLCJhZGRUb1N0YXJ0IiwiZ2V0QW5kQ2xlYXIiLCJsaW1pdCIsIkluZmluaXR5IiwiYWxsRXZlbnRzIiwiZXZlbnRzVG9TZW5kIiwiZXZlbnRzVG9TdG9yZSIsInNwbGl0IiwiaXNMb2NhbFN0b3JhZ2VXcml0YWJsZSIsInJlbW92ZUl0ZW0iLCJsb2NhbEJhdGNoU3RvcmFnZSIsImluTWVtb3J5QmF0Y2hTdG9yYWdlIl0sInNvdXJjZXMiOlsic3JjL3N0b3JhZ2UvbG9jYWwtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgd2luZG93ICovXG5cbmltcG9ydCB0eXBlIHtCYXRjaFR5cGUsIEJhdGNoU3RvcmFnZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtpbk1lbW9yeUJhdGNoU3RvcmFnZX0gZnJvbSAnLi9pbi1tZW1vcnknO1xuaW1wb3J0IHtzcGxpdH0gZnJvbSAnLi9zcGxpdCc7XG5cbmNvbnN0IHN0b3JhZ2VLZXkgPSAnZnVzaW9uLWV2ZW50cyc7XG5cbmNvbnN0IGdldCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudHMgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KSk7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IFtdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5jb25zdCBzZXQgPSAoZXZlbnRzOiBCYXRjaFR5cGVbXSkgPT4ge1xuICB0cnkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeShldmVudHMpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHN0b3JhZ2UgbWlnaHQgYmUgZnVsbCwgZG8gbm90aGluZ1xuICB9XG59O1xuXG5jbGFzcyBMb2NhbEJhdGNoU3RvcmFnZSBpbXBsZW1lbnRzIEJhdGNoU3RvcmFnZSB7XG4gIGFkZCA9ICguLi50b0JlQWRkZWQ6IEJhdGNoVHlwZVtdKSA9PiB7XG4gICAgc2V0KGdldCgpLmNvbmNhdCh0b0JlQWRkZWQpKTtcbiAgfTtcblxuICBhZGRUb1N0YXJ0ID0gKC4uLnRvQmVBZGRlZDogQmF0Y2hUeXBlW10pID0+IHtcbiAgICBzZXQodG9CZUFkZGVkLmNvbmNhdChnZXQoKSkpO1xuICB9O1xuXG4gIGdldEFuZENsZWFyID0gKGxpbWl0OiBudW1iZXIgPSBJbmZpbml0eSk6IEJhdGNoVHlwZVtdID0+IHtcbiAgICBjb25zdCBhbGxFdmVudHMgPSBnZXQoKTtcbiAgICBjb25zdCBbZXZlbnRzVG9TZW5kLCBldmVudHNUb1N0b3JlXSA9IHNwbGl0KGFsbEV2ZW50cywgbGltaXQpO1xuICAgIHNldChldmVudHNUb1N0b3JlKTtcbiAgICByZXR1cm4gZXZlbnRzVG9TZW5kO1xuICB9O1xufVxuXG5sZXQgaXNMb2NhbFN0b3JhZ2VXcml0YWJsZSA9IHRydWU7XG5cbnRyeSB7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVzdCcsICd0ZXN0Jyk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGVzdCcpO1xufSBjYXRjaCAoZSkge1xuICAvLyBpZiBzZXQvcmVtb3ZlIGl0ZW0gZmFpbHMgbG9jYWxTdG9yYWdlIGlzIG5vdCB3cml0YWJsZVxuICAvLyBmYWxsYmFjayB0byBpbi1tZW1vcnkgc3RvcmFnZVxuICBpc0xvY2FsU3RvcmFnZVdyaXRhYmxlID0gZmFsc2U7XG59XG5cbmV4cG9ydCBjb25zdCBsb2NhbEJhdGNoU3RvcmFnZTogQmF0Y2hTdG9yYWdlID0gaXNMb2NhbFN0b3JhZ2VXcml0YWJsZVxuICA/IG5ldyBMb2NhbEJhdGNoU3RvcmFnZSgpXG4gIDogaW5NZW1vcnlCYXRjaFN0b3JhZ2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBO0FBQ0E7QUFKQTs7QUFNQSxNQUFNQSxVQUFVLEdBQUcsZUFBZTtBQUVsQyxNQUFNQyxHQUFHLEdBQUcsTUFBTTtFQUNoQixJQUFJO0lBQ0YsTUFBTUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsTUFBTSxDQUFDQyxZQUFZLENBQUNDLE9BQU8sQ0FBQ1AsVUFBVSxDQUFDLENBQUM7SUFDbEUsT0FBT1EsS0FBSyxDQUFDQyxPQUFPLENBQUNQLE1BQU0sQ0FBQyxHQUFHQSxNQUFNLEdBQUcsRUFBRTtFQUM1QyxDQUFDLENBQUMsT0FBT1EsQ0FBQyxFQUFFO0lBQ1YsT0FBTyxFQUFFO0VBQ1g7QUFDRixDQUFDO0FBRUQsTUFBTUMsR0FBRyxHQUFJVCxNQUFtQixJQUFLO0VBQ25DLElBQUk7SUFDRkcsTUFBTSxDQUFDQyxZQUFZLENBQUNNLE9BQU8sQ0FBQ1osVUFBVSxFQUFFRyxJQUFJLENBQUNVLFNBQVMsQ0FBQ1gsTUFBTSxDQUFDLENBQUM7RUFDakUsQ0FBQyxDQUFDLE9BQU9RLENBQUMsRUFBRTtJQUNWO0VBQUE7QUFFSixDQUFDO0FBRUQsTUFBTUksaUJBQWlCLENBQXlCO0VBQzlDQyxHQUFHLEdBQUcsQ0FBQyxHQUFHQyxTQUFzQixLQUFLO0lBQ25DTCxHQUFHLENBQUNWLEdBQUcsRUFBRSxDQUFDZ0IsTUFBTSxDQUFDRCxTQUFTLENBQUMsQ0FBQztFQUM5QixDQUFDO0VBRURFLFVBQVUsR0FBRyxDQUFDLEdBQUdGLFNBQXNCLEtBQUs7SUFDMUNMLEdBQUcsQ0FBQ0ssU0FBUyxDQUFDQyxNQUFNLENBQUNoQixHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQzlCLENBQUM7RUFFRGtCLFdBQVcsR0FBRyxDQUFDQyxLQUFhLEdBQUdDLFFBQVEsS0FBa0I7SUFDdkQsTUFBTUMsU0FBUyxHQUFHckIsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sQ0FBQ3NCLFlBQVksRUFBRUMsYUFBYSxDQUFDLEdBQUcsSUFBQUMsWUFBSyxFQUFDSCxTQUFTLEVBQUVGLEtBQUssQ0FBQztJQUM3RFQsR0FBRyxDQUFDYSxhQUFhLENBQUM7SUFDbEIsT0FBT0QsWUFBWTtFQUNyQixDQUFDO0FBQ0g7QUFFQSxJQUFJRyxzQkFBc0IsR0FBRyxJQUFJO0FBRWpDLElBQUk7RUFDRnJCLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDTSxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztFQUMzQ1AsTUFBTSxDQUFDQyxZQUFZLENBQUNxQixVQUFVLENBQUMsTUFBTSxDQUFDO0FBQ3hDLENBQUMsQ0FBQyxPQUFPakIsQ0FBQyxFQUFFO0VBQ1Y7RUFDQTtFQUNBZ0Isc0JBQXNCLEdBQUcsS0FBSztBQUNoQztBQUVPLE1BQU1FLGlCQUErQixHQUFHRixzQkFBc0IsR0FDakUsSUFBSVosaUJBQWlCLEVBQUUsR0FDdkJlLDhCQUFvQjtBQUFDIn0=