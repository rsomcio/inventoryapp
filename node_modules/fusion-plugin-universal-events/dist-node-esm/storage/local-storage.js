/* global window */

import { inMemoryBatchStorage } from './in-memory';
import { split } from './split';
const storageKey = 'fusion-events';
const get = () => {
  try {
    const events = JSON.parse(window.localStorage.getItem(storageKey));
    return Array.isArray(events) ? events : [];
  } catch (e) {
    return [];
  }
};
const set = events => {
  try {
    window.localStorage.setItem(storageKey, JSON.stringify(events));
  } catch (e) {
    // storage might be full, do nothing
  }
};
class LocalBatchStorage {
  add = (...toBeAdded) => {
    set(get().concat(toBeAdded));
  };
  addToStart = (...toBeAdded) => {
    set(toBeAdded.concat(get()));
  };
  getAndClear = (limit = Infinity) => {
    const allEvents = get();
    const [eventsToSend, eventsToStore] = split(allEvents, limit);
    set(eventsToStore);
    return eventsToSend;
  };
}
let isLocalStorageWritable = true;
try {
  window.localStorage.setItem('test', 'test');
  window.localStorage.removeItem('test');
} catch (e) {
  // if set/remove item fails localStorage is not writable
  // fallback to in-memory storage
  isLocalStorageWritable = false;
}
export const localBatchStorage = isLocalStorageWritable ? new LocalBatchStorage() : inMemoryBatchStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbk1lbW9yeUJhdGNoU3RvcmFnZSIsInNwbGl0Iiwic3RvcmFnZUtleSIsImdldCIsImV2ZW50cyIsIkpTT04iLCJwYXJzZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJBcnJheSIsImlzQXJyYXkiLCJlIiwic2V0Iiwic2V0SXRlbSIsInN0cmluZ2lmeSIsIkxvY2FsQmF0Y2hTdG9yYWdlIiwiYWRkIiwidG9CZUFkZGVkIiwiY29uY2F0IiwiYWRkVG9TdGFydCIsImdldEFuZENsZWFyIiwibGltaXQiLCJJbmZpbml0eSIsImFsbEV2ZW50cyIsImV2ZW50c1RvU2VuZCIsImV2ZW50c1RvU3RvcmUiLCJpc0xvY2FsU3RvcmFnZVdyaXRhYmxlIiwicmVtb3ZlSXRlbSIsImxvY2FsQmF0Y2hTdG9yYWdlIl0sInNvdXJjZXMiOlsic3JjL3N0b3JhZ2UvbG9jYWwtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgd2luZG93ICovXG5cbmltcG9ydCB0eXBlIHtCYXRjaFR5cGUsIEJhdGNoU3RvcmFnZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtpbk1lbW9yeUJhdGNoU3RvcmFnZX0gZnJvbSAnLi9pbi1tZW1vcnknO1xuaW1wb3J0IHtzcGxpdH0gZnJvbSAnLi9zcGxpdCc7XG5cbmNvbnN0IHN0b3JhZ2VLZXkgPSAnZnVzaW9uLWV2ZW50cyc7XG5cbmNvbnN0IGdldCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudHMgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KSk7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IFtdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5jb25zdCBzZXQgPSAoZXZlbnRzOiBCYXRjaFR5cGVbXSkgPT4ge1xuICB0cnkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeShldmVudHMpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHN0b3JhZ2UgbWlnaHQgYmUgZnVsbCwgZG8gbm90aGluZ1xuICB9XG59O1xuXG5jbGFzcyBMb2NhbEJhdGNoU3RvcmFnZSBpbXBsZW1lbnRzIEJhdGNoU3RvcmFnZSB7XG4gIGFkZCA9ICguLi50b0JlQWRkZWQ6IEJhdGNoVHlwZVtdKSA9PiB7XG4gICAgc2V0KGdldCgpLmNvbmNhdCh0b0JlQWRkZWQpKTtcbiAgfTtcblxuICBhZGRUb1N0YXJ0ID0gKC4uLnRvQmVBZGRlZDogQmF0Y2hUeXBlW10pID0+IHtcbiAgICBzZXQodG9CZUFkZGVkLmNvbmNhdChnZXQoKSkpO1xuICB9O1xuXG4gIGdldEFuZENsZWFyID0gKGxpbWl0OiBudW1iZXIgPSBJbmZpbml0eSk6IEJhdGNoVHlwZVtdID0+IHtcbiAgICBjb25zdCBhbGxFdmVudHMgPSBnZXQoKTtcbiAgICBjb25zdCBbZXZlbnRzVG9TZW5kLCBldmVudHNUb1N0b3JlXSA9IHNwbGl0KGFsbEV2ZW50cywgbGltaXQpO1xuICAgIHNldChldmVudHNUb1N0b3JlKTtcbiAgICByZXR1cm4gZXZlbnRzVG9TZW5kO1xuICB9O1xufVxuXG5sZXQgaXNMb2NhbFN0b3JhZ2VXcml0YWJsZSA9IHRydWU7XG5cbnRyeSB7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVzdCcsICd0ZXN0Jyk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGVzdCcpO1xufSBjYXRjaCAoZSkge1xuICAvLyBpZiBzZXQvcmVtb3ZlIGl0ZW0gZmFpbHMgbG9jYWxTdG9yYWdlIGlzIG5vdCB3cml0YWJsZVxuICAvLyBmYWxsYmFjayB0byBpbi1tZW1vcnkgc3RvcmFnZVxuICBpc0xvY2FsU3RvcmFnZVdyaXRhYmxlID0gZmFsc2U7XG59XG5cbmV4cG9ydCBjb25zdCBsb2NhbEJhdGNoU3RvcmFnZTogQmF0Y2hTdG9yYWdlID0gaXNMb2NhbFN0b3JhZ2VXcml0YWJsZVxuICA/IG5ldyBMb2NhbEJhdGNoU3RvcmFnZSgpXG4gIDogaW5NZW1vcnlCYXRjaFN0b3JhZ2U7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUdBLFNBQVFBLG9CQUFvQixRQUFPLGFBQWE7QUFDaEQsU0FBUUMsS0FBSyxRQUFPLFNBQVM7QUFFN0IsTUFBTUMsVUFBVSxHQUFHLGVBQWU7QUFFbEMsTUFBTUMsR0FBRyxHQUFHLE1BQU07RUFDaEIsSUFBSTtJQUNGLE1BQU1DLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDQyxPQUFPLENBQUNQLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLE9BQU9RLEtBQUssQ0FBQ0MsT0FBTyxDQUFDUCxNQUFNLENBQUMsR0FBR0EsTUFBTSxHQUFHLEVBQUU7RUFDNUMsQ0FBQyxDQUFDLE9BQU9RLENBQUMsRUFBRTtJQUNWLE9BQU8sRUFBRTtFQUNYO0FBQ0YsQ0FBQztBQUVELE1BQU1DLEdBQUcsR0FBSVQsTUFBbUIsSUFBSztFQUNuQyxJQUFJO0lBQ0ZHLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDTSxPQUFPLENBQUNaLFVBQVUsRUFBRUcsSUFBSSxDQUFDVSxTQUFTLENBQUNYLE1BQU0sQ0FBQyxDQUFDO0VBQ2pFLENBQUMsQ0FBQyxPQUFPUSxDQUFDLEVBQUU7SUFDVjtFQUFBO0FBRUosQ0FBQztBQUVELE1BQU1JLGlCQUFpQixDQUF5QjtFQUM5Q0MsR0FBRyxHQUFHLENBQUMsR0FBR0MsU0FBc0IsS0FBSztJQUNuQ0wsR0FBRyxDQUFDVixHQUFHLEVBQUUsQ0FBQ2dCLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLENBQUM7RUFDOUIsQ0FBQztFQUVERSxVQUFVLEdBQUcsQ0FBQyxHQUFHRixTQUFzQixLQUFLO0lBQzFDTCxHQUFHLENBQUNLLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDaEIsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUM5QixDQUFDO0VBRURrQixXQUFXLEdBQUcsQ0FBQ0MsS0FBYSxHQUFHQyxRQUFRLEtBQWtCO0lBQ3ZELE1BQU1DLFNBQVMsR0FBR3JCLEdBQUcsRUFBRTtJQUN2QixNQUFNLENBQUNzQixZQUFZLEVBQUVDLGFBQWEsQ0FBQyxHQUFHekIsS0FBSyxDQUFDdUIsU0FBUyxFQUFFRixLQUFLLENBQUM7SUFDN0RULEdBQUcsQ0FBQ2EsYUFBYSxDQUFDO0lBQ2xCLE9BQU9ELFlBQVk7RUFDckIsQ0FBQztBQUNIO0FBRUEsSUFBSUUsc0JBQXNCLEdBQUcsSUFBSTtBQUVqQyxJQUFJO0VBQ0ZwQixNQUFNLENBQUNDLFlBQVksQ0FBQ00sT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7RUFDM0NQLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDb0IsVUFBVSxDQUFDLE1BQU0sQ0FBQztBQUN4QyxDQUFDLENBQUMsT0FBT2hCLENBQUMsRUFBRTtFQUNWO0VBQ0E7RUFDQWUsc0JBQXNCLEdBQUcsS0FBSztBQUNoQztBQUVBLE9BQU8sTUFBTUUsaUJBQStCLEdBQUdGLHNCQUFzQixHQUNqRSxJQUFJWCxpQkFBaUIsRUFBRSxHQUN2QmhCLG9CQUFvQiJ9