/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

import { inMemoryBatchStorage, localBatchStorage } from '../storage/index';
const toBeTested = {
  localBatchStorage,
  inMemoryBatchStorage
};
Object.keys(toBeTested).forEach(storageType => {
  const {
    add,
    addToStart,
    getAndClear
  } = toBeTested[storageType];

  // eslint-disable-next-line jest/valid-describe
  describe(storageType, () => {
    test('add', () => {
      const data1 = {
        type: 'nick',
        payload: 'test'
      };
      const data2 = {
        type: '2',
        payload: 'test'
      };
      getAndClear();
      add(data1);
      add(data2);
      expect(getAndClear()).toEqual([data1, data2]);
    });
    test('addToStart', () => {
      const data1 = {
        type: '1',
        payload: 'test'
      };
      const data2 = {
        type: '2',
        payload: 'test'
      };
      getAndClear();
      add(data1);
      addToStart(data2);
      expect(getAndClear()).toEqual([data2, data1]);
    });
    test('getAndClear', () => {
      const data = {
        type: 'nick',
        payload: 'test'
      };
      getAndClear();
      add(data);
      expect(getAndClear()).toEqual([data]);
      expect(getAndClear().length).toBeFalsy();
    });
    test('getAndClear with limit', () => {
      const data = {
        type: 'nick',
        payload: 'test'
      };
      getAndClear();
      add(data);
      add(data);
      add(data);
      expect(getAndClear(2)).toEqual([data, data]);
      expect(getAndClear()).toEqual([data]);
      expect(getAndClear().length).toBeFalsy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbk1lbW9yeUJhdGNoU3RvcmFnZSIsImxvY2FsQmF0Y2hTdG9yYWdlIiwidG9CZVRlc3RlZCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwic3RvcmFnZVR5cGUiLCJhZGQiLCJhZGRUb1N0YXJ0IiwiZ2V0QW5kQ2xlYXIiLCJkZXNjcmliZSIsInRlc3QiLCJkYXRhMSIsInR5cGUiLCJwYXlsb2FkIiwiZGF0YTIiLCJleHBlY3QiLCJ0b0VxdWFsIiwiZGF0YSIsImxlbmd0aCIsInRvQmVGYWxzeSJdLCJzb3VyY2VzIjpbInNyYy9fX3Rlc3RzX18vc3RvcmFnZS10ZXN0LmJyb3dzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQge2luTWVtb3J5QmF0Y2hTdG9yYWdlLCBsb2NhbEJhdGNoU3RvcmFnZX0gZnJvbSAnLi4vc3RvcmFnZS9pbmRleCc7XG5cbmNvbnN0IHRvQmVUZXN0ZWQgPSB7XG4gIGxvY2FsQmF0Y2hTdG9yYWdlLFxuICBpbk1lbW9yeUJhdGNoU3RvcmFnZSxcbn07XG5cbk9iamVjdC5rZXlzKHRvQmVUZXN0ZWQpLmZvckVhY2goKHN0b3JhZ2VUeXBlKSA9PiB7XG4gIGNvbnN0IHthZGQsIGFkZFRvU3RhcnQsIGdldEFuZENsZWFyfSA9IHRvQmVUZXN0ZWRbc3RvcmFnZVR5cGVdO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqZXN0L3ZhbGlkLWRlc2NyaWJlXG4gIGRlc2NyaWJlKHN0b3JhZ2VUeXBlLCAoKSA9PiB7XG4gICAgdGVzdCgnYWRkJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YTEgPSB7dHlwZTogJ25pY2snLCBwYXlsb2FkOiAndGVzdCd9O1xuICAgICAgY29uc3QgZGF0YTIgPSB7dHlwZTogJzInLCBwYXlsb2FkOiAndGVzdCd9O1xuICAgICAgZ2V0QW5kQ2xlYXIoKTtcbiAgICAgIGFkZChkYXRhMSk7XG4gICAgICBhZGQoZGF0YTIpO1xuXG4gICAgICBleHBlY3QoZ2V0QW5kQ2xlYXIoKSkudG9FcXVhbChbZGF0YTEsIGRhdGEyXSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdhZGRUb1N0YXJ0JywgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YTEgPSB7dHlwZTogJzEnLCBwYXlsb2FkOiAndGVzdCd9O1xuICAgICAgY29uc3QgZGF0YTIgPSB7dHlwZTogJzInLCBwYXlsb2FkOiAndGVzdCd9O1xuICAgICAgZ2V0QW5kQ2xlYXIoKTtcbiAgICAgIGFkZChkYXRhMSk7XG4gICAgICBhZGRUb1N0YXJ0KGRhdGEyKTtcblxuICAgICAgZXhwZWN0KGdldEFuZENsZWFyKCkpLnRvRXF1YWwoW2RhdGEyLCBkYXRhMV0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZ2V0QW5kQ2xlYXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0ge3R5cGU6ICduaWNrJywgcGF5bG9hZDogJ3Rlc3QnfTtcbiAgICAgIGdldEFuZENsZWFyKCk7XG4gICAgICBhZGQoZGF0YSk7XG5cbiAgICAgIGV4cGVjdChnZXRBbmRDbGVhcigpKS50b0VxdWFsKFtkYXRhXSk7XG4gICAgICBleHBlY3QoZ2V0QW5kQ2xlYXIoKS5sZW5ndGgpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZ2V0QW5kQ2xlYXIgd2l0aCBsaW1pdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7dHlwZTogJ25pY2snLCBwYXlsb2FkOiAndGVzdCd9O1xuICAgICAgZ2V0QW5kQ2xlYXIoKTtcbiAgICAgIGFkZChkYXRhKTtcbiAgICAgIGFkZChkYXRhKTtcbiAgICAgIGFkZChkYXRhKTtcblxuICAgICAgZXhwZWN0KGdldEFuZENsZWFyKDIpKS50b0VxdWFsKFtkYXRhLCBkYXRhXSk7XG4gICAgICBleHBlY3QoZ2V0QW5kQ2xlYXIoKSkudG9FcXVhbChbZGF0YV0pO1xuICAgICAgZXhwZWN0KGdldEFuZENsZWFyKCkubGVuZ3RoKS50b0JlRmFsc3koKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVFBLG9CQUFvQixFQUFFQyxpQkFBaUIsUUFBTyxrQkFBa0I7QUFFeEUsTUFBTUMsVUFBVSxHQUFHO0VBQ2pCRCxpQkFBaUI7RUFDakJEO0FBQ0YsQ0FBQztBQUVERyxNQUFNLENBQUNDLElBQUksQ0FBQ0YsVUFBVSxDQUFDLENBQUNHLE9BQU8sQ0FBRUMsV0FBVyxJQUFLO0VBQy9DLE1BQU07SUFBQ0MsR0FBRztJQUFFQyxVQUFVO0lBQUVDO0VBQVcsQ0FBQyxHQUFHUCxVQUFVLENBQUNJLFdBQVcsQ0FBQzs7RUFFOUQ7RUFDQUksUUFBUSxDQUFDSixXQUFXLEVBQUUsTUFBTTtJQUMxQkssSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNO01BQ2hCLE1BQU1DLEtBQUssR0FBRztRQUFDQyxJQUFJLEVBQUUsTUFBTTtRQUFFQyxPQUFPLEVBQUU7TUFBTSxDQUFDO01BQzdDLE1BQU1DLEtBQUssR0FBRztRQUFDRixJQUFJLEVBQUUsR0FBRztRQUFFQyxPQUFPLEVBQUU7TUFBTSxDQUFDO01BQzFDTCxXQUFXLEVBQUU7TUFDYkYsR0FBRyxDQUFDSyxLQUFLLENBQUM7TUFDVkwsR0FBRyxDQUFDUSxLQUFLLENBQUM7TUFFVkMsTUFBTSxDQUFDUCxXQUFXLEVBQUUsQ0FBQyxDQUFDUSxPQUFPLENBQUMsQ0FBQ0wsS0FBSyxFQUFFRyxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7SUFFRkosSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNO01BQ3ZCLE1BQU1DLEtBQUssR0FBRztRQUFDQyxJQUFJLEVBQUUsR0FBRztRQUFFQyxPQUFPLEVBQUU7TUFBTSxDQUFDO01BQzFDLE1BQU1DLEtBQUssR0FBRztRQUFDRixJQUFJLEVBQUUsR0FBRztRQUFFQyxPQUFPLEVBQUU7TUFBTSxDQUFDO01BQzFDTCxXQUFXLEVBQUU7TUFDYkYsR0FBRyxDQUFDSyxLQUFLLENBQUM7TUFDVkosVUFBVSxDQUFDTyxLQUFLLENBQUM7TUFFakJDLE1BQU0sQ0FBQ1AsV0FBVyxFQUFFLENBQUMsQ0FBQ1EsT0FBTyxDQUFDLENBQUNGLEtBQUssRUFBRUgsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0lBRUZELElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTTtNQUN4QixNQUFNTyxJQUFJLEdBQUc7UUFBQ0wsSUFBSSxFQUFFLE1BQU07UUFBRUMsT0FBTyxFQUFFO01BQU0sQ0FBQztNQUM1Q0wsV0FBVyxFQUFFO01BQ2JGLEdBQUcsQ0FBQ1csSUFBSSxDQUFDO01BRVRGLE1BQU0sQ0FBQ1AsV0FBVyxFQUFFLENBQUMsQ0FBQ1EsT0FBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDO01BQ3JDRixNQUFNLENBQUNQLFdBQVcsRUFBRSxDQUFDVSxNQUFNLENBQUMsQ0FBQ0MsU0FBUyxFQUFFO0lBQzFDLENBQUMsQ0FBQztJQUVGVCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsTUFBTTtNQUNuQyxNQUFNTyxJQUFJLEdBQUc7UUFBQ0wsSUFBSSxFQUFFLE1BQU07UUFBRUMsT0FBTyxFQUFFO01BQU0sQ0FBQztNQUM1Q0wsV0FBVyxFQUFFO01BQ2JGLEdBQUcsQ0FBQ1csSUFBSSxDQUFDO01BQ1RYLEdBQUcsQ0FBQ1csSUFBSSxDQUFDO01BQ1RYLEdBQUcsQ0FBQ1csSUFBSSxDQUFDO01BRVRGLE1BQU0sQ0FBQ1AsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNRLE9BQU8sQ0FBQyxDQUFDQyxJQUFJLEVBQUVBLElBQUksQ0FBQyxDQUFDO01BQzVDRixNQUFNLENBQUNQLFdBQVcsRUFBRSxDQUFDLENBQUNRLE9BQU8sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQztNQUNyQ0YsTUFBTSxDQUFDUCxXQUFXLEVBQUUsQ0FBQ1UsTUFBTSxDQUFDLENBQUNDLFNBQVMsRUFBRTtJQUMxQyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==