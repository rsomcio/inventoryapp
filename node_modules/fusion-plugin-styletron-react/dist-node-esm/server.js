/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-env node */

import path from 'path';
import fs from 'fs';
import React from 'react';
import { createPlugin, dangerouslySetHTML } from 'fusion-core';
import { Provider as StyletronProvider } from 'styletron-react';
import { workerRoute, wasmRoute, AtomicPrefixToken } from './constants';
import { jsx as _jsx } from "react/jsx-runtime";
let workerPath;
let wasmPath;
if (process.env.NODE_ENV !== "production" && true) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}
function getPlugin(getStyletronEngine) {
  const plugin = true && createPlugin({
    deps: {
      prefix: AtomicPrefixToken.optional
    },
    middleware: ({
      prefix
    }) => (ctx, next) => {
      if (process.env.NODE_ENV !== "production") {
        if (ctx.url === workerRoute) {
          ctx.body = fs.createReadStream(workerPath);
          return next();
        }
        if (ctx.url === wasmRoute) {
          ctx.body = fs.createReadStream(wasmPath);
          return next();
        }
      }
      if (ctx.element) {
        const config = prefix === void 0 ? void 0 : {
          prefix
        };
        const engine = getStyletronEngine(config);
        ctx.element = /*#__PURE__*/_jsx(StyletronProvider, {
          value: engine,
          children: ctx.element
        });
        return next().then(() => {
          const stylesForHead = engine.getStylesheetsHtml();
          ctx.template.head.push(dangerouslySetHTML(stylesForHead));
        });
      } else {
        return next();
      }
    }
  });
  return plugin;
}
export default getPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoIiwiZnMiLCJSZWFjdCIsImNyZWF0ZVBsdWdpbiIsImRhbmdlcm91c2x5U2V0SFRNTCIsIlByb3ZpZGVyIiwiU3R5bGV0cm9uUHJvdmlkZXIiLCJ3b3JrZXJSb3V0ZSIsIndhc21Sb3V0ZSIsIkF0b21pY1ByZWZpeFRva2VuIiwid29ya2VyUGF0aCIsIndhc21QYXRoIiwiYmFzZSIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsImdldFBsdWdpbiIsImdldFN0eWxldHJvbkVuZ2luZSIsInBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJvcHRpb25hbCIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwidXJsIiwiYm9keSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIl0sInNvdXJjZXMiOlsic3JjL3NlcnZlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW4sIGRhbmdlcm91c2x5U2V0SFRNTH0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5pbXBvcnQge1Byb3ZpZGVyIGFzIFN0eWxldHJvblByb3ZpZGVyfSBmcm9tICdzdHlsZXRyb24tcmVhY3QnO1xuXG5pbXBvcnQge3dvcmtlclJvdXRlLCB3YXNtUm91dGUsIEF0b21pY1ByZWZpeFRva2VufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmxldCB3b3JrZXJQYXRoO1xubGV0IHdhc21QYXRoO1xuXG5pZiAoX19ERVZfXyAmJiBfX05PREVfXykge1xuICBjb25zdCBiYXNlID0gcGF0aC5kaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgnY3NzLXRvLWpzLXNvdXJjZW1hcC13b3JrZXInKSk7XG4gIHdvcmtlclBhdGggPSBwYXRoLnJlc29sdmUoYmFzZSwgJ3dvcmtlci5qcycpO1xuICB3YXNtUGF0aCA9IHBhdGgucmVzb2x2ZShiYXNlLCAnbWFwcGluZ3Mud2FzbScpO1xufVxuXG5mdW5jdGlvbiBnZXRQbHVnaW4oZ2V0U3R5bGV0cm9uRW5naW5lOiBhbnkpOiBhbnkge1xuICBjb25zdCBwbHVnaW4gPVxuICAgIF9fTk9ERV9fICYmXG4gICAgY3JlYXRlUGx1Z2luKHtcbiAgICAgIGRlcHM6IHtcbiAgICAgICAgcHJlZml4OiBBdG9taWNQcmVmaXhUb2tlbi5vcHRpb25hbCxcbiAgICAgIH0sXG4gICAgICBtaWRkbGV3YXJlOlxuICAgICAgICAoe3ByZWZpeH0pID0+XG4gICAgICAgIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgaWYgKGN0eC51cmwgPT09IHdvcmtlclJvdXRlKSB7XG4gICAgICAgICAgICAgIGN0eC5ib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh3b3JrZXJQYXRoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdHgudXJsID09PSB3YXNtUm91dGUpIHtcbiAgICAgICAgICAgICAgY3R4LmJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHdhc21QYXRoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHByZWZpeCA9PT0gdm9pZCAwID8gdm9pZCAwIDoge3ByZWZpeH07XG4gICAgICAgICAgICBjb25zdCBlbmdpbmUgPSBnZXRTdHlsZXRyb25FbmdpbmUoY29uZmlnKTtcblxuICAgICAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgICAgIDxTdHlsZXRyb25Qcm92aWRlciB2YWx1ZT17ZW5naW5lfT5cbiAgICAgICAgICAgICAgICB7Y3R4LmVsZW1lbnR9XG4gICAgICAgICAgICAgIDwvU3R5bGV0cm9uUHJvdmlkZXI+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdHlsZXNGb3JIZWFkID0gZW5naW5lLmdldFN0eWxlc2hlZXRzSHRtbCgpO1xuICAgICAgICAgICAgICBjdHgudGVtcGxhdGUuaGVhZC5wdXNoKGRhbmdlcm91c2x5U2V0SFRNTChzdHlsZXNGb3JIZWFkKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gIHJldHVybiBwbHVnaW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFBsdWdpbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU9BLElBQUksTUFBTSxNQUFNO0FBQ3ZCLE9BQU9DLEVBQUUsTUFBTSxJQUFJO0FBRW5CLE9BQU9DLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLFlBQVksRUFBRUMsa0JBQWtCLFFBQU8sYUFBYTtBQUU1RCxTQUFRQyxRQUFRLElBQUlDLGlCQUFpQixRQUFPLGlCQUFpQjtBQUU3RCxTQUFRQyxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsaUJBQWlCLFFBQU8sYUFBYTtBQUFDO0FBRXRFLElBQUlDLFVBQVU7QUFDZCxJQUFJQyxRQUFRO0FBRVosSUFBSSw2Q0FBbUIsRUFBRTtFQUN2QixNQUFNQyxJQUFJLEdBQUdaLElBQUksQ0FBQ2EsT0FBTyxDQUFDQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0VBQ3hFTCxVQUFVLEdBQUdWLElBQUksQ0FBQ2UsT0FBTyxDQUFDSCxJQUFJLEVBQUUsV0FBVyxDQUFDO0VBQzVDRCxRQUFRLEdBQUdYLElBQUksQ0FBQ2UsT0FBTyxDQUFDSCxJQUFJLEVBQUUsZUFBZSxDQUFDO0FBQ2hEO0FBRUEsU0FBU0ksU0FBUyxDQUFDQyxrQkFBdUIsRUFBTztFQUMvQyxNQUFNQyxNQUFNLEdBQ1YsUUFDQWYsWUFBWSxDQUFDO0lBQ1hnQixJQUFJLEVBQUU7TUFDSkMsTUFBTSxFQUFFWCxpQkFBaUIsQ0FBQ1k7SUFDNUIsQ0FBQztJQUNEQyxVQUFVLEVBQ1IsQ0FBQztNQUFDRjtJQUFNLENBQUMsS0FDVCxDQUFDRyxHQUFHLEVBQUVDLElBQUksS0FBSztNQUNiLDJDQUFhO1FBQ1gsSUFBSUQsR0FBRyxDQUFDRSxHQUFHLEtBQUtsQixXQUFXLEVBQUU7VUFDM0JnQixHQUFHLENBQUNHLElBQUksR0FBR3pCLEVBQUUsQ0FBQzBCLGdCQUFnQixDQUFDakIsVUFBVSxDQUFDO1VBQzFDLE9BQU9jLElBQUksRUFBRTtRQUNmO1FBQ0EsSUFBSUQsR0FBRyxDQUFDRSxHQUFHLEtBQUtqQixTQUFTLEVBQUU7VUFDekJlLEdBQUcsQ0FBQ0csSUFBSSxHQUFHekIsRUFBRSxDQUFDMEIsZ0JBQWdCLENBQUNoQixRQUFRLENBQUM7VUFDeEMsT0FBT2EsSUFBSSxFQUFFO1FBQ2Y7TUFDRjtNQUVBLElBQUlELEdBQUcsQ0FBQ0ssT0FBTyxFQUFFO1FBQ2YsTUFBTUMsTUFBTSxHQUFHVCxNQUFNLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUc7VUFBQ0E7UUFBTSxDQUFDO1FBQ3BELE1BQU1VLE1BQU0sR0FBR2Isa0JBQWtCLENBQUNZLE1BQU0sQ0FBQztRQUV6Q04sR0FBRyxDQUFDSyxPQUFPLGdCQUNULEtBQUMsaUJBQWlCO1VBQUMsS0FBSyxFQUFFRSxNQUFPO1VBQUEsVUFDOUJQLEdBQUcsQ0FBQ0s7UUFBTyxFQUVmO1FBRUQsT0FBT0osSUFBSSxFQUFFLENBQUNPLElBQUksQ0FBQyxNQUFNO1VBQ3ZCLE1BQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBa0IsRUFBRTtVQUNqRFYsR0FBRyxDQUFDVyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsSUFBSSxDQUFDaEMsa0JBQWtCLENBQUM0QixhQUFhLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUM7TUFDSixDQUFDLE1BQU07UUFDTCxPQUFPUixJQUFJLEVBQUU7TUFDZjtJQUNGO0VBQ0osQ0FBQyxDQUFDO0VBQ0osT0FBT04sTUFBTTtBQUNmO0FBRUEsZUFBZUYsU0FBUyJ9