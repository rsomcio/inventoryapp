/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-env browser */
/* global module */

import React from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
let debugEngine;
let engine;
function getPlugin(getStyletronEngine) {
  const plugin = false && createPlugin({
    deps: {
      prefix: AtomicPrefixToken.optional
    },
    middleware: ({
      prefix
    }) => (ctx, next) => {
      if (ctx.element) {
        if (!engine) {
          const config = {
            hydrate: document.getElementsByClassName('_styletron_hydrate_')
          };
          if (prefix !== void 0) {
            config.prefix = prefix;
          }
          engine = getStyletronEngine(config);
        }
        if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
          const worker = new Worker(workerRoute);
          worker.postMessage({
            id: 'init_wasm',
            url: wasmRoute
          });
          worker.postMessage({
            id: 'set_render_interval',
            interval: 180
          });
          if (module.hot) {
            module.hot.addStatusHandler(status => {
              if (status === 'dispose') {
                worker.postMessage({
                  id: 'invalidate'
                });
              }
            });
          }
          debugEngine = new DebugEngine(worker);
        }
        ctx.element = /*#__PURE__*/_jsx(StyletronProvider, {
          value: engine,
          debug: debugEngine,
          debugAfterHydration: Boolean(debugEngine),
          children: ctx.element
        });
      }
      return next();
    }
  });
  return plugin;
}
export default getPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsImRlYnVnRW5naW5lIiwiZW5naW5lIiwiZ2V0UGx1Z2luIiwiZ2V0U3R5bGV0cm9uRW5naW5lIiwicGx1Z2luIiwiY3JlYXRlUGx1Z2luIiwiZGVwcyIsInByZWZpeCIsIkF0b21pY1ByZWZpeFRva2VuIiwib3B0aW9uYWwiLCJtaWRkbGV3YXJlIiwiY3R4IiwibmV4dCIsImVsZW1lbnQiLCJjb25maWciLCJoeWRyYXRlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiV29ya2VyIiwid29ya2VyIiwid29ya2VyUm91dGUiLCJwb3N0TWVzc2FnZSIsImlkIiwidXJsIiwid2FzbVJvdXRlIiwiaW50ZXJ2YWwiLCJtb2R1bGUiLCJob3QiLCJhZGRTdGF0dXNIYW5kbGVyIiwic3RhdHVzIiwiRGVidWdFbmdpbmUiLCJCb29sZWFuIl0sInNvdXJjZXMiOlsic3JjL2Jyb3dzZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG4vKiBnbG9iYWwgbW9kdWxlICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5pbXBvcnQge1Byb3ZpZGVyIGFzIFN0eWxldHJvblByb3ZpZGVyLCBEZWJ1Z0VuZ2luZX0gZnJvbSAnc3R5bGV0cm9uLXJlYWN0JztcblxuaW1wb3J0IHt3b3JrZXJSb3V0ZSwgd2FzbVJvdXRlLCBBdG9taWNQcmVmaXhUb2tlbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5sZXQgZGVidWdFbmdpbmU7XG5sZXQgZW5naW5lO1xuXG5mdW5jdGlvbiBnZXRQbHVnaW4oZ2V0U3R5bGV0cm9uRW5naW5lOiBhbnkpOiBhbnkge1xuICBjb25zdCBwbHVnaW4gPVxuICAgIF9fQlJPV1NFUl9fICYmXG4gICAgY3JlYXRlUGx1Z2luKHtcbiAgICAgIGRlcHM6IHtcbiAgICAgICAgcHJlZml4OiBBdG9taWNQcmVmaXhUb2tlbi5vcHRpb25hbCxcbiAgICAgIH0sXG4gICAgICBtaWRkbGV3YXJlOlxuICAgICAgICAoe3ByZWZpeH0pID0+XG4gICAgICAgIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICBpZiAoY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICghZW5naW5lKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGU6IEhUTUxDb2xsZWN0aW9uO1xuICAgICAgICAgICAgICAgIHByZWZpeD86IHN0cmluZztcbiAgICAgICAgICAgICAgfSA9IHtcbiAgICAgICAgICAgICAgICBoeWRyYXRlOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdfc3R5bGV0cm9uX2h5ZHJhdGVfJyksXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChwcmVmaXggIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5wcmVmaXggPSBwcmVmaXg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZW5naW5lID0gZ2V0U3R5bGV0cm9uRW5naW5lKGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiAhZGVidWdFbmdpbmUgJiYgdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJSb3V0ZSk7XG4gICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6ICdpbml0X3dhc20nLFxuICAgICAgICAgICAgICAgIHVybDogd2FzbVJvdXRlLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogJ3NldF9yZW5kZXJfaW50ZXJ2YWwnLFxuICAgICAgICAgICAgICAgIGludGVydmFsOiAxODAsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoKG1vZHVsZSBhcyBhbnkpLmhvdCkge1xuICAgICAgICAgICAgICAgIChtb2R1bGUgYXMgYW55KS5ob3QuYWRkU3RhdHVzSGFuZGxlcigoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnZGlzcG9zZScpIHtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtpZDogJ2ludmFsaWRhdGUnfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGVidWdFbmdpbmUgPSBuZXcgRGVidWdFbmdpbmUod29ya2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5lbGVtZW50ID0gKFxuICAgICAgICAgICAgICA8U3R5bGV0cm9uUHJvdmlkZXJcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZW5naW5lfVxuICAgICAgICAgICAgICAgIGRlYnVnPXtkZWJ1Z0VuZ2luZX1cbiAgICAgICAgICAgICAgICBkZWJ1Z0FmdGVySHlkcmF0aW9uPXtCb29sZWFuKGRlYnVnRW5naW5lKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjdHguZWxlbWVudH1cbiAgICAgICAgICAgICAgPC9TdHlsZXRyb25Qcm92aWRlcj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UGx1Z2luO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUFDO0FBTzFCLElBQUlDLFdBQVc7QUFDZixJQUFJQyxNQUFNO0FBRVYsU0FBU0MsU0FBUyxDQUFDQyxrQkFBdUIsRUFBTztFQUMvQyxNQUFNQyxNQUFNLEdBQ1YsU0FDQUMsWUFBWSxDQUFDO0lBQ1hDLElBQUksRUFBRTtNQUNKQyxNQUFNLEVBQUVDLGlCQUFpQixDQUFDQztJQUM1QixDQUFDO0lBQ0RDLFVBQVUsRUFDUixDQUFDO01BQUNIO0lBQU0sQ0FBQyxLQUNULENBQUNJLEdBQUcsRUFBRUMsSUFBSSxLQUFLO01BQ2IsSUFBSUQsR0FBRyxDQUFDRSxPQUFPLEVBQUU7UUFDZixJQUFJLENBQUNaLE1BQU0sRUFBRTtVQUNYLE1BQU1hLE1BR0wsR0FBRztZQUNGQyxPQUFPLEVBQUVDLFFBQVEsQ0FBQ0Msc0JBQXNCLENBQUMscUJBQXFCO1VBQ2hFLENBQUM7VUFDRCxJQUFJVixNQUFNLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDckJPLE1BQU0sQ0FBQ1AsTUFBTSxHQUFHQSxNQUFNO1VBQ3hCO1VBQ0FOLE1BQU0sR0FBR0Usa0JBQWtCLENBQUNXLE1BQU0sQ0FBQztRQUNyQztRQUNBLElBQUkseUNBQVcsQ0FBQ2QsV0FBVyxJQUFJLE9BQU9rQixNQUFNLEtBQUssV0FBVyxFQUFFO1VBQzVELE1BQU1DLE1BQU0sR0FBRyxJQUFJRCxNQUFNLENBQUNFLFdBQVcsQ0FBQztVQUN0Q0QsTUFBTSxDQUFDRSxXQUFXLENBQUM7WUFDakJDLEVBQUUsRUFBRSxXQUFXO1lBQ2ZDLEdBQUcsRUFBRUM7VUFDUCxDQUFDLENBQUM7VUFDRkwsTUFBTSxDQUFDRSxXQUFXLENBQUM7WUFDakJDLEVBQUUsRUFBRSxxQkFBcUI7WUFDekJHLFFBQVEsRUFBRTtVQUNaLENBQUMsQ0FBQztVQUNGLElBQUtDLE1BQU0sQ0FBU0MsR0FBRyxFQUFFO1lBQ3RCRCxNQUFNLENBQVNDLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUVDLE1BQU0sSUFBSztjQUMvQyxJQUFJQSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN4QlYsTUFBTSxDQUFDRSxXQUFXLENBQUM7a0JBQUNDLEVBQUUsRUFBRTtnQkFBWSxDQUFDLENBQUM7Y0FDeEM7WUFDRixDQUFDLENBQUM7VUFDSjtVQUNBdEIsV0FBVyxHQUFHLElBQUk4QixXQUFXLENBQUNYLE1BQU0sQ0FBQztRQUN2QztRQUNBUixHQUFHLENBQUNFLE9BQU8sZ0JBQ1QsS0FBQyxpQkFBaUI7VUFDaEIsS0FBSyxFQUFFWixNQUFPO1VBQ2QsS0FBSyxFQUFFRCxXQUFZO1VBQ25CLG1CQUFtQixFQUFFK0IsT0FBTyxDQUFDL0IsV0FBVyxDQUFFO1VBQUEsVUFFekNXLEdBQUcsQ0FBQ0U7UUFBTyxFQUVmO01BQ0g7TUFFQSxPQUFPRCxJQUFJLEVBQUU7SUFDZjtFQUNKLENBQUMsQ0FBQztFQUNKLE9BQU9SLE1BQU07QUFDZjtBQUVBLGVBQWVGLFNBQVMifQ==