/**
 * @jest-environment node
 */

/* eslint-env jest, node, browser */

import child_process from 'child_process';
import { promisify } from 'util';
import getPort from 'get-port';
import puppeteer from 'puppeteer';
import { untilReady, getComputedStyle, getStyles } from '../utils';
const execFile = promisify(child_process.execFile);
const spawn = child_process.spawn;
const fixture = __dirname;
test('basic rendering and hydration works', async () => {
  const [port] = await Promise.all([getPort(), execFile('fusion', ['build'], {
    cwd: fixture
  })]);
  const server = spawn('fusion', ['start', `--port=${port}`], {
    stdio: 'inherit',
    cwd: fixture
  });
  const browser = await puppeteer.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const page = await browser.newPage();
  await untilReady(page, port);
  await page.goto(`http://localhost:${port}`);
  expect((await getComputedStyle(page, '#styled')).color).toEqual('rgb(255, 0, 0)');
  expect((await getStyles(page)).length).toBe(1);
  await page.click('#toggle');
  expect((await getComputedStyle(page, '#styled')).color).toEqual('rgb(0, 0, 255)');
  expect((await getStyles(page)).length).toBe(2);
  await page.click('#toggle');
  expect((await getComputedStyle(page, '#styled')).color).toEqual('rgb(255, 0, 0)');
  expect((await getStyles(page)).length).toBe(2);
  server.kill();
  browser.close();
}, 100000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGlsZF9wcm9jZXNzIiwicHJvbWlzaWZ5IiwiZ2V0UG9ydCIsInB1cHBldGVlciIsInVudGlsUmVhZHkiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0U3R5bGVzIiwiZXhlY0ZpbGUiLCJzcGF3biIsImZpeHR1cmUiLCJfX2Rpcm5hbWUiLCJ0ZXN0IiwicG9ydCIsIlByb21pc2UiLCJhbGwiLCJjd2QiLCJzZXJ2ZXIiLCJzdGRpbyIsImJyb3dzZXIiLCJsYXVuY2giLCJhcmdzIiwicGFnZSIsIm5ld1BhZ2UiLCJnb3RvIiwiZXhwZWN0IiwiY29sb3IiLCJ0b0VxdWFsIiwibGVuZ3RoIiwidG9CZSIsImNsaWNrIiwia2lsbCIsImNsb3NlIl0sInNvdXJjZXMiOlsic3JjL3Rlc3QvYmFzaWMvZTJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBub2RlXG4gKi9cblxuLyogZXNsaW50LWVudiBqZXN0LCBub2RlLCBicm93c2VyICovXG5cbmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHtwcm9taXNpZnl9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IGdldFBvcnQgZnJvbSAnZ2V0LXBvcnQnO1xuaW1wb3J0IHB1cHBldGVlciBmcm9tICdwdXBwZXRlZXInO1xuXG5pbXBvcnQge3VudGlsUmVhZHksIGdldENvbXB1dGVkU3R5bGUsIGdldFN0eWxlc30gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBleGVjRmlsZSA9IHByb21pc2lmeShjaGlsZF9wcm9jZXNzLmV4ZWNGaWxlKTtcbmNvbnN0IHNwYXduID0gY2hpbGRfcHJvY2Vzcy5zcGF3bjtcblxuY29uc3QgZml4dHVyZSA9IF9fZGlybmFtZTtcblxudGVzdCgnYmFzaWMgcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24gd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IFtwb3J0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBnZXRQb3J0KCksXG4gICAgZXhlY0ZpbGUoJ2Z1c2lvbicsIFsnYnVpbGQnXSwge2N3ZDogZml4dHVyZX0pLFxuICBdKTtcblxuICBjb25zdCBzZXJ2ZXIgPSBzcGF3bignZnVzaW9uJywgWydzdGFydCcsIGAtLXBvcnQ9JHtwb3J0fWBdLCB7XG4gICAgc3RkaW86ICdpbmhlcml0JyxcbiAgICBjd2Q6IGZpeHR1cmUsXG4gIH0pO1xuXG4gIGNvbnN0IGJyb3dzZXIgPSBhd2FpdCBwdXBwZXRlZXIubGF1bmNoKHtcbiAgICBhcmdzOiBbJy0tbm8tc2FuZGJveCcsICctLWRpc2FibGUtc2V0dWlkLXNhbmRib3gnXSxcbiAgfSk7XG5cbiAgY29uc3QgcGFnZSA9IGF3YWl0IGJyb3dzZXIubmV3UGFnZSgpO1xuICBhd2FpdCB1bnRpbFJlYWR5KHBhZ2UsIHBvcnQpO1xuICBhd2FpdCBwYWdlLmdvdG8oYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApO1xuXG4gIGV4cGVjdCgoYXdhaXQgZ2V0Q29tcHV0ZWRTdHlsZShwYWdlLCAnI3N0eWxlZCcpKS5jb2xvcikudG9FcXVhbChcbiAgICAncmdiKDI1NSwgMCwgMCknXG4gICk7XG4gIGV4cGVjdCgoYXdhaXQgZ2V0U3R5bGVzKHBhZ2UpKS5sZW5ndGgpLnRvQmUoMSk7XG5cbiAgYXdhaXQgcGFnZS5jbGljaygnI3RvZ2dsZScpO1xuICBleHBlY3QoKGF3YWl0IGdldENvbXB1dGVkU3R5bGUocGFnZSwgJyNzdHlsZWQnKSkuY29sb3IpLnRvRXF1YWwoXG4gICAgJ3JnYigwLCAwLCAyNTUpJ1xuICApO1xuICBleHBlY3QoKGF3YWl0IGdldFN0eWxlcyhwYWdlKSkubGVuZ3RoKS50b0JlKDIpO1xuXG4gIGF3YWl0IHBhZ2UuY2xpY2soJyN0b2dnbGUnKTtcbiAgZXhwZWN0KChhd2FpdCBnZXRDb21wdXRlZFN0eWxlKHBhZ2UsICcjc3R5bGVkJykpLmNvbG9yKS50b0VxdWFsKFxuICAgICdyZ2IoMjU1LCAwLCAwKSdcbiAgKTtcbiAgZXhwZWN0KChhd2FpdCBnZXRTdHlsZXMocGFnZSkpLmxlbmd0aCkudG9CZSgyKTtcblxuICBzZXJ2ZXIua2lsbCgpO1xuICBicm93c2VyLmNsb3NlKCk7XG59LCAxMDAwMDApO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBT0EsYUFBYSxNQUFNLGVBQWU7QUFDekMsU0FBUUMsU0FBUyxRQUFPLE1BQU07QUFDOUIsT0FBT0MsT0FBTyxNQUFNLFVBQVU7QUFDOUIsT0FBT0MsU0FBUyxNQUFNLFdBQVc7QUFFakMsU0FBUUMsVUFBVSxFQUFFQyxnQkFBZ0IsRUFBRUMsU0FBUyxRQUFPLFVBQVU7QUFFaEUsTUFBTUMsUUFBUSxHQUFHTixTQUFTLENBQUNELGFBQWEsQ0FBQ08sUUFBUSxDQUFDO0FBQ2xELE1BQU1DLEtBQUssR0FBR1IsYUFBYSxDQUFDUSxLQUFLO0FBRWpDLE1BQU1DLE9BQU8sR0FBR0MsU0FBUztBQUV6QkMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQVk7RUFDdEQsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUMvQlosT0FBTyxFQUFFLEVBQ1RLLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUFDUSxHQUFHLEVBQUVOO0VBQU8sQ0FBQyxDQUFDLENBQzlDLENBQUM7RUFFRixNQUFNTyxNQUFNLEdBQUdSLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUcsVUFBU0ksSUFBSyxFQUFDLENBQUMsRUFBRTtJQUMxREssS0FBSyxFQUFFLFNBQVM7SUFDaEJGLEdBQUcsRUFBRU47RUFDUCxDQUFDLENBQUM7RUFFRixNQUFNUyxPQUFPLEdBQUcsTUFBTWYsU0FBUyxDQUFDZ0IsTUFBTSxDQUFDO0lBQ3JDQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsMEJBQTBCO0VBQ25ELENBQUMsQ0FBQztFQUVGLE1BQU1DLElBQUksR0FBRyxNQUFNSCxPQUFPLENBQUNJLE9BQU8sRUFBRTtFQUNwQyxNQUFNbEIsVUFBVSxDQUFDaUIsSUFBSSxFQUFFVCxJQUFJLENBQUM7RUFDNUIsTUFBTVMsSUFBSSxDQUFDRSxJQUFJLENBQUUsb0JBQW1CWCxJQUFLLEVBQUMsQ0FBQztFQUUzQ1ksTUFBTSxDQUFDLENBQUMsTUFBTW5CLGdCQUFnQixDQUFDZ0IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFSSxLQUFLLENBQUMsQ0FBQ0MsT0FBTyxDQUM3RCxnQkFBZ0IsQ0FDakI7RUFDREYsTUFBTSxDQUFDLENBQUMsTUFBTWxCLFNBQVMsQ0FBQ2UsSUFBSSxDQUFDLEVBQUVNLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBRTlDLE1BQU1QLElBQUksQ0FBQ1EsS0FBSyxDQUFDLFNBQVMsQ0FBQztFQUMzQkwsTUFBTSxDQUFDLENBQUMsTUFBTW5CLGdCQUFnQixDQUFDZ0IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFSSxLQUFLLENBQUMsQ0FBQ0MsT0FBTyxDQUM3RCxnQkFBZ0IsQ0FDakI7RUFDREYsTUFBTSxDQUFDLENBQUMsTUFBTWxCLFNBQVMsQ0FBQ2UsSUFBSSxDQUFDLEVBQUVNLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBRTlDLE1BQU1QLElBQUksQ0FBQ1EsS0FBSyxDQUFDLFNBQVMsQ0FBQztFQUMzQkwsTUFBTSxDQUFDLENBQUMsTUFBTW5CLGdCQUFnQixDQUFDZ0IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFSSxLQUFLLENBQUMsQ0FBQ0MsT0FBTyxDQUM3RCxnQkFBZ0IsQ0FDakI7RUFDREYsTUFBTSxDQUFDLENBQUMsTUFBTWxCLFNBQVMsQ0FBQ2UsSUFBSSxDQUFDLEVBQUVNLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBRTlDWixNQUFNLENBQUNjLElBQUksRUFBRTtFQUNiWixPQUFPLENBQUNhLEtBQUssRUFBRTtBQUNqQixDQUFDLEVBQUUsTUFBTSxDQUFDIn0=