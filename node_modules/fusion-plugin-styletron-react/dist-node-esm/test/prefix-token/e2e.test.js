/**
 * @jest-environment node
 */

/* eslint-env jest, node, browser */

import child_process from 'child_process';
import { promisify } from 'util';
import getPort from 'get-port';
import puppeteer from 'puppeteer';
import { untilReady, getComputedStyle, getStyles } from '../utils';
const execFile = promisify(child_process.execFile);
const spawn = child_process.spawn;
const fixture = __dirname;
test('token prefix', async () => {
  const [port] = await Promise.all([getPort(), execFile('fusion', ['build'], {
    cwd: fixture
  })]);
  const server = spawn('fusion', ['start', `--port=${port}`], {
    stdio: 'inherit',
    cwd: fixture
  });
  const browser = await puppeteer.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const page = await browser.newPage();
  await untilReady(page, port);
  expect((await getComputedStyle(page, '#styled')).color).toEqual('rgb(255, 0, 0)');
  const styles = await getStyles(page);
  expect(styles.every(style => style.startsWith('.__atomic_prefix__'))).toBe(true);
  server.kill();
  browser.close();
}, 100000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGlsZF9wcm9jZXNzIiwicHJvbWlzaWZ5IiwiZ2V0UG9ydCIsInB1cHBldGVlciIsInVudGlsUmVhZHkiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0U3R5bGVzIiwiZXhlY0ZpbGUiLCJzcGF3biIsImZpeHR1cmUiLCJfX2Rpcm5hbWUiLCJ0ZXN0IiwicG9ydCIsIlByb21pc2UiLCJhbGwiLCJjd2QiLCJzZXJ2ZXIiLCJzdGRpbyIsImJyb3dzZXIiLCJsYXVuY2giLCJhcmdzIiwicGFnZSIsIm5ld1BhZ2UiLCJleHBlY3QiLCJjb2xvciIsInRvRXF1YWwiLCJzdHlsZXMiLCJldmVyeSIsInN0eWxlIiwic3RhcnRzV2l0aCIsInRvQmUiLCJraWxsIiwiY2xvc2UiXSwic291cmNlcyI6WyJzcmMvdGVzdC9wcmVmaXgtdG9rZW4vZTJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBub2RlXG4gKi9cblxuLyogZXNsaW50LWVudiBqZXN0LCBub2RlLCBicm93c2VyICovXG5cbmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHtwcm9taXNpZnl9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IGdldFBvcnQgZnJvbSAnZ2V0LXBvcnQnO1xuaW1wb3J0IHB1cHBldGVlciBmcm9tICdwdXBwZXRlZXInO1xuaW1wb3J0IHt1bnRpbFJlYWR5LCBnZXRDb21wdXRlZFN0eWxlLCBnZXRTdHlsZXN9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgZXhlY0ZpbGUgPSBwcm9taXNpZnkoY2hpbGRfcHJvY2Vzcy5leGVjRmlsZSk7XG5jb25zdCBzcGF3biA9IGNoaWxkX3Byb2Nlc3Muc3Bhd247XG5cbmNvbnN0IGZpeHR1cmUgPSBfX2Rpcm5hbWU7XG5cbnRlc3QoJ3Rva2VuIHByZWZpeCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgW3BvcnRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGdldFBvcnQoKSxcbiAgICBleGVjRmlsZSgnZnVzaW9uJywgWydidWlsZCddLCB7Y3dkOiBmaXh0dXJlfSksXG4gIF0pO1xuXG4gIGNvbnN0IHNlcnZlciA9IHNwYXduKCdmdXNpb24nLCBbJ3N0YXJ0JywgYC0tcG9ydD0ke3BvcnR9YF0sIHtcbiAgICBzdGRpbzogJ2luaGVyaXQnLFxuICAgIGN3ZDogZml4dHVyZSxcbiAgfSk7XG5cbiAgY29uc3QgYnJvd3NlciA9IGF3YWl0IHB1cHBldGVlci5sYXVuY2goe1xuICAgIGFyZ3M6IFsnLS1uby1zYW5kYm94JywgJy0tZGlzYWJsZS1zZXR1aWQtc2FuZGJveCddLFxuICB9KTtcblxuICBjb25zdCBwYWdlID0gYXdhaXQgYnJvd3Nlci5uZXdQYWdlKCk7XG4gIGF3YWl0IHVudGlsUmVhZHkocGFnZSwgcG9ydCk7XG5cbiAgZXhwZWN0KChhd2FpdCBnZXRDb21wdXRlZFN0eWxlKHBhZ2UsICcjc3R5bGVkJykpLmNvbG9yKS50b0VxdWFsKFxuICAgICdyZ2IoMjU1LCAwLCAwKSdcbiAgKTtcbiAgY29uc3Qgc3R5bGVzID0gYXdhaXQgZ2V0U3R5bGVzKHBhZ2UpO1xuXG4gIGV4cGVjdChzdHlsZXMuZXZlcnkoKHN0eWxlKSA9PiBzdHlsZS5zdGFydHNXaXRoKCcuX19hdG9taWNfcHJlZml4X18nKSkpLnRvQmUoXG4gICAgdHJ1ZVxuICApO1xuXG4gIHNlcnZlci5raWxsKCk7XG4gIGJyb3dzZXIuY2xvc2UoKTtcbn0sIDEwMDAwMCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxPQUFPQSxhQUFhLE1BQU0sZUFBZTtBQUN6QyxTQUFRQyxTQUFTLFFBQU8sTUFBTTtBQUM5QixPQUFPQyxPQUFPLE1BQU0sVUFBVTtBQUM5QixPQUFPQyxTQUFTLE1BQU0sV0FBVztBQUNqQyxTQUFRQyxVQUFVLEVBQUVDLGdCQUFnQixFQUFFQyxTQUFTLFFBQU8sVUFBVTtBQUVoRSxNQUFNQyxRQUFRLEdBQUdOLFNBQVMsQ0FBQ0QsYUFBYSxDQUFDTyxRQUFRLENBQUM7QUFDbEQsTUFBTUMsS0FBSyxHQUFHUixhQUFhLENBQUNRLEtBQUs7QUFFakMsTUFBTUMsT0FBTyxHQUFHQyxTQUFTO0FBRXpCQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQVk7RUFDL0IsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUMvQlosT0FBTyxFQUFFLEVBQ1RLLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUFDUSxHQUFHLEVBQUVOO0VBQU8sQ0FBQyxDQUFDLENBQzlDLENBQUM7RUFFRixNQUFNTyxNQUFNLEdBQUdSLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUcsVUFBU0ksSUFBSyxFQUFDLENBQUMsRUFBRTtJQUMxREssS0FBSyxFQUFFLFNBQVM7SUFDaEJGLEdBQUcsRUFBRU47RUFDUCxDQUFDLENBQUM7RUFFRixNQUFNUyxPQUFPLEdBQUcsTUFBTWYsU0FBUyxDQUFDZ0IsTUFBTSxDQUFDO0lBQ3JDQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsMEJBQTBCO0VBQ25ELENBQUMsQ0FBQztFQUVGLE1BQU1DLElBQUksR0FBRyxNQUFNSCxPQUFPLENBQUNJLE9BQU8sRUFBRTtFQUNwQyxNQUFNbEIsVUFBVSxDQUFDaUIsSUFBSSxFQUFFVCxJQUFJLENBQUM7RUFFNUJXLE1BQU0sQ0FBQyxDQUFDLE1BQU1sQixnQkFBZ0IsQ0FBQ2dCLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRUcsS0FBSyxDQUFDLENBQUNDLE9BQU8sQ0FDN0QsZ0JBQWdCLENBQ2pCO0VBQ0QsTUFBTUMsTUFBTSxHQUFHLE1BQU1wQixTQUFTLENBQUNlLElBQUksQ0FBQztFQUVwQ0UsTUFBTSxDQUFDRyxNQUFNLENBQUNDLEtBQUssQ0FBRUMsS0FBSyxJQUFLQSxLQUFLLENBQUNDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUMxRSxJQUFJLENBQ0w7RUFFRGQsTUFBTSxDQUFDZSxJQUFJLEVBQUU7RUFDYmIsT0FBTyxDQUFDYyxLQUFLLEVBQUU7QUFDakIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyJ9