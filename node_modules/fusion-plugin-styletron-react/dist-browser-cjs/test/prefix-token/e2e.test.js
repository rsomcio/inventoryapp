"use strict";

var _child_process = _interopRequireDefault(require("child_process"));
var _util = require("util");
var _getPort = _interopRequireDefault(require("get-port"));
var _puppeteer = _interopRequireDefault(require("puppeteer"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @jest-environment node
 */

/* eslint-env jest, node, browser */

const execFile = (0, _util.promisify)(_child_process.default.execFile);
const spawn = _child_process.default.spawn;
const fixture = __dirname;
test('token prefix', async () => {
  const [port] = await Promise.all([(0, _getPort.default)(), execFile('fusion', ['build'], {
    cwd: fixture
  })]);
  const server = spawn('fusion', ['start', `--port=${port}`], {
    stdio: 'inherit',
    cwd: fixture
  });
  const browser = await _puppeteer.default.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const page = await browser.newPage();
  await (0, _utils.untilReady)(page, port);
  expect((await (0, _utils.getComputedStyle)(page, '#styled')).color).toEqual('rgb(255, 0, 0)');
  const styles = await (0, _utils.getStyles)(page);
  expect(styles.every(style => style.startsWith('.__atomic_prefix__'))).toBe(true);
  server.kill();
  browser.close();
}, 100000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjRmlsZSIsInByb21pc2lmeSIsImNoaWxkX3Byb2Nlc3MiLCJzcGF3biIsImZpeHR1cmUiLCJfX2Rpcm5hbWUiLCJ0ZXN0IiwicG9ydCIsIlByb21pc2UiLCJhbGwiLCJnZXRQb3J0IiwiY3dkIiwic2VydmVyIiwic3RkaW8iLCJicm93c2VyIiwicHVwcGV0ZWVyIiwibGF1bmNoIiwiYXJncyIsInBhZ2UiLCJuZXdQYWdlIiwidW50aWxSZWFkeSIsImV4cGVjdCIsImdldENvbXB1dGVkU3R5bGUiLCJjb2xvciIsInRvRXF1YWwiLCJzdHlsZXMiLCJnZXRTdHlsZXMiLCJldmVyeSIsInN0eWxlIiwic3RhcnRzV2l0aCIsInRvQmUiLCJraWxsIiwiY2xvc2UiXSwic291cmNlcyI6WyJzcmMvdGVzdC9wcmVmaXgtdG9rZW4vZTJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBub2RlXG4gKi9cblxuLyogZXNsaW50LWVudiBqZXN0LCBub2RlLCBicm93c2VyICovXG5cbmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHtwcm9taXNpZnl9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IGdldFBvcnQgZnJvbSAnZ2V0LXBvcnQnO1xuaW1wb3J0IHB1cHBldGVlciBmcm9tICdwdXBwZXRlZXInO1xuaW1wb3J0IHt1bnRpbFJlYWR5LCBnZXRDb21wdXRlZFN0eWxlLCBnZXRTdHlsZXN9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgZXhlY0ZpbGUgPSBwcm9taXNpZnkoY2hpbGRfcHJvY2Vzcy5leGVjRmlsZSk7XG5jb25zdCBzcGF3biA9IGNoaWxkX3Byb2Nlc3Muc3Bhd247XG5cbmNvbnN0IGZpeHR1cmUgPSBfX2Rpcm5hbWU7XG5cbnRlc3QoJ3Rva2VuIHByZWZpeCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgW3BvcnRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGdldFBvcnQoKSxcbiAgICBleGVjRmlsZSgnZnVzaW9uJywgWydidWlsZCddLCB7Y3dkOiBmaXh0dXJlfSksXG4gIF0pO1xuXG4gIGNvbnN0IHNlcnZlciA9IHNwYXduKCdmdXNpb24nLCBbJ3N0YXJ0JywgYC0tcG9ydD0ke3BvcnR9YF0sIHtcbiAgICBzdGRpbzogJ2luaGVyaXQnLFxuICAgIGN3ZDogZml4dHVyZSxcbiAgfSk7XG5cbiAgY29uc3QgYnJvd3NlciA9IGF3YWl0IHB1cHBldGVlci5sYXVuY2goe1xuICAgIGFyZ3M6IFsnLS1uby1zYW5kYm94JywgJy0tZGlzYWJsZS1zZXR1aWQtc2FuZGJveCddLFxuICB9KTtcblxuICBjb25zdCBwYWdlID0gYXdhaXQgYnJvd3Nlci5uZXdQYWdlKCk7XG4gIGF3YWl0IHVudGlsUmVhZHkocGFnZSwgcG9ydCk7XG5cbiAgZXhwZWN0KChhd2FpdCBnZXRDb21wdXRlZFN0eWxlKHBhZ2UsICcjc3R5bGVkJykpLmNvbG9yKS50b0VxdWFsKFxuICAgICdyZ2IoMjU1LCAwLCAwKSdcbiAgKTtcbiAgY29uc3Qgc3R5bGVzID0gYXdhaXQgZ2V0U3R5bGVzKHBhZ2UpO1xuXG4gIGV4cGVjdChzdHlsZXMuZXZlcnkoKHN0eWxlKSA9PiBzdHlsZS5zdGFydHNXaXRoKCcuX19hdG9taWNfcHJlZml4X18nKSkpLnRvQmUoXG4gICAgdHJ1ZVxuICApO1xuXG4gIHNlcnZlci5raWxsKCk7XG4gIGJyb3dzZXIuY2xvc2UoKTtcbn0sIDEwMDAwMCk7XG4iXSwibWFwcGluZ3MiOiI7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFpRTtBQVZqRTtBQUNBO0FBQ0E7O0FBRUE7O0FBUUEsTUFBTUEsUUFBUSxHQUFHLElBQUFDLGVBQVMsRUFBQ0Msc0JBQWEsQ0FBQ0YsUUFBUSxDQUFDO0FBQ2xELE1BQU1HLEtBQUssR0FBR0Qsc0JBQWEsQ0FBQ0MsS0FBSztBQUVqQyxNQUFNQyxPQUFPLEdBQUdDLFNBQVM7QUFFekJDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBWTtFQUMvQixNQUFNLENBQUNDLElBQUksQ0FBQyxHQUFHLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQy9CLElBQUFDLGdCQUFPLEdBQUUsRUFDVFYsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQUNXLEdBQUcsRUFBRVA7RUFBTyxDQUFDLENBQUMsQ0FDOUMsQ0FBQztFQUVGLE1BQU1RLE1BQU0sR0FBR1QsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRyxVQUFTSSxJQUFLLEVBQUMsQ0FBQyxFQUFFO0lBQzFETSxLQUFLLEVBQUUsU0FBUztJQUNoQkYsR0FBRyxFQUFFUDtFQUNQLENBQUMsQ0FBQztFQUVGLE1BQU1VLE9BQU8sR0FBRyxNQUFNQyxrQkFBUyxDQUFDQyxNQUFNLENBQUM7SUFDckNDLElBQUksRUFBRSxDQUFDLGNBQWMsRUFBRSwwQkFBMEI7RUFDbkQsQ0FBQyxDQUFDO0VBRUYsTUFBTUMsSUFBSSxHQUFHLE1BQU1KLE9BQU8sQ0FBQ0ssT0FBTyxFQUFFO0VBQ3BDLE1BQU0sSUFBQUMsaUJBQVUsRUFBQ0YsSUFBSSxFQUFFWCxJQUFJLENBQUM7RUFFNUJjLE1BQU0sQ0FBQyxDQUFDLE1BQU0sSUFBQUMsdUJBQWdCLEVBQUNKLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRUssS0FBSyxDQUFDLENBQUNDLE9BQU8sQ0FDN0QsZ0JBQWdCLENBQ2pCO0VBQ0QsTUFBTUMsTUFBTSxHQUFHLE1BQU0sSUFBQUMsZ0JBQVMsRUFBQ1IsSUFBSSxDQUFDO0VBRXBDRyxNQUFNLENBQUNJLE1BQU0sQ0FBQ0UsS0FBSyxDQUFFQyxLQUFLLElBQUtBLEtBQUssQ0FBQ0MsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQzFFLElBQUksQ0FDTDtFQUVEbEIsTUFBTSxDQUFDbUIsSUFBSSxFQUFFO0VBQ2JqQixPQUFPLENBQUNrQixLQUFLLEVBQUU7QUFDakIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyJ9