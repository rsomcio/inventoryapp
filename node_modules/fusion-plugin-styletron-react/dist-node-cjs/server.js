"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _react = _interopRequireDefault(require("react"));
var _fusionCore = require("fusion-core");
var _styletronReact = require("styletron-react");
var _constants = require("./constants");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-env node */

let workerPath;
let wasmPath;
if (process.env.NODE_ENV !== "production" && true) {
  const base = _path.default.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = _path.default.resolve(base, 'worker.js');
  wasmPath = _path.default.resolve(base, 'mappings.wasm');
}
function getPlugin(getStyletronEngine) {
  const plugin = true && (0, _fusionCore.createPlugin)({
    deps: {
      prefix: _constants.AtomicPrefixToken.optional
    },
    middleware: ({
      prefix
    }) => (ctx, next) => {
      if (process.env.NODE_ENV !== "production") {
        if (ctx.url === _constants.workerRoute) {
          ctx.body = _fs.default.createReadStream(workerPath);
          return next();
        }
        if (ctx.url === _constants.wasmRoute) {
          ctx.body = _fs.default.createReadStream(wasmPath);
          return next();
        }
      }
      if (ctx.element) {
        const config = prefix === void 0 ? void 0 : {
          prefix
        };
        const engine = getStyletronEngine(config);
        ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(_styletronReact.Provider, {
          value: engine,
          children: ctx.element
        });
        return next().then(() => {
          const stylesForHead = engine.getStylesheetsHtml();
          ctx.template.head.push((0, _fusionCore.dangerouslySetHTML)(stylesForHead));
        });
      } else {
        return next();
      }
    }
  });
  return plugin;
}
var _default = getPlugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3b3JrZXJQYXRoIiwid2FzbVBhdGgiLCJiYXNlIiwicGF0aCIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsImdldFBsdWdpbiIsImdldFN0eWxldHJvbkVuZ2luZSIsInBsdWdpbiIsImNyZWF0ZVBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJBdG9taWNQcmVmaXhUb2tlbiIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJ1cmwiLCJ3b3JrZXJSb3V0ZSIsImJvZHkiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJ3YXNtUm91dGUiLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIiwiZGFuZ2Vyb3VzbHlTZXRIVE1MIl0sInNvdXJjZXMiOlsic3JjL3NlcnZlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW4sIGRhbmdlcm91c2x5U2V0SFRNTH0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5pbXBvcnQge1Byb3ZpZGVyIGFzIFN0eWxldHJvblByb3ZpZGVyfSBmcm9tICdzdHlsZXRyb24tcmVhY3QnO1xuXG5pbXBvcnQge3dvcmtlclJvdXRlLCB3YXNtUm91dGUsIEF0b21pY1ByZWZpeFRva2VufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmxldCB3b3JrZXJQYXRoO1xubGV0IHdhc21QYXRoO1xuXG5pZiAoX19ERVZfXyAmJiBfX05PREVfXykge1xuICBjb25zdCBiYXNlID0gcGF0aC5kaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgnY3NzLXRvLWpzLXNvdXJjZW1hcC13b3JrZXInKSk7XG4gIHdvcmtlclBhdGggPSBwYXRoLnJlc29sdmUoYmFzZSwgJ3dvcmtlci5qcycpO1xuICB3YXNtUGF0aCA9IHBhdGgucmVzb2x2ZShiYXNlLCAnbWFwcGluZ3Mud2FzbScpO1xufVxuXG5mdW5jdGlvbiBnZXRQbHVnaW4oZ2V0U3R5bGV0cm9uRW5naW5lOiBhbnkpOiBhbnkge1xuICBjb25zdCBwbHVnaW4gPVxuICAgIF9fTk9ERV9fICYmXG4gICAgY3JlYXRlUGx1Z2luKHtcbiAgICAgIGRlcHM6IHtcbiAgICAgICAgcHJlZml4OiBBdG9taWNQcmVmaXhUb2tlbi5vcHRpb25hbCxcbiAgICAgIH0sXG4gICAgICBtaWRkbGV3YXJlOlxuICAgICAgICAoe3ByZWZpeH0pID0+XG4gICAgICAgIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgaWYgKGN0eC51cmwgPT09IHdvcmtlclJvdXRlKSB7XG4gICAgICAgICAgICAgIGN0eC5ib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh3b3JrZXJQYXRoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdHgudXJsID09PSB3YXNtUm91dGUpIHtcbiAgICAgICAgICAgICAgY3R4LmJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHdhc21QYXRoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHByZWZpeCA9PT0gdm9pZCAwID8gdm9pZCAwIDoge3ByZWZpeH07XG4gICAgICAgICAgICBjb25zdCBlbmdpbmUgPSBnZXRTdHlsZXRyb25FbmdpbmUoY29uZmlnKTtcblxuICAgICAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgICAgIDxTdHlsZXRyb25Qcm92aWRlciB2YWx1ZT17ZW5naW5lfT5cbiAgICAgICAgICAgICAgICB7Y3R4LmVsZW1lbnR9XG4gICAgICAgICAgICAgIDwvU3R5bGV0cm9uUHJvdmlkZXI+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdHlsZXNGb3JIZWFkID0gZW5naW5lLmdldFN0eWxlc2hlZXRzSHRtbCgpO1xuICAgICAgICAgICAgICBjdHgudGVtcGxhdGUuaGVhZC5wdXNoKGRhbmdlcm91c2x5U2V0SFRNTChzdHlsZXNGb3JIZWFkKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gIHJldHVybiBwbHVnaW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFBsdWdpbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQXNFO0FBQUE7QUFqQnRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFZQSxJQUFJQSxVQUFVO0FBQ2QsSUFBSUMsUUFBUTtBQUVaLElBQUksNkNBQW1CLEVBQUU7RUFDdkIsTUFBTUMsSUFBSSxHQUFHQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztFQUN4RU4sVUFBVSxHQUFHRyxhQUFJLENBQUNHLE9BQU8sQ0FBQ0osSUFBSSxFQUFFLFdBQVcsQ0FBQztFQUM1Q0QsUUFBUSxHQUFHRSxhQUFJLENBQUNHLE9BQU8sQ0FBQ0osSUFBSSxFQUFFLGVBQWUsQ0FBQztBQUNoRDtBQUVBLFNBQVNLLFNBQVMsQ0FBQ0Msa0JBQXVCLEVBQU87RUFDL0MsTUFBTUMsTUFBTSxHQUNWLFFBQ0EsSUFBQUMsd0JBQVksRUFBQztJQUNYQyxJQUFJLEVBQUU7TUFDSkMsTUFBTSxFQUFFQyw0QkFBaUIsQ0FBQ0M7SUFDNUIsQ0FBQztJQUNEQyxVQUFVLEVBQ1IsQ0FBQztNQUFDSDtJQUFNLENBQUMsS0FDVCxDQUFDSSxHQUFHLEVBQUVDLElBQUksS0FBSztNQUNiLDJDQUFhO1FBQ1gsSUFBSUQsR0FBRyxDQUFDRSxHQUFHLEtBQUtDLHNCQUFXLEVBQUU7VUFDM0JILEdBQUcsQ0FBQ0ksSUFBSSxHQUFHQyxXQUFFLENBQUNDLGdCQUFnQixDQUFDdEIsVUFBVSxDQUFDO1VBQzFDLE9BQU9pQixJQUFJLEVBQUU7UUFDZjtRQUNBLElBQUlELEdBQUcsQ0FBQ0UsR0FBRyxLQUFLSyxvQkFBUyxFQUFFO1VBQ3pCUCxHQUFHLENBQUNJLElBQUksR0FBR0MsV0FBRSxDQUFDQyxnQkFBZ0IsQ0FBQ3JCLFFBQVEsQ0FBQztVQUN4QyxPQUFPZ0IsSUFBSSxFQUFFO1FBQ2Y7TUFDRjtNQUVBLElBQUlELEdBQUcsQ0FBQ1EsT0FBTyxFQUFFO1FBQ2YsTUFBTUMsTUFBTSxHQUFHYixNQUFNLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUc7VUFBQ0E7UUFBTSxDQUFDO1FBQ3BELE1BQU1jLE1BQU0sR0FBR2xCLGtCQUFrQixDQUFDaUIsTUFBTSxDQUFDO1FBRXpDVCxHQUFHLENBQUNRLE9BQU8sZ0JBQ1QscUJBQUMsd0JBQWlCO1VBQUMsS0FBSyxFQUFFRSxNQUFPO1VBQUEsVUFDOUJWLEdBQUcsQ0FBQ1E7UUFBTyxFQUVmO1FBRUQsT0FBT1AsSUFBSSxFQUFFLENBQUNVLElBQUksQ0FBQyxNQUFNO1VBQ3ZCLE1BQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBa0IsRUFBRTtVQUNqRGIsR0FBRyxDQUFDYyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsSUFBSSxDQUFDLElBQUFDLDhCQUFrQixFQUFDTCxhQUFhLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUM7TUFDSixDQUFDLE1BQU07UUFDTCxPQUFPWCxJQUFJLEVBQUU7TUFDZjtJQUNGO0VBQ0osQ0FBQyxDQUFDO0VBQ0osT0FBT1IsTUFBTTtBQUNmO0FBQUMsZUFFY0YsU0FBUztBQUFBIn0=