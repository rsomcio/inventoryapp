"use strict";

var _child_process = _interopRequireDefault(require("child_process"));
var _util = require("util");
var _getPort = _interopRequireDefault(require("get-port"));
var _puppeteer = _interopRequireDefault(require("puppeteer"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @jest-environment node
 */

/* eslint-env jest, node, browser */

const execFile = (0, _util.promisify)(_child_process.default.execFile);
const spawn = _child_process.default.spawn;
const fixture = __dirname;
test('basic rendering and hydration works', async () => {
  const [port] = await Promise.all([(0, _getPort.default)(), execFile('fusion', ['build'], {
    cwd: fixture
  })]);
  const server = spawn('fusion', ['start', `--port=${port}`], {
    stdio: 'inherit',
    cwd: fixture
  });
  const browser = await _puppeteer.default.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const page = await browser.newPage();
  await (0, _utils.untilReady)(page, port);
  await page.goto(`http://localhost:${port}`);
  expect((await (0, _utils.getComputedStyle)(page, '#styled')).color).toEqual('rgb(255, 0, 0)');
  expect((await (0, _utils.getStyles)(page)).length).toBe(1);
  await page.click('#toggle');
  expect((await (0, _utils.getComputedStyle)(page, '#styled')).color).toEqual('rgb(0, 0, 255)');
  expect((await (0, _utils.getStyles)(page)).length).toBe(2);
  await page.click('#toggle');
  expect((await (0, _utils.getComputedStyle)(page, '#styled')).color).toEqual('rgb(255, 0, 0)');
  expect((await (0, _utils.getStyles)(page)).length).toBe(2);
  server.kill();
  browser.close();
}, 100000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjRmlsZSIsInByb21pc2lmeSIsImNoaWxkX3Byb2Nlc3MiLCJzcGF3biIsImZpeHR1cmUiLCJfX2Rpcm5hbWUiLCJ0ZXN0IiwicG9ydCIsIlByb21pc2UiLCJhbGwiLCJnZXRQb3J0IiwiY3dkIiwic2VydmVyIiwic3RkaW8iLCJicm93c2VyIiwicHVwcGV0ZWVyIiwibGF1bmNoIiwiYXJncyIsInBhZ2UiLCJuZXdQYWdlIiwidW50aWxSZWFkeSIsImdvdG8iLCJleHBlY3QiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29sb3IiLCJ0b0VxdWFsIiwiZ2V0U3R5bGVzIiwibGVuZ3RoIiwidG9CZSIsImNsaWNrIiwia2lsbCIsImNsb3NlIl0sInNvdXJjZXMiOlsic3JjL3Rlc3QvYmFzaWMvZTJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBub2RlXG4gKi9cblxuLyogZXNsaW50LWVudiBqZXN0LCBub2RlLCBicm93c2VyICovXG5cbmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHtwcm9taXNpZnl9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IGdldFBvcnQgZnJvbSAnZ2V0LXBvcnQnO1xuaW1wb3J0IHB1cHBldGVlciBmcm9tICdwdXBwZXRlZXInO1xuXG5pbXBvcnQge3VudGlsUmVhZHksIGdldENvbXB1dGVkU3R5bGUsIGdldFN0eWxlc30gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBleGVjRmlsZSA9IHByb21pc2lmeShjaGlsZF9wcm9jZXNzLmV4ZWNGaWxlKTtcbmNvbnN0IHNwYXduID0gY2hpbGRfcHJvY2Vzcy5zcGF3bjtcblxuY29uc3QgZml4dHVyZSA9IF9fZGlybmFtZTtcblxudGVzdCgnYmFzaWMgcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24gd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IFtwb3J0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBnZXRQb3J0KCksXG4gICAgZXhlY0ZpbGUoJ2Z1c2lvbicsIFsnYnVpbGQnXSwge2N3ZDogZml4dHVyZX0pLFxuICBdKTtcblxuICBjb25zdCBzZXJ2ZXIgPSBzcGF3bignZnVzaW9uJywgWydzdGFydCcsIGAtLXBvcnQ9JHtwb3J0fWBdLCB7XG4gICAgc3RkaW86ICdpbmhlcml0JyxcbiAgICBjd2Q6IGZpeHR1cmUsXG4gIH0pO1xuXG4gIGNvbnN0IGJyb3dzZXIgPSBhd2FpdCBwdXBwZXRlZXIubGF1bmNoKHtcbiAgICBhcmdzOiBbJy0tbm8tc2FuZGJveCcsICctLWRpc2FibGUtc2V0dWlkLXNhbmRib3gnXSxcbiAgfSk7XG5cbiAgY29uc3QgcGFnZSA9IGF3YWl0IGJyb3dzZXIubmV3UGFnZSgpO1xuICBhd2FpdCB1bnRpbFJlYWR5KHBhZ2UsIHBvcnQpO1xuICBhd2FpdCBwYWdlLmdvdG8oYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApO1xuXG4gIGV4cGVjdCgoYXdhaXQgZ2V0Q29tcHV0ZWRTdHlsZShwYWdlLCAnI3N0eWxlZCcpKS5jb2xvcikudG9FcXVhbChcbiAgICAncmdiKDI1NSwgMCwgMCknXG4gICk7XG4gIGV4cGVjdCgoYXdhaXQgZ2V0U3R5bGVzKHBhZ2UpKS5sZW5ndGgpLnRvQmUoMSk7XG5cbiAgYXdhaXQgcGFnZS5jbGljaygnI3RvZ2dsZScpO1xuICBleHBlY3QoKGF3YWl0IGdldENvbXB1dGVkU3R5bGUocGFnZSwgJyNzdHlsZWQnKSkuY29sb3IpLnRvRXF1YWwoXG4gICAgJ3JnYigwLCAwLCAyNTUpJ1xuICApO1xuICBleHBlY3QoKGF3YWl0IGdldFN0eWxlcyhwYWdlKSkubGVuZ3RoKS50b0JlKDIpO1xuXG4gIGF3YWl0IHBhZ2UuY2xpY2soJyN0b2dnbGUnKTtcbiAgZXhwZWN0KChhd2FpdCBnZXRDb21wdXRlZFN0eWxlKHBhZ2UsICcjc3R5bGVkJykpLmNvbG9yKS50b0VxdWFsKFxuICAgICdyZ2IoMjU1LCAwLCAwKSdcbiAgKTtcbiAgZXhwZWN0KChhd2FpdCBnZXRTdHlsZXMocGFnZSkpLmxlbmd0aCkudG9CZSgyKTtcblxuICBzZXJ2ZXIua2lsbCgpO1xuICBicm93c2VyLmNsb3NlKCk7XG59LCAxMDAwMDApO1xuIl0sIm1hcHBpbmdzIjoiOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBaUU7QUFYakU7QUFDQTtBQUNBOztBQUVBOztBQVNBLE1BQU1BLFFBQVEsR0FBRyxJQUFBQyxlQUFTLEVBQUNDLHNCQUFhLENBQUNGLFFBQVEsQ0FBQztBQUNsRCxNQUFNRyxLQUFLLEdBQUdELHNCQUFhLENBQUNDLEtBQUs7QUFFakMsTUFBTUMsT0FBTyxHQUFHQyxTQUFTO0FBRXpCQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBWTtFQUN0RCxNQUFNLENBQUNDLElBQUksQ0FBQyxHQUFHLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQy9CLElBQUFDLGdCQUFPLEdBQUUsRUFDVFYsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQUNXLEdBQUcsRUFBRVA7RUFBTyxDQUFDLENBQUMsQ0FDOUMsQ0FBQztFQUVGLE1BQU1RLE1BQU0sR0FBR1QsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRyxVQUFTSSxJQUFLLEVBQUMsQ0FBQyxFQUFFO0lBQzFETSxLQUFLLEVBQUUsU0FBUztJQUNoQkYsR0FBRyxFQUFFUDtFQUNQLENBQUMsQ0FBQztFQUVGLE1BQU1VLE9BQU8sR0FBRyxNQUFNQyxrQkFBUyxDQUFDQyxNQUFNLENBQUM7SUFDckNDLElBQUksRUFBRSxDQUFDLGNBQWMsRUFBRSwwQkFBMEI7RUFDbkQsQ0FBQyxDQUFDO0VBRUYsTUFBTUMsSUFBSSxHQUFHLE1BQU1KLE9BQU8sQ0FBQ0ssT0FBTyxFQUFFO0VBQ3BDLE1BQU0sSUFBQUMsaUJBQVUsRUFBQ0YsSUFBSSxFQUFFWCxJQUFJLENBQUM7RUFDNUIsTUFBTVcsSUFBSSxDQUFDRyxJQUFJLENBQUUsb0JBQW1CZCxJQUFLLEVBQUMsQ0FBQztFQUUzQ2UsTUFBTSxDQUFDLENBQUMsTUFBTSxJQUFBQyx1QkFBZ0IsRUFBQ0wsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFTSxLQUFLLENBQUMsQ0FBQ0MsT0FBTyxDQUM3RCxnQkFBZ0IsQ0FDakI7RUFDREgsTUFBTSxDQUFDLENBQUMsTUFBTSxJQUFBSSxnQkFBUyxFQUFDUixJQUFJLENBQUMsRUFBRVMsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFFOUMsTUFBTVYsSUFBSSxDQUFDVyxLQUFLLENBQUMsU0FBUyxDQUFDO0VBQzNCUCxNQUFNLENBQUMsQ0FBQyxNQUFNLElBQUFDLHVCQUFnQixFQUFDTCxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUVNLEtBQUssQ0FBQyxDQUFDQyxPQUFPLENBQzdELGdCQUFnQixDQUNqQjtFQUNESCxNQUFNLENBQUMsQ0FBQyxNQUFNLElBQUFJLGdCQUFTLEVBQUNSLElBQUksQ0FBQyxFQUFFUyxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUU5QyxNQUFNVixJQUFJLENBQUNXLEtBQUssQ0FBQyxTQUFTLENBQUM7RUFDM0JQLE1BQU0sQ0FBQyxDQUFDLE1BQU0sSUFBQUMsdUJBQWdCLEVBQUNMLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRU0sS0FBSyxDQUFDLENBQUNDLE9BQU8sQ0FDN0QsZ0JBQWdCLENBQ2pCO0VBQ0RILE1BQU0sQ0FBQyxDQUFDLE1BQU0sSUFBQUksZ0JBQVMsRUFBQ1IsSUFBSSxDQUFDLEVBQUVTLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBRTlDaEIsTUFBTSxDQUFDa0IsSUFBSSxFQUFFO0VBQ2JoQixPQUFPLENBQUNpQixLQUFLLEVBQUU7QUFDakIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyJ9