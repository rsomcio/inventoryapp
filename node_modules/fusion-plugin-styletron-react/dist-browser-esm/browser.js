/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-env browser */
/* global module */

import React from 'react';
import { createPlugin } from 'fusion-core';
import { Provider as StyletronProvider, DebugEngine } from 'styletron-react';
import { workerRoute, wasmRoute, AtomicPrefixToken } from './constants';
import { jsx as _jsx } from "react/jsx-runtime";
let debugEngine;
let engine;
function getPlugin(getStyletronEngine) {
  const plugin = true && createPlugin({
    deps: {
      prefix: AtomicPrefixToken.optional
    },
    middleware: ({
      prefix
    }) => (ctx, next) => {
      if (ctx.element) {
        if (!engine) {
          const config = {
            hydrate: document.getElementsByClassName('_styletron_hydrate_')
          };
          if (prefix !== void 0) {
            config.prefix = prefix;
          }
          engine = getStyletronEngine(config);
        }
        if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
          const worker = new Worker(workerRoute);
          worker.postMessage({
            id: 'init_wasm',
            url: wasmRoute
          });
          worker.postMessage({
            id: 'set_render_interval',
            interval: 180
          });
          if (module.hot) {
            module.hot.addStatusHandler(status => {
              if (status === 'dispose') {
                worker.postMessage({
                  id: 'invalidate'
                });
              }
            });
          }
          debugEngine = new DebugEngine(worker);
        }
        ctx.element = /*#__PURE__*/_jsx(StyletronProvider, {
          value: engine,
          debug: debugEngine,
          debugAfterHydration: Boolean(debugEngine),
          children: ctx.element
        });
      }
      return next();
    }
  });
  return plugin;
}
export default getPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZVBsdWdpbiIsIlByb3ZpZGVyIiwiU3R5bGV0cm9uUHJvdmlkZXIiLCJEZWJ1Z0VuZ2luZSIsIndvcmtlclJvdXRlIiwid2FzbVJvdXRlIiwiQXRvbWljUHJlZml4VG9rZW4iLCJkZWJ1Z0VuZ2luZSIsImVuZ2luZSIsImdldFBsdWdpbiIsImdldFN0eWxldHJvbkVuZ2luZSIsInBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJvcHRpb25hbCIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZWxlbWVudCIsImNvbmZpZyIsImh5ZHJhdGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJXb3JrZXIiLCJ3b3JrZXIiLCJwb3N0TWVzc2FnZSIsImlkIiwidXJsIiwiaW50ZXJ2YWwiLCJtb2R1bGUiLCJob3QiLCJhZGRTdGF0dXNIYW5kbGVyIiwic3RhdHVzIiwiQm9vbGVhbiJdLCJzb3VyY2VzIjpbInNyYy9icm93c2VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuLyogZ2xvYmFsIG1vZHVsZSAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuaW1wb3J0IHtQcm92aWRlciBhcyBTdHlsZXRyb25Qcm92aWRlciwgRGVidWdFbmdpbmV9IGZyb20gJ3N0eWxldHJvbi1yZWFjdCc7XG5cbmltcG9ydCB7d29ya2VyUm91dGUsIHdhc21Sb3V0ZSwgQXRvbWljUHJlZml4VG9rZW59IGZyb20gJy4vY29uc3RhbnRzJztcblxubGV0IGRlYnVnRW5naW5lO1xubGV0IGVuZ2luZTtcblxuZnVuY3Rpb24gZ2V0UGx1Z2luKGdldFN0eWxldHJvbkVuZ2luZTogYW55KTogYW55IHtcbiAgY29uc3QgcGx1Z2luID1cbiAgICBfX0JST1dTRVJfXyAmJlxuICAgIGNyZWF0ZVBsdWdpbih7XG4gICAgICBkZXBzOiB7XG4gICAgICAgIHByZWZpeDogQXRvbWljUHJlZml4VG9rZW4ub3B0aW9uYWwsXG4gICAgICB9LFxuICAgICAgbWlkZGxld2FyZTpcbiAgICAgICAgKHtwcmVmaXh9KSA9PlxuICAgICAgICAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgICAgaWYgKGN0eC5lbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIWVuZ2luZSkge1xuICAgICAgICAgICAgICBjb25zdCBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBoeWRyYXRlOiBIVE1MQ29sbGVjdGlvbjtcbiAgICAgICAgICAgICAgICBwcmVmaXg/OiBzdHJpbmc7XG4gICAgICAgICAgICAgIH0gPSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0ZTogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnX3N0eWxldHJvbl9oeWRyYXRlXycpLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAocHJlZml4ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBjb25maWcucHJlZml4ID0gcHJlZml4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVuZ2luZSA9IGdldFN0eWxldHJvbkVuZ2luZShjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgIWRlYnVnRW5naW5lICYmIHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyUm91dGUpO1xuICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIGlkOiAnaW5pdF93YXNtJyxcbiAgICAgICAgICAgICAgICB1cmw6IHdhc21Sb3V0ZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6ICdzZXRfcmVuZGVyX2ludGVydmFsJyxcbiAgICAgICAgICAgICAgICBpbnRlcnZhbDogMTgwLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKChtb2R1bGUgYXMgYW55KS5ob3QpIHtcbiAgICAgICAgICAgICAgICAobW9kdWxlIGFzIGFueSkuaG90LmFkZFN0YXR1c0hhbmRsZXIoKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2Rpc3Bvc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7aWQ6ICdpbnZhbGlkYXRlJ30pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlYnVnRW5naW5lID0gbmV3IERlYnVnRW5naW5lKHdvcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICAgICAgPFN0eWxldHJvblByb3ZpZGVyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VuZ2luZX1cbiAgICAgICAgICAgICAgICBkZWJ1Zz17ZGVidWdFbmdpbmV9XG4gICAgICAgICAgICAgICAgZGVidWdBZnRlckh5ZHJhdGlvbj17Qm9vbGVhbihkZWJ1Z0VuZ2luZSl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3R4LmVsZW1lbnR9XG4gICAgICAgICAgICAgIDwvU3R5bGV0cm9uUHJvdmlkZXI+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gIHJldHVybiBwbHVnaW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFBsdWdpbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFDekIsU0FBUUMsWUFBWSxRQUFPLGFBQWE7QUFFeEMsU0FBUUMsUUFBUSxJQUFJQyxpQkFBaUIsRUFBRUMsV0FBVyxRQUFPLGlCQUFpQjtBQUUxRSxTQUFRQyxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsaUJBQWlCLFFBQU8sYUFBYTtBQUFDO0FBRXRFLElBQUlDLFdBQVc7QUFDZixJQUFJQyxNQUFNO0FBRVYsU0FBU0MsU0FBUyxDQUFDQyxrQkFBdUIsRUFBTztFQUMvQyxNQUFNQyxNQUFNLEdBQ1YsUUFDQVgsWUFBWSxDQUFDO0lBQ1hZLElBQUksRUFBRTtNQUNKQyxNQUFNLEVBQUVQLGlCQUFpQixDQUFDUTtJQUM1QixDQUFDO0lBQ0RDLFVBQVUsRUFDUixDQUFDO01BQUNGO0lBQU0sQ0FBQyxLQUNULENBQUNHLEdBQUcsRUFBRUMsSUFBSSxLQUFLO01BQ2IsSUFBSUQsR0FBRyxDQUFDRSxPQUFPLEVBQUU7UUFDZixJQUFJLENBQUNWLE1BQU0sRUFBRTtVQUNYLE1BQU1XLE1BR0wsR0FBRztZQUNGQyxPQUFPLEVBQUVDLFFBQVEsQ0FBQ0Msc0JBQXNCLENBQUMscUJBQXFCO1VBQ2hFLENBQUM7VUFDRCxJQUFJVCxNQUFNLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDckJNLE1BQU0sQ0FBQ04sTUFBTSxHQUFHQSxNQUFNO1VBQ3hCO1VBQ0FMLE1BQU0sR0FBR0Usa0JBQWtCLENBQUNTLE1BQU0sQ0FBQztRQUNyQztRQUNBLElBQUkseUNBQVcsQ0FBQ1osV0FBVyxJQUFJLE9BQU9nQixNQUFNLEtBQUssV0FBVyxFQUFFO1VBQzVELE1BQU1DLE1BQU0sR0FBRyxJQUFJRCxNQUFNLENBQUNuQixXQUFXLENBQUM7VUFDdENvQixNQUFNLENBQUNDLFdBQVcsQ0FBQztZQUNqQkMsRUFBRSxFQUFFLFdBQVc7WUFDZkMsR0FBRyxFQUFFdEI7VUFDUCxDQUFDLENBQUM7VUFDRm1CLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDO1lBQ2pCQyxFQUFFLEVBQUUscUJBQXFCO1lBQ3pCRSxRQUFRLEVBQUU7VUFDWixDQUFDLENBQUM7VUFDRixJQUFLQyxNQUFNLENBQVNDLEdBQUcsRUFBRTtZQUN0QkQsTUFBTSxDQUFTQyxHQUFHLENBQUNDLGdCQUFnQixDQUFFQyxNQUFNLElBQUs7Y0FDL0MsSUFBSUEsTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDeEJSLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDO2tCQUFDQyxFQUFFLEVBQUU7Z0JBQVksQ0FBQyxDQUFDO2NBQ3hDO1lBQ0YsQ0FBQyxDQUFDO1VBQ0o7VUFDQW5CLFdBQVcsR0FBRyxJQUFJSixXQUFXLENBQUNxQixNQUFNLENBQUM7UUFDdkM7UUFDQVIsR0FBRyxDQUFDRSxPQUFPLGdCQUNULEtBQUMsaUJBQWlCO1VBQ2hCLEtBQUssRUFBRVYsTUFBTztVQUNkLEtBQUssRUFBRUQsV0FBWTtVQUNuQixtQkFBbUIsRUFBRTBCLE9BQU8sQ0FBQzFCLFdBQVcsQ0FBRTtVQUFBLFVBRXpDUyxHQUFHLENBQUNFO1FBQU8sRUFFZjtNQUNIO01BRUEsT0FBT0QsSUFBSSxFQUFFO0lBQ2Y7RUFDSixDQUFDLENBQUM7RUFDSixPQUFPTixNQUFNO0FBQ2Y7QUFFQSxlQUFlRixTQUFTIn0=