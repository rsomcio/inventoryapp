/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-env node */

import React from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
let workerPath;
let wasmPath;
if (process.env.NODE_ENV !== "production" && false) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}
function getPlugin(getStyletronEngine) {
  const plugin = false && createPlugin({
    deps: {
      prefix: AtomicPrefixToken.optional
    },
    middleware: ({
      prefix
    }) => (ctx, next) => {
      if (process.env.NODE_ENV !== "production") {
        if (ctx.url === workerRoute) {
          ctx.body = fs.createReadStream(workerPath);
          return next();
        }
        if (ctx.url === wasmRoute) {
          ctx.body = fs.createReadStream(wasmPath);
          return next();
        }
      }
      if (ctx.element) {
        const config = prefix === void 0 ? void 0 : {
          prefix
        };
        const engine = getStyletronEngine(config);
        ctx.element = /*#__PURE__*/_jsx(StyletronProvider, {
          value: engine,
          children: ctx.element
        });
        return next().then(() => {
          const stylesForHead = engine.getStylesheetsHtml();
          ctx.template.head.push(dangerouslySetHTML(stylesForHead));
        });
      } else {
        return next();
      }
    }
  });
  return plugin;
}
export default getPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIndvcmtlclBhdGgiLCJ3YXNtUGF0aCIsImJhc2UiLCJwYXRoIiwiZGlybmFtZSIsInJlcXVpcmUiLCJyZXNvbHZlIiwiZ2V0UGx1Z2luIiwiZ2V0U3R5bGV0cm9uRW5naW5lIiwicGx1Z2luIiwiY3JlYXRlUGx1Z2luIiwiZGVwcyIsInByZWZpeCIsIkF0b21pY1ByZWZpeFRva2VuIiwib3B0aW9uYWwiLCJtaWRkbGV3YXJlIiwiY3R4IiwibmV4dCIsInVybCIsIndvcmtlclJvdXRlIiwiYm9keSIsImZzIiwiY3JlYXRlUmVhZFN0cmVhbSIsIndhc21Sb3V0ZSIsImVsZW1lbnQiLCJjb25maWciLCJlbmdpbmUiLCJ0aGVuIiwic3R5bGVzRm9ySGVhZCIsImdldFN0eWxlc2hlZXRzSHRtbCIsInRlbXBsYXRlIiwiaGVhZCIsInB1c2giLCJkYW5nZXJvdXNseVNldEhUTUwiXSwic291cmNlcyI6WyJzcmMvc2VydmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbiwgZGFuZ2Vyb3VzbHlTZXRIVE1MfSBmcm9tICdmdXNpb24tY29yZSc7XG5cbmltcG9ydCB7UHJvdmlkZXIgYXMgU3R5bGV0cm9uUHJvdmlkZXJ9IGZyb20gJ3N0eWxldHJvbi1yZWFjdCc7XG5cbmltcG9ydCB7d29ya2VyUm91dGUsIHdhc21Sb3V0ZSwgQXRvbWljUHJlZml4VG9rZW59IGZyb20gJy4vY29uc3RhbnRzJztcblxubGV0IHdvcmtlclBhdGg7XG5sZXQgd2FzbVBhdGg7XG5cbmlmIChfX0RFVl9fICYmIF9fTk9ERV9fKSB7XG4gIGNvbnN0IGJhc2UgPSBwYXRoLmRpcm5hbWUocmVxdWlyZS5yZXNvbHZlKCdjc3MtdG8tanMtc291cmNlbWFwLXdvcmtlcicpKTtcbiAgd29ya2VyUGF0aCA9IHBhdGgucmVzb2x2ZShiYXNlLCAnd29ya2VyLmpzJyk7XG4gIHdhc21QYXRoID0gcGF0aC5yZXNvbHZlKGJhc2UsICdtYXBwaW5ncy53YXNtJyk7XG59XG5cbmZ1bmN0aW9uIGdldFBsdWdpbihnZXRTdHlsZXRyb25FbmdpbmU6IGFueSk6IGFueSB7XG4gIGNvbnN0IHBsdWdpbiA9XG4gICAgX19OT0RFX18gJiZcbiAgICBjcmVhdGVQbHVnaW4oe1xuICAgICAgZGVwczoge1xuICAgICAgICBwcmVmaXg6IEF0b21pY1ByZWZpeFRva2VuLm9wdGlvbmFsLFxuICAgICAgfSxcbiAgICAgIG1pZGRsZXdhcmU6XG4gICAgICAgICh7cHJlZml4fSkgPT5cbiAgICAgICAgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICBpZiAoY3R4LnVybCA9PT0gd29ya2VyUm91dGUpIHtcbiAgICAgICAgICAgICAgY3R4LmJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHdvcmtlclBhdGgpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN0eC51cmwgPT09IHdhc21Sb3V0ZSkge1xuICAgICAgICAgICAgICBjdHguYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0od2FzbVBhdGgpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdHguZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gcHJlZml4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB7cHJlZml4fTtcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZSA9IGdldFN0eWxldHJvbkVuZ2luZShjb25maWcpO1xuXG4gICAgICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICAgICAgPFN0eWxldHJvblByb3ZpZGVyIHZhbHVlPXtlbmdpbmV9PlxuICAgICAgICAgICAgICAgIHtjdHguZWxlbWVudH1cbiAgICAgICAgICAgICAgPC9TdHlsZXRyb25Qcm92aWRlcj5cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXh0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHN0eWxlc0ZvckhlYWQgPSBlbmdpbmUuZ2V0U3R5bGVzaGVldHNIdG1sKCk7XG4gICAgICAgICAgICAgIGN0eC50ZW1wbGF0ZS5oZWFkLnB1c2goZGFuZ2Vyb3VzbHlTZXRIVE1MKHN0eWxlc0ZvckhlYWQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UGx1Z2luO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBS0EsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFBQztBQU8xQixJQUFJQyxVQUFVO0FBQ2QsSUFBSUMsUUFBUTtBQUVaLElBQUksOENBQW1CLEVBQUU7RUFDdkIsTUFBTUMsSUFBSSxHQUFHQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztFQUN4RU4sVUFBVSxHQUFHRyxJQUFJLENBQUNHLE9BQU8sQ0FBQ0osSUFBSSxFQUFFLFdBQVcsQ0FBQztFQUM1Q0QsUUFBUSxHQUFHRSxJQUFJLENBQUNHLE9BQU8sQ0FBQ0osSUFBSSxFQUFFLGVBQWUsQ0FBQztBQUNoRDtBQUVBLFNBQVNLLFNBQVMsQ0FBQ0Msa0JBQXVCLEVBQU87RUFDL0MsTUFBTUMsTUFBTSxHQUNWLFNBQ0FDLFlBQVksQ0FBQztJQUNYQyxJQUFJLEVBQUU7TUFDSkMsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBQ0M7SUFDNUIsQ0FBQztJQUNEQyxVQUFVLEVBQ1IsQ0FBQztNQUFDSDtJQUFNLENBQUMsS0FDVCxDQUFDSSxHQUFHLEVBQUVDLElBQUksS0FBSztNQUNiLDJDQUFhO1FBQ1gsSUFBSUQsR0FBRyxDQUFDRSxHQUFHLEtBQUtDLFdBQVcsRUFBRTtVQUMzQkgsR0FBRyxDQUFDSSxJQUFJLEdBQUdDLEVBQUUsQ0FBQ0MsZ0JBQWdCLENBQUN0QixVQUFVLENBQUM7VUFDMUMsT0FBT2lCLElBQUksRUFBRTtRQUNmO1FBQ0EsSUFBSUQsR0FBRyxDQUFDRSxHQUFHLEtBQUtLLFNBQVMsRUFBRTtVQUN6QlAsR0FBRyxDQUFDSSxJQUFJLEdBQUdDLEVBQUUsQ0FBQ0MsZ0JBQWdCLENBQUNyQixRQUFRLENBQUM7VUFDeEMsT0FBT2dCLElBQUksRUFBRTtRQUNmO01BQ0Y7TUFFQSxJQUFJRCxHQUFHLENBQUNRLE9BQU8sRUFBRTtRQUNmLE1BQU1DLE1BQU0sR0FBR2IsTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHO1VBQUNBO1FBQU0sQ0FBQztRQUNwRCxNQUFNYyxNQUFNLEdBQUdsQixrQkFBa0IsQ0FBQ2lCLE1BQU0sQ0FBQztRQUV6Q1QsR0FBRyxDQUFDUSxPQUFPLGdCQUNULEtBQUMsaUJBQWlCO1VBQUMsS0FBSyxFQUFFRSxNQUFPO1VBQUEsVUFDOUJWLEdBQUcsQ0FBQ1E7UUFBTyxFQUVmO1FBRUQsT0FBT1AsSUFBSSxFQUFFLENBQUNVLElBQUksQ0FBQyxNQUFNO1VBQ3ZCLE1BQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBa0IsRUFBRTtVQUNqRGIsR0FBRyxDQUFDYyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0wsYUFBYSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDO01BQ0osQ0FBQyxNQUFNO1FBQ0wsT0FBT1gsSUFBSSxFQUFFO01BQ2Y7SUFDRjtFQUNKLENBQUMsQ0FBQztFQUNKLE9BQU9SLE1BQU07QUFDZjtBQUVBLGVBQWVGLFNBQVMifQ==