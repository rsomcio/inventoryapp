'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var test = _interopDefault(require('tape'));
var inlineStylePrefixer = require('inline-style-prefixer');

var cov_1evnz0a78r = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/hyphenate-style-name.js",
      hash = "755eea4270b5412e32421e6d871cc5c3994a6eb4",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/hyphenate-style-name.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "1": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 24
        }
      },
      "2": {
        start: {
          line: 5,
          column: 14
        },
        end: {
          line: 5,
          column: 16
        }
      },
      "3": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 13,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "hyphenateStyleName",
        decl: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 42
          }
        },
        loc: {
          start: {
            line: 7,
            column: 65
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 13,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 17
          }
        }, {
          start: {
            line: 10,
            column: 7
          },
          end: {
            line: 13,
            column: 35
          }
        }],
        line: 8
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const uppercasePattern = (cov_1evnz0a78r.s[0]++, /[A-Z]/g);
const msPattern = (cov_1evnz0a78r.s[1]++, /^ms-/);
const cache = (cov_1evnz0a78r.s[2]++, {});
function hyphenateStyleName(prop) {
  cov_1evnz0a78r.f[0]++;
  cov_1evnz0a78r.s[3]++;
  return prop in cache ? (cov_1evnz0a78r.b[0][0]++, cache[prop]) : (cov_1evnz0a78r.b[0][1]++, cache[prop] = prop.replace(uppercasePattern, "-$&").toLowerCase().replace(msPattern, "-ms-"));
}

var cov_9kwna8y68 = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/validate-no-mixed-hand.js",
      hash = "0b76745de32018a4db9cbb5067ee12ea1de2c0ba",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/validate-no-mixed-hand.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 232,
          column: 1
        }
      },
      "1": {
        start: {
          line: 235,
          column: 31
        },
        end: {
          line: 238,
          column: 8
        }
      },
      "2": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 40
        }
      },
      "3": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "4": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 18
        }
      },
      "5": {
        start: {
          line: 241,
          column: 2
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "6": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "7": {
        start: {
          line: 243,
          column: 6
        },
        end: {
          line: 252,
          column: 7
        }
      },
      "8": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "9": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "10": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 54
        }
      },
      "11": {
        start: {
          line: 247,
          column: 10
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "12": {
        start: {
          line: 255,
          column: 2
        },
        end: {
          line: 255,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "validateNoMixedHand",
        decl: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 234,
            column: 35
          }
        },
        loc: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 234
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 235,
            column: 57
          },
          end: {
            line: 235,
            column: 58
          }
        },
        loc: {
          start: {
            line: 235,
            column: 76
          },
          end: {
            line: 238,
            column: 3
          }
        },
        line: 235
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        }, {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        }],
        line: 242
      },
      "1": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }],
        line: 244
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

/**
 * Adapted from https://github.com/gilmoreorless/css-shorthand-properties
 */
const shorthandMap = (cov_9kwna8y68.s[0]++, {
  // CSS 2.1: https://www.w3.org/TR/CSS2/propidx.html
  "list-style": ["list-style-type", "list-style-position", "list-style-image"],
  margin: ["margin-top", "margin-right", "margin-bottom", "margin-left"],
  outline: ["outline-width", "outline-style", "outline-color"],
  padding: ["padding-top", "padding-right", "padding-bottom", "padding-left"],
  // CSS Backgrounds and Borders Module Level 3: https://www.w3.org/TR/css3-background/
  background: ["background-image", "background-position", "background-size", "background-repeat", "background-origin", "background-clip", "background-attachment", "background-color"],
  border: ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width", "border-width", "border-top-style", "border-right-style", "border-bottom-style", "border-left-style", "border-style", "border-top-color", "border-right-color", "border-bottom-color", "border-left-color", "border-color"],
  "border-color": ["border-top-color", "border-right-color", "border-bottom-color", "border-left-color"],
  "border-style": ["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"],
  "border-width": ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width"],
  "border-top": ["border-top-width", "border-top-style", "border-top-color"],
  "border-right": ["border-right-width", "border-right-style", "border-right-color"],
  "border-bottom": ["border-bottom-width", "border-bottom-style", "border-bottom-color"],
  "border-left": ["border-left-width", "border-left-style", "border-left-color"],
  "border-radius": ["border-top-left-radius", "border-top-right-radius", "border-bottom-right-radius", "border-bottom-left-radius"],
  "border-image": ["border-image-source", "border-image-slice", "border-image-width", "border-image-outset", "border-image-repeat"],
  // CSS Fonts Module Level 3: https://www.w3.org/TR/css3-fonts/
  font: ["font-style", "font-variant-ligatures", "font-variant-alternates", "font-variant-caps", "font-variant-numeric", "font-variant-east-asian", "font-variant", "font-weight", "font-stretch", "font-size", "line-height", "font-family"],
  "font-variant": ["font-variant-ligatures", "font-variant-alternates", "font-variant-caps", "font-variant-numeric", "font-variant-east-asian"],
  // CSS Flexible Box Layout Module Level 1: https://www.w3.org/TR/css3-flexbox-1/
  flex: ["flex-grow", "flex-shrink", "flex-basis"],
  "flex-flow": ["flex-direction", "flex-wrap"],
  // CSS Grid Layout Module Level 1: https://www.w3.org/TR/css-grid-1/
  grid: ["grid-template-rows", "grid-template-columns", "grid-template-areas", "grid-auto-rows", "grid-auto-columns", "grid-auto-flow"],
  "grid-template": ["grid-template-rows", "grid-template-columns", "grid-template-areas"],
  "grid-row": ["grid-row-start", "grid-row-end"],
  "grid-column": ["grid-column-start", "grid-column-end"],
  "grid-area": ["grid-row-start", "grid-column-start", "grid-row-end", "grid-column-end"],
  "grid-gap": ["grid-row-gap", "grid-column-gap"],
  // CSS Masking Module Level 1: https://www.w3.org/TR/css-masking/
  mask: ["mask-image", "mask-mode", "mask-position", "mask-size", "mask-repeat", "mask-origin", "mask-clip"],
  "mask-border": ["mask-border-source", "mask-border-slice", "mask-border-width", "mask-border-outset", "mask-border-repeat", "mask-border-mode"],
  // CSS Multi-column Layout Module: https://www.w3.org/TR/css3-multicol/
  columns: ["column-width", "column-count"],
  "column-rule": ["column-rule-width", "column-rule-style", "column-rule-color"],
  // CSS Scroll Snap Module Level 1: https://www.w3.org/TR/css-scroll-snap-1/
  "scroll-padding": ["scroll-padding-top", "scroll-padding-right", "scroll-padding-bottom", "scroll-padding-left"],
  "scroll-padding-block": ["scroll-padding-block-start", "scroll-padding-block-end"],
  "scroll-padding-inline": ["scroll-padding-inline-start", "scroll-padding-inline-end"],
  "scroll-snap-margin": ["scroll-snap-margin-top", "scroll-snap-margin-right", "scroll-snap-margin-bottom", "scroll-snap-margin-left"],
  "scroll-snap-margin-block": ["scroll-snap-margin-block-start", "scroll-snap-margin-block-end"],
  "scroll-snap-margin-inline": ["scroll-snap-margin-inline-start", "scroll-snap-margin-inline-end"],
  // CSS Speech Module: https://www.w3.org/TR/css3-speech/
  cue: ["cue-before", "cue-after"],
  pause: ["pause-before", "pause-after"],
  rest: ["rest-before", "rest-after"],
  // CSS Text Decoration Module Level 3: https://www.w3.org/TR/css-text-decor-3/
  "text-decoration": ["text-decoration-line", "text-decoration-style", "text-decoration-color"],
  "text-emphasis": ["text-emphasis-style", "text-emphasis-color"],
  // CSS Animations (WD): https://www.w3.org/TR/css3-animations
  animation: ["animation-name", "animation-duration", "animation-timing-function", "animation-delay", "animation-iteration-count", "animation-direction", "animation-fill-mode", "animation-play-state"],
  // CSS Transitions (WD): https://www.w3.org/TR/css3-transitions/
  transition: ["transition-property", "transition-duration", "transition-timing-function", "transition-delay"]
});
function validateNoMixedHand(style) {
  cov_9kwna8y68.f[0]++;
  const hyphenatedProperties = (cov_9kwna8y68.s[1]++, Object.keys(style).reduce((acc, property) => {
    cov_9kwna8y68.f[1]++;
    cov_9kwna8y68.s[2]++;
    acc[hyphenateStyleName(property)] = property;
    cov_9kwna8y68.s[3]++;
    return acc;
  }, {}));
  const mixed = (cov_9kwna8y68.s[4]++, []);
  cov_9kwna8y68.s[5]++;

  for (const property in hyphenatedProperties) {
    cov_9kwna8y68.s[6]++;

    if (property in shorthandMap) {
      cov_9kwna8y68.b[0][0]++;
      cov_9kwna8y68.s[7]++;

      for (const longhand of shorthandMap[property]) {
        cov_9kwna8y68.s[8]++;

        if (longhand in hyphenatedProperties) {
          cov_9kwna8y68.b[1][0]++;
          const long = (cov_9kwna8y68.s[9]++, hyphenatedProperties[longhand]);
          const short = (cov_9kwna8y68.s[10]++, hyphenatedProperties[property]);
          cov_9kwna8y68.s[11]++;
          mixed.push({
            shorthand: {
              property: short,
              value: style[short]
            },
            longhand: {
              property: long,
              value: style[long]
            }
          });
        } else {
          cov_9kwna8y68.b[1][1]++;
        }
      }
    } else {
      cov_9kwna8y68.b[0][1]++;
    }
  }

  cov_9kwna8y68.s[12]++;
  return mixed;
}

var cov_bgn06my3h = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/inject-style-prefixed.js",
      hash = "f7e462dd23dcede17450b8d3321b8face40fed01",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/inject-style-prefixed.js",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 14
        },
        end: {
          line: 17,
          column: 16
        }
      },
      "1": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 18
        }
      },
      "2": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 86,
          column: 3
        }
      },
      "3": {
        start: {
          line: 21,
          column: 18
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "4": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "5": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "6": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "7": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 40,
          column: 7
        }
      },
      "8": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "9": {
        start: {
          line: 34,
          column: 10
        },
        end: {
          line: 38,
          column: 12
        }
      },
      "10": {
        start: {
          line: 42,
          column: 19
        },
        end: {
          line: 42,
          column: 47
        }
      },
      "11": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 49
        }
      },
      "12": {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "13": {
        start: {
          line: 45,
          column: 28
        },
        end: {
          line: 45,
          column: 49
        }
      },
      "14": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "15": {
        start: {
          line: 50,
          column: 31
        },
        end: {
          line: 50,
          column: 73
        }
      },
      "16": {
        start: {
          line: 51,
          column: 10
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "17": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 40
        }
      },
      "18": {
        start: {
          line: 54,
          column: 15
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "19": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 51
        }
      },
      "20": {
        start: {
          line: 56,
          column: 10
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "21": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 57,
          column: 66
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "23": {
        start: {
          line: 59,
          column: 14
        },
        end: {
          line: 59,
          column: 42
        }
      },
      "24": {
        start: {
          line: 64,
          column: 6
        },
        end: {
          line: 64,
          column: 26
        }
      },
      "25": {
        start: {
          line: 65,
          column: 6
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "26": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "27": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 72,
          column: 8
        }
      },
      "28": {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "29": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "30": {
        start: {
          line: 77,
          column: 26
        },
        end: {
          line: 77,
          column: 78
        }
      },
      "31": {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 69
        }
      },
      "32": {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "33": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 85,
          column: 6
        }
      },
      "34": {
        start: {
          line: 89,
          column: 2
        },
        end: {
          line: 101,
          column: 3
        }
      },
      "35": {
        start: {
          line: 90,
          column: 22
        },
        end: {
          line: 90,
          column: 49
        }
      },
      "36": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "37": {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "38": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 77
        }
      },
      "39": {
        start: {
          line: 94,
          column: 21
        },
        end: {
          line: 94,
          column: 74
        }
      },
      "40": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "41": {
        start: {
          line: 105,
          column: 2
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "42": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 19
        }
      },
      "43": {
        start: {
          line: 109,
          column: 17
        },
        end: {
          line: 109,
          column: 19
        }
      },
      "44": {
        start: {
          line: 110,
          column: 2
        },
        end: {
          line: 112,
          column: 3
        }
      },
      "45": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 111,
          column: 55
        }
      },
      "46": {
        start: {
          line: 113,
          column: 2
        },
        end: {
          line: 113,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "injectStylePrefixed",
        decl: {
          start: {
            line: 11,
            column: 24
          },
          end: {
            line: 11,
            column: 43
          }
        },
        loc: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 114,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 92,
            column: 25
          }
        },
        loc: {
          start: {
            line: 92,
            column: 51
          },
          end: {
            line: 99,
            column: 7
          }
        },
        line: 92
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 24
          }
        }, {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 23,
            column: 42
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 40,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 40,
            column: 7
          }
        }, {
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 40,
            column: 7
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 10
          },
          end: {
            line: 32,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 10
          },
          end: {
            line: 30,
            column: 24
          }
        }, {
          start: {
            line: 31,
            column: 10
          },
          end: {
            line: 31,
            column: 30
          }
        }, {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 32,
            column: 36
          }
        }, {
          start: {
            line: 32,
            column: 40
          },
          end: {
            line: 32,
            column: 65
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 10
          },
          end: {
            line: 48,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 10
          },
          end: {
            line: 47,
            column: 41
          }
        }, {
          start: {
            line: 48,
            column: 10
          },
          end: {
            line: 48,
            column: 41
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 10
          },
          end: {
            line: 53,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 10
          },
          end: {
            line: 53,
            column: 11
          }
        }, {
          start: {
            line: 51,
            column: 10
          },
          end: {
            line: 53,
            column: 11
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }],
        line: 58
      },
      "11": {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }],
        line: 68
      },
      "12": {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }, {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }],
        line: 76
      },
      "13": {
        loc: {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 101,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 101,
            column: 3
          }
        }, {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 101,
            column: 3
          }
        }],
        line: 89
      },
      "14": {
        loc: {
          start: {
            line: 89,
            column: 6
          },
          end: {
            line: 89,
            column: 23
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 6
          },
          end: {
            line: 89,
            column: 12
          }
        }, {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 89,
            column: 23
          }
        }],
        line: 89
      },
      "15": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }],
        line: 91
      },
      "16": {
        loc: {
          start: {
            line: 105,
            column: 2
          },
          end: {
            line: 107,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 2
          },
          end: {
            line: 107,
            column: 3
          }
        }, {
          start: {
            line: 105,
            column: 2
          },
          end: {
            line: 107,
            column: 3
          }
        }],
        line: 105
      },
      "17": {
        loc: {
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        }, {
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        }],
        line: 110
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

function injectStylePrefixed(styles, selector, prefix$$1, strict) {
  cov_bgn06my3h.f[0]++;
  let rules = (cov_bgn06my3h.s[0]++, "");
  let classes = (cov_bgn06my3h.s[1]++, []);
  cov_bgn06my3h.s[2]++;

  for (const key in styles) {
    const value = (cov_bgn06my3h.s[3]++, styles[key]);
    cov_bgn06my3h.s[4]++;

    if ((cov_bgn06my3h.b[1][0]++, value === void 0) || (cov_bgn06my3h.b[1][1]++, value === null)) {
      cov_bgn06my3h.b[0][0]++;
      cov_bgn06my3h.s[5]++;
      continue;
    } else {
      cov_bgn06my3h.b[0][1]++;
    }

    cov_bgn06my3h.s[6]++;

    if (typeof value !== "object") {
      cov_bgn06my3h.b[2][0]++;
      cov_bgn06my3h.s[7]++;

      if (process.env.NODE_ENV !== "production") {
        cov_bgn06my3h.b[3][0]++;
        cov_bgn06my3h.s[8]++;

        if ((cov_bgn06my3h.b[5][0]++, value === null) || (cov_bgn06my3h.b[5][1]++, Array.isArray(value)) || (cov_bgn06my3h.b[5][2]++, typeof value !== "number") && (cov_bgn06my3h.b[5][3]++, typeof value !== "string")) {
          cov_bgn06my3h.b[4][0]++;
          cov_bgn06my3h.s[9]++;
          throw new Error(`Unsupported style value: ${JSON.stringify(value)} used in property ${JSON.stringify(key)}`);
        } else {
          cov_bgn06my3h.b[4][1]++;
        }
      } else {
        cov_bgn06my3h.b[3][1]++;
      }

      const rule = (cov_bgn06my3h.s[10]++, hyphenateStyleName(key) + ":" + value);
      const prefixed = (cov_bgn06my3h.s[11]++, inlineStylePrefixer.prefix({
        [key]: value
      }));
      cov_bgn06my3h.s[12]++;

      for (const prefixedKey in prefixed) {
        const prefixedVal = (cov_bgn06my3h.s[13]++, prefixed[prefixedKey]);
        cov_bgn06my3h.s[14]++;

        if ((cov_bgn06my3h.b[7][0]++, typeof prefixedVal === "string") || (cov_bgn06my3h.b[7][1]++, typeof prefixedVal === "number")) {
          cov_bgn06my3h.b[6][0]++;
          const prefixedRule = (cov_bgn06my3h.s[15]++, hyphenateStyleName(prefixedKey) + ":" + prefixedVal);
          cov_bgn06my3h.s[16]++;

          if (prefixedRule !== rule) {
            cov_bgn06my3h.b[8][0]++;
            cov_bgn06my3h.s[17]++;
            rules += prefixedRule + ";";
          } else {
            cov_bgn06my3h.b[8][1]++;
          }
        } else {
          cov_bgn06my3h.b[6][1]++;
          cov_bgn06my3h.s[18]++;

          if (Array.isArray(prefixedVal)) {
            cov_bgn06my3h.b[9][0]++;
            const hyphenated = (cov_bgn06my3h.s[19]++, hyphenateStyleName(prefixedKey));
            cov_bgn06my3h.s[20]++;

            for (let i = 0; i < prefixedVal.length; i++) {
              const prefixedRule = (cov_bgn06my3h.s[21]++, hyphenated + ":" + prefixedVal[i]);
              cov_bgn06my3h.s[22]++;

              if (prefixedRule !== rule) {
                cov_bgn06my3h.b[10][0]++;
                cov_bgn06my3h.s[23]++;
                rules += prefixedRule + ";";
              } else {
                cov_bgn06my3h.b[10][1]++;
              }
            }
          } else {
            cov_bgn06my3h.b[9][1]++;
          }
        }
      }

      cov_bgn06my3h.s[24]++;
      rules += rule + ";";
      cov_bgn06my3h.s[25]++;
      continue;
    } else {
      cov_bgn06my3h.b[2][1]++;
    }

    cov_bgn06my3h.s[26]++;

    if (key[0] === ":") {
      cov_bgn06my3h.b[11][0]++;
      cov_bgn06my3h.s[27]++;
      classes = [...classes, ...injectStylePrefixed(value, selector + key, prefix$$1, strict)];
      cov_bgn06my3h.s[28]++;
      continue;
    } else {
      cov_bgn06my3h.b[11][1]++;
    }

    cov_bgn06my3h.s[29]++;

    if (key[0] === "@") {
      cov_bgn06my3h.b[12][0]++;
      const nestedRules = (cov_bgn06my3h.s[30]++, injectStylePrefixed(value, selector, prefix$$1, strict));
      cov_bgn06my3h.s[31]++;
      classes = [...classes, key + "{" + nestedRules.join("") + "}"];
      cov_bgn06my3h.s[32]++;
      continue;
    } else {
      cov_bgn06my3h.b[12][1]++;
    }

    cov_bgn06my3h.s[33]++;
    classes = [...classes, key + "{" + injectStylePrefixed(value, "", prefix$$1, strict).join("") + "}"];
  } // strict mode checks for mixed long/shorthands to keep compatibility with atomic engine


  cov_bgn06my3h.s[34]++;

  if ((cov_bgn06my3h.b[14][0]++, strict) && (cov_bgn06my3h.b[14][1]++, process.env.NODE_ENV !== "production")) {
    cov_bgn06my3h.b[13][0]++;
    const conflicts = (cov_bgn06my3h.s[35]++, validateNoMixedHand(styles));
    cov_bgn06my3h.s[36]++;

    if (conflicts.length) {
      cov_bgn06my3h.b[15][0]++;
      cov_bgn06my3h.s[37]++;
      conflicts.forEach(({
        shorthand,
        longhand
      }) => {
        cov_bgn06my3h.f[1]++;
        const short = (cov_bgn06my3h.s[38]++, JSON.stringify({
          [shorthand.property]: shorthand.value
        }));
        const long = (cov_bgn06my3h.s[39]++, JSON.stringify({
          [longhand.property]: longhand.value
        })); // eslint-disable-next-line no-console

        cov_bgn06my3h.s[40]++;
        console.warn(`Styles \`${short}\` and \`${long}\` in object yielding class "${selector}" may result in unexpected behavior. Mixing shorthand and longhand properties within the same style object is unsupported with atomic rendering.`);
      });
    } else {
      cov_bgn06my3h.b[15][1]++;
    }
  } else {
    cov_bgn06my3h.b[13][1]++;
  } // used to handle 'exact' selectors like 'div' or referencing another class name like '.css-abc123:hover'
  // selector is applied in the parent recursive function call.


  cov_bgn06my3h.s[41]++;

  if (!selector) {
    cov_bgn06my3h.b[16][0]++;
    cov_bgn06my3h.s[42]++;
    return [rules];
  } else {
    cov_bgn06my3h.b[16][1]++;
  }

  const result = (cov_bgn06my3h.s[43]++, []);
  cov_bgn06my3h.s[44]++;

  if (rules) {
    cov_bgn06my3h.b[17][0]++;
    cov_bgn06my3h.s[45]++;
    result.push(`.${prefix$$1}css-${selector}{${rules}}`);
  } else {
    cov_bgn06my3h.b[17][1]++;
  }

  cov_bgn06my3h.s[46]++;
  return [...result, ...classes];
}

var cov_2mdvnzwrpk = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/validate-keyframes-object.js",
      hash = "96ef0598533c1d501b33981bedf8a5f841c007d2",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/validate-keyframes-object.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 92
        }
      },
      "1": {
        start: {
          line: 8,
          column: 14
        },
        end: {
          line: 8,
          column: 18
        }
      },
      "2": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "3": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "4": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "5": {
        start: {
          line: 12,
          column: 6
        },
        end: {
          line: 12,
          column: 20
        }
      },
      "6": {
        start: {
          line: 13,
          column: 6
        },
        end: {
          line: 17,
          column: 8
        }
      },
      "7": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "8": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "9": {
        start: {
          line: 21,
          column: 6
        },
        end: {
          line: 25,
          column: 8
        }
      },
      "10": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "11": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 31,
          column: 8
        }
      }
    },
    fnMap: {
      "0": {
        name: "validateKeyframesObject",
        decl: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 67
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }, {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 27
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

/* eslint-disable no-console */
const validAnimationState = (cov_2mdvnzwrpk.s[0]++, /^(from|to|\+?(\d*\.)?\d+%)(\s*,\s*(from|to|\+?(\d*\.)?\d+%))*$/);
function validateKeyframesObject(keyframes) {
  cov_2mdvnzwrpk.f[0]++;
  let valid = (cov_2mdvnzwrpk.s[1]++, true);
  cov_2mdvnzwrpk.s[2]++;

  for (const animationState in keyframes) {
    const value = (cov_2mdvnzwrpk.s[3]++, keyframes[animationState]);
    cov_2mdvnzwrpk.s[4]++;

    if (!validAnimationState.test(animationState)) {
      cov_2mdvnzwrpk.b[0][0]++;
      cov_2mdvnzwrpk.s[5]++;
      valid = false;
      cov_2mdvnzwrpk.s[6]++;
      console.warn(`Warning: property "${animationState}" in keyframes object ${JSON.stringify(keyframes)} is not a valid. Must be "from", "to", or a percentage.`);
    } else {
      cov_2mdvnzwrpk.b[0][1]++;
    }

    cov_2mdvnzwrpk.s[7]++;

    if (typeof value !== "object") {
      cov_2mdvnzwrpk.b[1][0]++;
      cov_2mdvnzwrpk.s[8]++;
      valid = false;
      cov_2mdvnzwrpk.s[9]++;
      console.warn(`Warning: value for "${animationState}" property in keyframes object ${JSON.stringify(keyframes)} must be an object. Instead it was a ${typeof value}.`);
    } else {
      cov_2mdvnzwrpk.b[1][1]++;
    }

    cov_2mdvnzwrpk.s[10]++;

    if (!valid) {
      cov_2mdvnzwrpk.b[2][0]++;
      cov_2mdvnzwrpk.s[11]++;
      console.warn(`Warning: object used as value for "animationName" style is invalid:`, keyframes);
    } else {
      cov_2mdvnzwrpk.b[2][1]++;
    }
  }
}

var cov_2644g2arph = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/generate-alphabetic-name.js",
      hash = "315453d5950b9428801cc2550ab4c30cdc5a23c0",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/generate-alphabetic-name.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "1": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 22
        }
      },
      "2": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 12,
          column: 51
        }
      },
      "3": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 12,
          column: 51
        }
      },
      "4": {
        start: {
          line: 16,
          column: 13
        },
        end: {
          line: 16,
          column: 15
        }
      },
      "5": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "6": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 53
        }
      },
      "7": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 27,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 26
          },
          end: {
            line: 11,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 51
          }
        },
        line: 12
      },
      "1": {
        name: "generateAlphabeticName",
        decl: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 46
          }
        },
        loc: {
          start: {
            line: 15,
            column: 69
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 12,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 12,
            column: 44
          }
        }, {
          start: {
            line: 12,
            column: 47
          },
          end: {
            line: 12,
            column: 49
          }
        }],
        line: 12
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

// vendored in from styled-components
const AD_REPLACER_R = (cov_2644g2arph.s[0]++, /(a)(d)/gi);
/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */

const charsLength = (cov_2644g2arph.s[1]++, 52);
/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */

cov_2644g2arph.s[2]++;

const getAlphabeticChar = code => {
  cov_2644g2arph.f[0]++;
  cov_2644g2arph.s[3]++;
  return String.fromCharCode(code + (code > 25 ? (cov_2644g2arph.b[0][0]++, 39) : (cov_2644g2arph.b[0][1]++, 97)));
};
/* input a number, usually a hash and convert it to base-52 */


function generateAlphabeticName(code) {
  cov_2644g2arph.f[1]++;
  let name = (cov_2644g2arph.s[4]++, "");
  let x;
  /* get a char and divide by alphabet-length */

  cov_2644g2arph.s[5]++;

  for (x = Math.abs(code); x > charsLength; x = x / charsLength | 0) {
    cov_2644g2arph.s[6]++;
    name = getAlphabeticChar(x % charsLength) + name;
  }

  cov_2644g2arph.s[7]++;
  return (getAlphabeticChar(x % charsLength) + name).replace(AD_REPLACER_R, "$1-$2");
}

var cov_1d0bhrpgd4 = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/hash.js",
      hash = "ce730c07257018ef8d4ad14867fd81d6014d6cb1",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/hash.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 20
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "1": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 16,
          column: 1
        }
      },
      "2": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 9
        }
      },
      "3": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 13,
          column: 3
        }
      },
      "4": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 11
        }
      },
      "6": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 21,
          column: 1
        }
      },
      "7": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 20,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 21
          },
          end: {
            line: 9,
            column: 22
          }
        },
        loc: {
          start: {
            line: 9,
            column: 55
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 21
          }
        },
        loc: {
          start: {
            line: 19,
            column: 43
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

// vendored in from styled-components
const SEED = (cov_1d0bhrpgd4.s[0]++, 5381 | 0); // When we have separate strings it's useful to run a progressive
// version of djb2 where we pretend that we're still looping over
// the same string

cov_1d0bhrpgd4.s[1]++;
const phash = (h, x) => {
  cov_1d0bhrpgd4.f[0]++;
  cov_1d0bhrpgd4.s[2]++;
  h |= 0;
  cov_1d0bhrpgd4.s[3]++;

  for (let i = 0, l = x.length | 0; i < l; i++) {
    cov_1d0bhrpgd4.s[4]++;
    h = (h << 5) + h + x.charCodeAt(i);
  }

  cov_1d0bhrpgd4.s[5]++;
  return h;
}; // This is a djb2 hashing function

cov_1d0bhrpgd4.s[6]++;
const hash = x => {
  cov_1d0bhrpgd4.f[1]++;
  cov_1d0bhrpgd4.s[7]++;
  return phash(SEED, x) >>> 0;
};

var cov_xc7xaz5ux = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/css.js",
      hash$$1 = "841d30fb72fd3117be8a278ae977b29ec07d7dbe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/css.js",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 19,
          column: 65
        }
      },
      "1": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "2": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 39
        }
      },
      "3": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "4": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "5": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 32,
          column: 8
        }
      },
      "6": {
        start: {
          line: 35,
          column: 15
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "7": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "8": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "9": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 41,
          column: 16
        }
      },
      "10": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "11": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "12": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 27
        }
      },
      "13": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "14": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 42
        }
      },
      "15": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "16": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 57,
          column: 38
        }
      },
      "17": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 61,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "hashCssObject",
        decl: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "keyframesToBlock",
        decl: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 32
          }
        },
        loc: {
          start: {
            line: 22,
            column: 72
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 22
      },
      "2": {
        name: "declarationsToBlock",
        decl: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 35
          }
        },
        loc: {
          start: {
            line: 44,
            column: 59
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 44
      },
      "3": {
        name: "keyframesBlockToRule",
        decl: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 36
          }
        },
        loc: {
          start: {
            line: 56,
            column: 72
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 56
      },
      "4": {
        name: "fontFaceBlockToRule",
        decl: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 60,
            column: 35
          }
        },
        loc: {
          start: {
            line: 60,
            column: 71
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 60
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }, {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        }, {
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 26,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: 26,
            column: 17
          },
          end: {
            line: 26,
            column: 72
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 31
          }
        }, {
          start: {
            line: 48,
            column: 35
          },
          end: {
            line: 48,
            column: 58
          }
        }],
        line: 48
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash$$1) {
    return coverage[path];
  }

  coverageData.hash = hash$$1;
  return coverage[path] = coverageData;
}();

function hashCssObject(cssObject) {
  cov_xc7xaz5ux.f[0]++;
  cov_xc7xaz5ux.s[0]++;
  return generateAlphabeticName(hash(JSON.stringify(cssObject)));
}
function keyframesToBlock(keyframes) {
  cov_xc7xaz5ux.f[1]++;
  cov_xc7xaz5ux.s[1]++;

  if (process.env.NODE_ENV !== "production") {
    cov_xc7xaz5ux.b[0][0]++;
    cov_xc7xaz5ux.s[2]++;
    validateKeyframesObject(keyframes);
  } else {
    cov_xc7xaz5ux.b[0][1]++;
  }

  cov_xc7xaz5ux.s[3]++;

  if ((cov_xc7xaz5ux.b[2][0]++, process.env.NODE_ENV !== "production") && (cov_xc7xaz5ux.b[2][1]++, typeof Object.getPrototypeOf(keyframes) !== "undefined")) {
    cov_xc7xaz5ux.b[1][0]++;
    cov_xc7xaz5ux.s[4]++;

    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {
      cov_xc7xaz5ux.b[3][0]++;
      cov_xc7xaz5ux.s[5]++;
      // eslint-disable-next-line no-console
      console.warn("Only plain objects should be used as animation values. Unexpectedly recieved:", keyframes);
    } else {
      cov_xc7xaz5ux.b[3][1]++;
    }
  } else {
    cov_xc7xaz5ux.b[1][1]++;
  }

  let result = (cov_xc7xaz5ux.s[6]++, "");
  cov_xc7xaz5ux.s[7]++;

  for (const animationState in keyframes) {
    cov_xc7xaz5ux.s[8]++;
    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;
  }

  cov_xc7xaz5ux.s[9]++;
  return result;
}
function declarationsToBlock(style) {
  cov_xc7xaz5ux.f[2]++;
  let css = (cov_xc7xaz5ux.s[10]++, "");
  cov_xc7xaz5ux.s[11]++;

  for (const prop in style) {
    const val = (cov_xc7xaz5ux.s[12]++, style[prop]);
    cov_xc7xaz5ux.s[13]++;

    if ((cov_xc7xaz5ux.b[5][0]++, typeof val === "string") || (cov_xc7xaz5ux.b[5][1]++, typeof val === "number")) {
      cov_xc7xaz5ux.b[4][0]++;
      cov_xc7xaz5ux.s[14]++;
      css += `${hyphenateStyleName(prop)}:${val};`;
    } else {
      cov_xc7xaz5ux.b[4][1]++;
    }
  } // trim trailing semicolon


  cov_xc7xaz5ux.s[15]++;
  return css.slice(0, -1);
}
function keyframesBlockToRule(id, block) {
  cov_xc7xaz5ux.f[3]++;
  cov_xc7xaz5ux.s[16]++;
  return `@keyframes ${id}{${block}}`;
}
function fontFaceBlockToRule(id, block) {
  cov_xc7xaz5ux.f[4]++;
  cov_xc7xaz5ux.s[17]++;
  return `@font-face{font-family:${id};${block}}`;
}

var cov_4yip3xipv = function () {
  var path = "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/server/server.js",
      hash = "c5082bd87d0cdde7b7ae008a56f41d5596d8aaef",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/Development/styletron/packages/styletron-engine-monolithic/src/server/server.js",
    statementMap: {
      "0": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 27
        }
      },
      "1": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 20
        }
      },
      "2": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 43
        }
      },
      "3": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "4": {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "5": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 55
        }
      },
      "6": {
        start: {
          line: 56,
          column: 21
        },
        end: {
          line: 56,
          column: 44
        }
      },
      "7": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "8": {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 61,
          column: 8
        }
      },
      "9": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 55
        }
      },
      "10": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 50
        }
      },
      "11": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "12": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 72,
          column: 8
        }
      },
      "13": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 65
        }
      },
      "14": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 78,
          column: 52
        }
      },
      "15": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 84,
          column: 6
        }
      },
      "16": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 64
        }
      },
      "17": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 51
        }
      },
      "18": {
        start: {
          line: 97,
          column: 13
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "19": {
        start: {
          line: 98,
          column: 2
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "20": {
        start: {
          line: 99,
          column: 18
        },
        end: {
          line: 99,
          column: 27
        }
      },
      "21": {
        start: {
          line: 100,
          column: 48
        },
        end: {
          line: 100,
          column: 59
        }
      },
      "22": {
        start: {
          line: 101,
          column: 18
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "23": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 65
        }
      },
      "24": {
        start: {
          line: 109,
          column: 2
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "25": {
        start: {
          line: 113,
          column: 15
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "26": {
        start: {
          line: 114,
          column: 2
        },
        end: {
          line: 121,
          column: 3
        }
      },
      "27": {
        start: {
          line: 115,
          column: 18
        },
        end: {
          line: 115,
          column: 29
        }
      },
      "28": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "29": {
        start: {
          line: 117,
          column: 6
        },
        end: {
          line: 117,
          column: 27
        }
      },
      "30": {
        start: {
          line: 118,
          column: 11
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "31": {
        start: {
          line: 119,
          column: 6
        },
        end: {
          line: 119,
          column: 38
        }
      },
      "32": {
        start: {
          line: 122,
          column: 2
        },
        end: {
          line: 122,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        },
        loc: {
          start: {
            line: 37,
            column: 36
          },
          end: {
            line: 40,
            column: 3
          }
        },
        line: 37
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 42,
            column: 3
          }
        },
        loc: {
          start: {
            line: 42,
            column: 43
          },
          end: {
            line: 53,
            column: 3
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        loc: {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 64,
            column: 3
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 2
          },
          end: {
            line: 66,
            column: 3
          }
        },
        loc: {
          start: {
            line: 66,
            column: 54
          },
          end: {
            line: 75,
            column: 3
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 77,
            column: 2
          },
          end: {
            line: 77,
            column: 3
          }
        },
        loc: {
          start: {
            line: 77,
            column: 34
          },
          end: {
            line: 85,
            column: 3
          }
        },
        line: 77
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 87,
            column: 2
          },
          end: {
            line: 87,
            column: 3
          }
        },
        loc: {
          start: {
            line: 87,
            column: 65
          },
          end: {
            line: 89,
            column: 3
          }
        },
        line: 87
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 91,
            column: 3
          }
        },
        loc: {
          start: {
            line: 91,
            column: 11
          },
          end: {
            line: 93,
            column: 3
          }
        },
        line: 91
      },
      "7": {
        name: "generateHtmlString",
        decl: {
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 96,
            column: 34
          }
        },
        loc: {
          start: {
            line: 96,
            column: 77
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 96
      },
      "8": {
        name: "attrsToString",
        decl: {
          start: {
            line: 112,
            column: 9
          },
          end: {
            line: 112,
            column: 22
          }
        },
        loc: {
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 123,
            column: 1
          }
        },
        line: 112
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 14
          },
          end: {
            line: 37,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 37,
            column: 32
          },
          end: {
            line: 37,
            column: 34
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 20
          }
        }, {
          start: {
            line: 38,
            column: 24
          },
          end: {
            line: 38,
            column: 26
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        }, {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 24
          }
        }, {
          start: {
            line: 48,
            column: 28
          },
          end: {
            line: 48,
            column: 30
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 14
          },
          end: {
            line: 52,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 14
          },
          end: {
            line: 52,
            column: 30
          }
        }, {
          start: {
            line: 52,
            column: 34
          },
          end: {
            line: 52,
            column: 36
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }, {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 59,
            column: 11
          },
          end: {
            line: 59,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 11
          },
          end: {
            line: 59,
            column: 27
          }
        }, {
          start: {
            line: 59,
            column: 31
          },
          end: {
            line: 59,
            column: 33
          }
        }],
        line: 59
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 14
          },
          end: {
            line: 63,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 14
          },
          end: {
            line: 63,
            column: 30
          }
        }, {
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 36
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }],
        line: 68
      },
      "9": {
        loc: {
          start: {
            line: 70,
            column: 11
          },
          end: {
            line: 70,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 11
          },
          end: {
            line: 70,
            column: 27
          }
        }, {
          start: {
            line: 70,
            column: 31
          },
          end: {
            line: 70,
            column: 33
          }
        }],
        line: 70
      },
      "10": {
        loc: {
          start: {
            line: 74,
            column: 14
          },
          end: {
            line: 74,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 14
          },
          end: {
            line: 74,
            column: 30
          }
        }, {
          start: {
            line: 74,
            column: 34
          },
          end: {
            line: 74,
            column: 36
          }
        }],
        line: 74
      },
      "11": {
        loc: {
          start: {
            line: 87,
            column: 21
          },
          end: {
            line: 87,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 63
          }
        }],
        line: 87
      },
      "12": {
        loc: {
          start: {
            line: 102,
            column: 13
          },
          end: {
            line: 104,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 10
          },
          end: {
            line: 103,
            column: 45
          }
        }, {
          start: {
            line: 104,
            column: 10
          },
          end: {
            line: 104,
            column: 19
          }
        }],
        line: 102
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 118,
            column: 11
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 11
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: 118,
            column: 11
          },
          end: {
            line: 120,
            column: 5
          }
        }],
        line: 118
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class StyletronServer {
  constructor(opts = (cov_4yip3xipv.b[0][0]++, {})) {
    cov_4yip3xipv.f[0]++;
    cov_4yip3xipv.s[0]++;
    this.opts = (cov_4yip3xipv.b[1][0]++, opts) || (cov_4yip3xipv.b[1][1]++, {});
    cov_4yip3xipv.s[1]++;
    this.cache = {};
  }

  renderStyle(styles) {
    cov_4yip3xipv.f[1]++;
    const className = (cov_4yip3xipv.s[2]++, hashCssObject(styles));
    cov_4yip3xipv.s[3]++;

    if (!this.cache[className]) {
      cov_4yip3xipv.b[2][0]++;
      cov_4yip3xipv.s[4]++;
      this.cache[className] = injectStylePrefixed(styles, className, (cov_4yip3xipv.b[3][0]++, this.opts.prefix) || (cov_4yip3xipv.b[3][1]++, ""), Boolean(this.opts.strict)).join("");
    } else {
      cov_4yip3xipv.b[2][1]++;
    }

    cov_4yip3xipv.s[5]++;
    return `${(cov_4yip3xipv.b[4][0]++, this.opts.prefix) || (cov_4yip3xipv.b[4][1]++, "")}css-${className}`;
  }

  renderFontFace(fontFace) {
    cov_4yip3xipv.f[2]++;
    const fontName = (cov_4yip3xipv.s[6]++, hashCssObject(fontFace));
    cov_4yip3xipv.s[7]++;

    if (!this.cache[fontName]) {
      cov_4yip3xipv.b[5][0]++;
      cov_4yip3xipv.s[8]++;
      this.cache[fontName] = fontFaceBlockToRule(`${(cov_4yip3xipv.b[6][0]++, this.opts.prefix) || (cov_4yip3xipv.b[6][1]++, "")}font-${fontName}`, declarationsToBlock(fontFace));
    } else {
      cov_4yip3xipv.b[5][1]++;
    }

    cov_4yip3xipv.s[9]++;
    return `${(cov_4yip3xipv.b[7][0]++, this.opts.prefix) || (cov_4yip3xipv.b[7][1]++, "")}font-${fontName}`;
  }

  renderKeyframes(keyframes) {
    cov_4yip3xipv.f[3]++;
    const animationName = (cov_4yip3xipv.s[10]++, hashCssObject(keyframes));
    cov_4yip3xipv.s[11]++;

    if (!this.cache[animationName]) {
      cov_4yip3xipv.b[8][0]++;
      cov_4yip3xipv.s[12]++;
      this.cache[animationName] = keyframesBlockToRule(`${(cov_4yip3xipv.b[9][0]++, this.opts.prefix) || (cov_4yip3xipv.b[9][1]++, "")}animation-${animationName}`, keyframesToBlock(keyframes));
    } else {
      cov_4yip3xipv.b[8][1]++;
    }

    cov_4yip3xipv.s[13]++;
    return `${(cov_4yip3xipv.b[10][0]++, this.opts.prefix) || (cov_4yip3xipv.b[10][1]++, "")}animation-${animationName}`;
  }

  getStylesheets() {
    cov_4yip3xipv.f[4]++;
    const hashedNames = (cov_4yip3xipv.s[14]++, [...Object.keys(this.cache)]);
    cov_4yip3xipv.s[15]++;
    return [{
      css: this.getCss(),
      attrs: {
        "data-hydrate": hashedNames.join(" ")
      }
    }];
  }

  getStylesheetsHtml(className = (cov_4yip3xipv.b[11][0]++, "_styletron_hydrate_")) {
    cov_4yip3xipv.f[5]++;
    cov_4yip3xipv.s[16]++;
    return generateHtmlString(this.getStylesheets(), className);
  }

  getCss() {
    cov_4yip3xipv.f[6]++;
    cov_4yip3xipv.s[17]++;
    return [...Object.values(this.cache)].join("");
  }

}

function generateHtmlString(sheets, className) {
  cov_4yip3xipv.f[7]++;
  let html = (cov_4yip3xipv.s[18]++, "");
  cov_4yip3xipv.s[19]++;

  for (let i = 0; i < sheets.length; i++) {
    const sheet = (cov_4yip3xipv.s[20]++, sheets[i]);

    const _ref = (cov_4yip3xipv.s[21]++, sheet.attrs),
          {
      class: originalClassName
    } = _ref,
          rest = _objectWithoutPropertiesLoose(_ref, ["class"]);

    const attrs = (cov_4yip3xipv.s[22]++, Object.assign({
      class: originalClassName ? (cov_4yip3xipv.b[12][0]++, `${className} ${originalClassName}`) : (cov_4yip3xipv.b[12][1]++, className)
    }, rest));
    cov_4yip3xipv.s[23]++;
    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;
  }

  cov_4yip3xipv.s[24]++;
  return html;
}

function attrsToString(attrs) {
  cov_4yip3xipv.f[8]++;
  let result = (cov_4yip3xipv.s[25]++, "");
  cov_4yip3xipv.s[26]++;

  for (const attr in attrs) {
    const value = (cov_4yip3xipv.s[27]++, attrs[attr]);
    cov_4yip3xipv.s[28]++;

    if (value === true) {
      cov_4yip3xipv.b[13][0]++;
      cov_4yip3xipv.s[29]++;
      result += " " + attr;
    } else {
      cov_4yip3xipv.b[13][1]++;
      cov_4yip3xipv.s[30]++;

      if (value !== false) {
        cov_4yip3xipv.b[14][0]++;
        cov_4yip3xipv.s[31]++;
        result += ` ${attr}="${value}"`;
      } else {
        cov_4yip3xipv.b[14][1]++;
      }
    }
  }

  cov_4yip3xipv.s[32]++;
  return result;
}

test("StyletronServer toCss", t => {
  const styletron = new StyletronServer();
  t.equal(styletron.getCss(), "", "returns empty string when no styles");
  injectFixtureStyles(styletron);
  t.equal(styletron.getCss(), ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}");
  injectFixtureStyles(styletron);
  t.equal(styletron.getCss(), ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}");
  injectFixtureKeyframes(styletron);
  t.equal(styletron.getCss(), ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@keyframes animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}");
  injectFixtureFontFace(styletron);
  t.equal(styletron.getCss(), ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@keyframes animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}@font-face{font-family:font-WNyjs;src:local('Roboto')}");
  t.end();
});
test("StyletronServer getStylesheets", t => {
  const styletron = new StyletronServer();
  t.deepEqual(styletron.getStylesheets(), [{
    css: "",
    attrs: {
      "data-hydrate": ""
    }
  }], "no styles yields array with single empty stylesheet");
  injectFixtureStyles(styletron);
  t.deepEqual(styletron.getStylesheets(), [{
    css: ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}",
    attrs: {
      "data-hydrate": "gMxcYW PKJb ihRfbR eaGfYw"
    }
  }]);
  injectFixtureKeyframes(styletron);
  t.deepEqual(styletron.getStylesheets(), [{
    css: ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@keyframes animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "gMxcYW PKJb ihRfbR eaGfYw blGUxF"
    }
  }]);
  injectFixtureFontFace(styletron);
  t.deepEqual(styletron.getStylesheets(), [{
    css: ".css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@keyframes animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}@font-face{font-family:font-WNyjs;src:local('Roboto')}",
    attrs: {
      "data-hydrate": "gMxcYW PKJb ihRfbR eaGfYw blGUxF WNyjs"
    }
  }]);
  t.end();
});
test("StyletronServer getStylesheetsHtml ", t => {
  const styletron = new StyletronServer();
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_" data-hydrate=""></style>', "returns single empty stylesheet when no styles");
  injectFixtureStyles(styletron);
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_" data-hydrate="gMxcYW PKJb ihRfbR eaGfYw">.css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}</style>');
  injectFixtureKeyframes(styletron);
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_" data-hydrate="gMxcYW PKJb ihRfbR eaGfYw blGUxF">.css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@keyframes animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}</style>');
  injectFixtureFontFace(styletron);
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_" data-hydrate="gMxcYW PKJb ihRfbR eaGfYw blGUxF WNyjs">.css-gMxcYW{color:red;border:1px solid black;}.css-gMxcYW:hover{color:green;}@media (min-width: 200px){.css-gMxcYW{color:hotpink;}.css-gMxcYW:hover{color:red;}}@media (min-width: 400px){.css-gMxcYW{color:violet;}}@supports (display: grid){div{display:-ms-grid;display:grid;}}.css-eaGfYw{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@keyframes animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}@font-face{font-family:font-WNyjs;src:local(\'Roboto\')}</style>');
  t.end();
});
test("StyletronServer prefix option", t => {
  const styletron = new StyletronServer({
    prefix: "foo_"
  });
  t.equal(styletron.renderStyle({
    color: "red"
  }), "foo_css-jZABor");
  t.equal(injectFixtureFontFace(styletron), "foo_font-WNyjs");
  t.equal(injectFixtureKeyframes(styletron), "foo_animation-blGUxF");
  t.deepEqual(styletron.getStylesheets(), [{
    css: ".foo_css-jZABor{color:red;}@font-face{font-family:foo_font-WNyjs;src:local('Roboto')}@keyframes foo_animation-blGUxF{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "jZABor WNyjs blGUxF"
    }
  }]);
  t.end();
});
test("StyletronServer deeply nested rules", t => {
  const styletron = new StyletronServer({});
  t.equal(styletron.renderStyle({
    "@supports (flex-wrap: wrap)": {
      "@media (min-width: 50em)": {
        ":hover": {
          background: "blue"
        }
      }
    }
  }), "css-gPyDTX");
  t.deepEqual(styletron.getStylesheets(), [{
    css: "@supports (flex-wrap: wrap){@media (min-width: 50em){.css-gPyDTX:hover{background:blue;}}}",
    attrs: {
      "data-hydrate": "gPyDTX"
    }
  }]);
  t.end();
});

function injectFixtureStyles(styletron) {
  styletron.renderStyle({
    color: "red",
    border: "1px solid black",
    ":hover": {
      color: "green"
    },
    "@media (min-width: 200px)": {
      color: "hotpink",
      ":hover": {
        color: "red"
      }
    },
    "@media (min-width: 400px)": {
      color: "violet"
    },
    "@supports (display: grid)": {
      div: {
        display: "grid"
      }
    }
  });
  styletron.renderStyle({
    zIndex: void 0 // Should be silently ignored

  });
  styletron.renderStyle({
    // null values were historically supported (albeit erronesouly)
    opacity: null // Should be silently ignored

  });
  styletron.renderStyle({
    userSelect: "none"
  });
}

function injectFixtureKeyframes(styletron) {
  return styletron.renderKeyframes({
    from: {
      color: "purple"
    },
    "50%": {
      color: "yellow"
    },
    to: {
      color: "orange"
    }
  });
}

function injectFixtureFontFace(styletron) {
  return styletron.renderFontFace({
    src: "local('Roboto')"
  });
}
//# sourceMappingURL=node.js.map
