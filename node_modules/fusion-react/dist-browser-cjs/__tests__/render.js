"use strict";

var React = _interopRequireWildcard(require("react"));

var _fusionTestUtils = require("fusion-test-utils");

var _index = _interopRequireWildcard(require("../index"));

var _prepared = _interopRequireDefault(require("../async/prepared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
test('custom render function', async () => {
  let didRender = false;
  const app = new _index.default(React.createElement('span', null, 'hello'), (el, ctx) => {
    expect(el).toBeTruthy();
    expect(ctx).toBeTruthy();
    didRender = true;
    return 10;
  });
  const simulator = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await simulator.render('/');
  expect(ctx.element).toBeTruthy();
  expect(ctx.rendered).toBe(10);
  expect(didRender).toBeTruthy();
});
test('runs prepare', async done => {
  let called = false;
  const Root = (0, _prepared.default)(() => {
    called = true;
    return Promise.resolve();
  })(() => {
    return React.createElement('span', null, 'hello');
  });
  const app = new _index.default(React.createElement(Root), () => {
    expect(called).toBe(true);
    done();
  });
  const simulator = (0, _fusionTestUtils.getSimulator)(app);
  await simulator.render('/');
});
test('skip prepare', async done => {
  const Root = (0, _prepared.default)(() => {
    // $FlowFixMe
    done.fail('Should not call this');
    return Promise.resolve();
  })(() => {
    return React.createElement('span', null, 'hello');
  });
  const app = new _index.default(React.createElement(Root), () => {
    done();
  });
  app.register(_index.SkipPrepareToken, true);
  const simulator = (0, _fusionTestUtils.getSimulator)(app);
  await simulator.render('/');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci5qcyJdLCJuYW1lcyI6WyJ0ZXN0IiwiZGlkUmVuZGVyIiwiYXBwIiwiQXBwIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiZWwiLCJjdHgiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwic2ltdWxhdG9yIiwicmVuZGVyIiwiZWxlbWVudCIsInJlbmRlcmVkIiwidG9CZSIsImRvbmUiLCJjYWxsZWQiLCJSb290IiwiUHJvbWlzZSIsInJlc29sdmUiLCJmYWlsIiwicmVnaXN0ZXIiLCJTa2lwUHJlcGFyZVRva2VuIl0sIm1hcHBpbmdzIjoiOztBQVFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQVhBOzs7Ozs7O0FBYUFBLElBQUksQ0FBQyx3QkFBRCxFQUEyQixZQUFZO0FBQ3pDLE1BQUlDLFNBQVMsR0FBRyxLQUFoQjtBQUNBLFFBQU1DLEdBQUcsR0FBRyxJQUFJQyxjQUFKLENBQVFDLEtBQUssQ0FBQ0MsYUFBTixDQUFvQixNQUFwQixFQUE0QixJQUE1QixFQUFrQyxPQUFsQyxDQUFSLEVBQW9ELENBQUNDLEVBQUQsRUFBS0MsR0FBTCxLQUFhO0FBQzNFQyxJQUFBQSxNQUFNLENBQUNGLEVBQUQsQ0FBTixDQUFXRyxVQUFYO0FBQ0FELElBQUFBLE1BQU0sQ0FBQ0QsR0FBRCxDQUFOLENBQVlFLFVBQVo7QUFDQVIsSUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDQSxXQUFPLEVBQVA7QUFDRCxHQUxXLENBQVo7QUFNQSxRQUFNUyxTQUFTLEdBQUcsbUNBQWFSLEdBQWIsQ0FBbEI7QUFDQSxRQUFNSyxHQUFHLEdBQUcsTUFBTUcsU0FBUyxDQUFDQyxNQUFWLENBQWlCLEdBQWpCLENBQWxCO0FBQ0FILEVBQUFBLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDSyxPQUFMLENBQU4sQ0FBb0JILFVBQXBCO0FBQ0FELEVBQUFBLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDTSxRQUFMLENBQU4sQ0FBcUJDLElBQXJCLENBQTBCLEVBQTFCO0FBQ0FOLEVBQUFBLE1BQU0sQ0FBQ1AsU0FBRCxDQUFOLENBQWtCUSxVQUFsQjtBQUNELENBYkcsQ0FBSjtBQWVBVCxJQUFJLENBQUMsY0FBRCxFQUFpQixNQUFNZSxJQUFOLElBQWM7QUFDakMsTUFBSUMsTUFBTSxHQUFHLEtBQWI7QUFDQSxRQUFNQyxJQUFJLEdBQUcsdUJBQVMsTUFBTTtBQUMxQkQsSUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDQSxXQUFPRSxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNELEdBSFksRUFHVixNQUFNO0FBQ1AsV0FBT2YsS0FBSyxDQUFDQyxhQUFOLENBQW9CLE1BQXBCLEVBQTRCLElBQTVCLEVBQWtDLE9BQWxDLENBQVA7QUFDRCxHQUxZLENBQWI7QUFNQSxRQUFNSCxHQUFHLEdBQUcsSUFBSUMsY0FBSixDQUFRQyxLQUFLLENBQUNDLGFBQU4sQ0FBb0JZLElBQXBCLENBQVIsRUFBbUMsTUFBTTtBQUNuRFQsSUFBQUEsTUFBTSxDQUFDUSxNQUFELENBQU4sQ0FBZUYsSUFBZixDQUFvQixJQUFwQjtBQUNBQyxJQUFBQSxJQUFJO0FBQ0wsR0FIVyxDQUFaO0FBSUEsUUFBTUwsU0FBUyxHQUFHLG1DQUFhUixHQUFiLENBQWxCO0FBQ0EsUUFBTVEsU0FBUyxDQUFDQyxNQUFWLENBQWlCLEdBQWpCLENBQU47QUFDRCxDQWRHLENBQUo7QUFnQkFYLElBQUksQ0FBQyxjQUFELEVBQWlCLE1BQU1lLElBQU4sSUFBYztBQUNqQyxRQUFNRSxJQUFJLEdBQUcsdUJBQVMsTUFBTTtBQUMxQjtBQUNBRixJQUFBQSxJQUFJLENBQUNLLElBQUwsQ0FBVSxzQkFBVjtBQUNBLFdBQU9GLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0QsR0FKWSxFQUlWLE1BQU07QUFDUCxXQUFPZixLQUFLLENBQUNDLGFBQU4sQ0FBb0IsTUFBcEIsRUFBNEIsSUFBNUIsRUFBa0MsT0FBbEMsQ0FBUDtBQUNELEdBTlksQ0FBYjtBQU9BLFFBQU1ILEdBQUcsR0FBRyxJQUFJQyxjQUFKLENBQVFDLEtBQUssQ0FBQ0MsYUFBTixDQUFvQlksSUFBcEIsQ0FBUixFQUFtQyxNQUFNO0FBQ25ERixJQUFBQSxJQUFJO0FBQ0wsR0FGVyxDQUFaO0FBR0FiLEVBQUFBLEdBQUcsQ0FBQ21CLFFBQUosQ0FBYUMsdUJBQWIsRUFBK0IsSUFBL0I7QUFDQSxRQUFNWixTQUFTLEdBQUcsbUNBQWFSLEdBQWIsQ0FBbEI7QUFDQSxRQUFNUSxTQUFTLENBQUNDLE1BQVYsQ0FBaUIsR0FBakIsQ0FBTjtBQUNELENBZEcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Z2V0U2ltdWxhdG9yfSBmcm9tICdmdXNpb24tdGVzdC11dGlscyc7XG5pbXBvcnQgQXBwLCB7U2tpcFByZXBhcmVUb2tlbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHByZXBhcmVkIGZyb20gJy4uL2FzeW5jL3ByZXBhcmVkJztcblxudGVzdCgnY3VzdG9tIHJlbmRlciBmdW5jdGlvbicsIGFzeW5jICgpID0+IHtcbiAgbGV0IGRpZFJlbmRlciA9IGZhbHNlO1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBudWxsLCAnaGVsbG8nKSwgKGVsLCBjdHgpID0+IHtcbiAgICBleHBlY3QoZWwpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY3R4KS50b0JlVHJ1dGh5KCk7XG4gICAgZGlkUmVuZGVyID0gdHJ1ZTtcbiAgICByZXR1cm4gMTA7XG4gIH0pO1xuICBjb25zdCBzaW11bGF0b3IgPSBnZXRTaW11bGF0b3IoYXBwKTtcbiAgY29uc3QgY3R4ID0gYXdhaXQgc2ltdWxhdG9yLnJlbmRlcignLycpO1xuICBleHBlY3QoY3R4LmVsZW1lbnQpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGN0eC5yZW5kZXJlZCkudG9CZSgxMCk7XG4gIGV4cGVjdChkaWRSZW5kZXIpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG50ZXN0KCdydW5zIHByZXBhcmUnLCBhc3luYyBkb25lID0+IHtcbiAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICBjb25zdCBSb290ID0gcHJlcGFyZWQoKCkgPT4ge1xuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9KSgoKSA9PiB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBudWxsLCAnaGVsbG8nKTtcbiAgfSk7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoUmVhY3QuY3JlYXRlRWxlbWVudChSb290KSwgKCkgPT4ge1xuICAgIGV4cGVjdChjYWxsZWQpLnRvQmUodHJ1ZSk7XG4gICAgZG9uZSgpO1xuICB9KTtcbiAgY29uc3Qgc2ltdWxhdG9yID0gZ2V0U2ltdWxhdG9yKGFwcCk7XG4gIGF3YWl0IHNpbXVsYXRvci5yZW5kZXIoJy8nKTtcbn0pO1xuXG50ZXN0KCdza2lwIHByZXBhcmUnLCBhc3luYyBkb25lID0+IHtcbiAgY29uc3QgUm9vdCA9IHByZXBhcmVkKCgpID0+IHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgZG9uZS5mYWlsKCdTaG91bGQgbm90IGNhbGwgdGhpcycpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSkoKCkgPT4ge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgbnVsbCwgJ2hlbGxvJyk7XG4gIH0pO1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm9vdCksICgpID0+IHtcbiAgICBkb25lKCk7XG4gIH0pO1xuICBhcHAucmVnaXN0ZXIoU2tpcFByZXBhcmVUb2tlbiwgdHJ1ZSk7XG4gIGNvbnN0IHNpbXVsYXRvciA9IGdldFNpbXVsYXRvcihhcHApO1xuICBhd2FpdCBzaW11bGF0b3IucmVuZGVyKCcvJyk7XG59KTtcbiJdfQ==