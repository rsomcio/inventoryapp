"use strict";

var React = _interopRequireWildcard(require("react"));

var _fusionCore = require("fusion-core");

var _fusionTestUtils = require("fusion-test-utils");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = _interopRequireDefault(require("../index"));

var _hoc = _interopRequireDefault(require("../hoc"));

var _plugin = _interopRequireDefault(require("../plugin"));

var _justCompose = _interopRequireDefault(require("just-compose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
test('hoc#legacy', async () => {
  const withTest = _hoc.default.create('test');

  const testProvides = {
    hello: 'world'
  };
  let didRender = false;

  function TestComponent(props) {
    didRender = true;
    expect(props.test).toStrictEqual(testProvides);
    expect(props.ctx).toBeFalsy();
    return React.createElement('div', null, 'hello');
  }

  const testPlugin = _plugin.default.create('test', (0, _fusionCore.createPlugin)({
    provides: () => testProvides
  }));

  const element = React.createElement(withTest(TestComponent));
  const app = new _index.default(element);
  app.register(testPlugin);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
});
test('hoc#legacy with mapProvidesToProps', async () => {
  const withTest = _hoc.default.create('test', provides => {
    return {
      mapped: provides
    };
  });

  const testProvides = {
    hello: 'world'
  };
  let didRender = false;

  function TestComponent(props) {
    didRender = true;
    expect(props.mapped).toStrictEqual(testProvides);
    return React.createElement('div', null, 'hello');
  }

  const testPlugin = _plugin.default.create('test', (0, _fusionCore.createPlugin)({
    provides: () => testProvides
  }));

  const element = React.createElement(withTest(TestComponent));
  const app = new _index.default(element);
  app.register(testPlugin);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
});
test('hoc#legacy with custom provider', async () => {
  const withTest = _hoc.default.create('test');

  const testProvides = {
    hello: 'world'
  };
  let didRender = false;
  let didUseCustomProvider = false;

  function TestComponent(props) {
    didRender = true;
    expect(props.test).toStrictEqual(testProvides);
    return React.createElement('div', null, 'hello');
  }

  class CustomProvider extends React.Component {
    getChildContext() {
      return {
        test: this.props.provides
      };
    }

    render() {
      didUseCustomProvider = true;
      expect(this.props.ctx).toBeTruthy();
      return React.Children.only(this.props.children);
    }

  }

  CustomProvider.childContextTypes = {
    test: _propTypes.default.any.isRequired
  };

  const testPlugin = _plugin.default.create('test', (0, _fusionCore.createPlugin)({
    provides: () => testProvides
  }), CustomProvider);

  const element = React.createElement(withTest(TestComponent));
  const app = new _index.default(element);
  app.register(testPlugin);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
  expect(didUseCustomProvider).toBeTruthy();
});
test('hoc', async () => {
  const TestToken1 = (0, _fusionCore.createToken)('test-token-1');
  const TestToken2 = (0, _fusionCore.createToken)('test-token-2');
  const TestToken3 = (0, _fusionCore.createToken)('test-token-3');
  const withTest = (0, _justCompose.default)(_hoc.default.create('test1', undefined, TestToken1), _hoc.default.create('test2', undefined, TestToken2), _hoc.default.create('test3', provides => ({
    mapped: provides
  }), TestToken3));
  const testProvides1 = {
    hello: 1
  };
  const testProvides2 = {
    hello: 2
  };
  const testProvides3 = {
    hello: 3
  };
  let didRender = false;

  function TestComponent(props) {
    didRender = true;
    expect(props.test1).toStrictEqual(testProvides1);
    expect(props.test2).toStrictEqual(testProvides2);
    expect(props.mapped).toStrictEqual(testProvides3);
    expect(props.ctx).toBeFalsy();
    return React.createElement('div', null, 'hello');
  }

  const testPlugin1 = (0, _fusionCore.createPlugin)({
    provides: () => testProvides1
  });

  const testPlugin2 = _plugin.default.create('test2', (0, _fusionCore.createPlugin)({
    provides: () => testProvides2
  }));

  const testPlugin3 = (0, _fusionCore.createPlugin)({
    provides: () => testProvides3
  });
  const element = React.createElement(withTest(TestComponent));
  const app = new _index.default(element);
  app.register(TestToken1, testPlugin1);
  app.register(TestToken2, testPlugin2);
  app.register(TestToken3, testPlugin3);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,