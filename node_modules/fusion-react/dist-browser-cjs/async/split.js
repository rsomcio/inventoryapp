"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withAsyncComponent;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _prepared = _interopRequireDefault(require("./prepared.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const contextTypes = {
  splitComponentLoaders: _propTypes.default.array.isRequired
};

if (false) {
  // $FlowFixMe
  contextTypes.markAsCritical = _propTypes.default.func;
}

function withAsyncComponent({
  defer,
  load,
  LoadingComponent,
  ErrorComponent
}) {
  let AsyncComponent = null;
  let error = null;
  const metadata = {
    chunkIds: [],
    i18nKeys: []
  };

  function WithAsyncComponent(props) {
    if (true) {
      let promise = load(); // $FlowFixMe

      let id = promise.__MODULE_ID;

      if (typeof __webpack_modules__ !== 'undefined' && __webpack_modules__[id]) {
        // If module is already loaded, it can be synchronously imported
        AsyncComponent = __webpack_require__(id).default;
      }
    }

    if (error) {
      return React.createElement(ErrorComponent, {
        error: error
      });
    }

    if (!AsyncComponent) {
      return React.createElement(LoadingComponent, null);
    }

    return React.createElement(AsyncComponent, props);
  }

  return (0, _prepared.default)((props, context) => {
    if (AsyncComponent) {
      if (false && context.markAsCritical) {
        metadata.chunkIds.forEach(chunkId => {
          context.markAsCritical(chunkId);
        });
      }

      return Promise.resolve(AsyncComponent);
    }

    let componentPromise;

    try {
      componentPromise = load();
    } catch (e) {
      componentPromise = Promise.reject(e);
    } // $FlowFixMe


    metadata.chunkIds = componentPromise.__CHUNK_IDS || []; // $FlowFixMe

    metadata.i18nKeys = componentPromise.__I18N_KEYS || [];

    if (false && context.markAsCritical) {
      metadata.chunkIds.forEach(chunkId => {
        context.markAsCritical(chunkId);
      });
    }

    const loadPromises = [componentPromise, ...context.splitComponentLoaders.map(loader => loader(metadata.chunkIds, metadata))];
    return Promise.all(loadPromises).then(([asyncComponent]) => {
      // Note: .default is toolchain specific, breaks w/ CommonJS exports
      AsyncComponent = asyncComponent.default;

      if (AsyncComponent === undefined) {
        throw new Error('Bundle does not contain a default export');
      }
    }).catch(err => {
      error = err;
      if (true) setTimeout(() => {
        throw err;
      }); // log error
    });
  }, {
    defer,
    contextTypes,
    forceUpdate: true
  })(WithAsyncComponent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwbGl0LmpzIl0sIm5hbWVzIjpbImNvbnRleHRUeXBlcyIsInNwbGl0Q29tcG9uZW50TG9hZGVycyIsIlByb3BUeXBlcyIsImFycmF5IiwiaXNSZXF1aXJlZCIsIm1hcmtBc0NyaXRpY2FsIiwiZnVuYyIsIndpdGhBc3luY0NvbXBvbmVudCIsImRlZmVyIiwibG9hZCIsIkxvYWRpbmdDb21wb25lbnQiLCJFcnJvckNvbXBvbmVudCIsIkFzeW5jQ29tcG9uZW50IiwiZXJyb3IiLCJtZXRhZGF0YSIsImNodW5rSWRzIiwiaTE4bktleXMiLCJXaXRoQXN5bmNDb21wb25lbnQiLCJwcm9wcyIsInByb21pc2UiLCJpZCIsIl9fTU9EVUxFX0lEIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkZWZhdWx0IiwiY29udGV4dCIsImZvckVhY2giLCJjaHVua0lkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb21wb25lbnRQcm9taXNlIiwiZSIsInJlamVjdCIsIl9fQ0hVTktfSURTIiwiX19JMThOX0tFWVMiLCJsb2FkUHJvbWlzZXMiLCJtYXAiLCJsb2FkZXIiLCJhbGwiLCJ0aGVuIiwiYXN5bmNDb21wb25lbnQiLCJ1bmRlZmluZWQiLCJFcnJvciIsImNhdGNoIiwiZXJyIiwic2V0VGltZW91dCIsImZvcmNlVXBkYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBUUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBVkE7Ozs7Ozs7QUFlQSxNQUFNQSxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLHFCQUFxQixFQUFFQyxtQkFBVUMsS0FBVixDQUFnQkM7QUFEcEIsQ0FBckI7O0FBSUEsV0FBYztBQUNaO0FBQ0FKLEVBQUFBLFlBQVksQ0FBQ0ssY0FBYixHQUE4QkgsbUJBQVVJLElBQXhDO0FBQ0Q7O0FBRWMsU0FBU0Msa0JBQVQsQ0FBb0M7QUFDakRDLEVBQUFBLEtBRGlEO0FBRWpEQyxFQUFBQSxJQUZpRDtBQUdqREMsRUFBQUEsZ0JBSGlEO0FB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QixNQUFBQSxLQUFLLEdBQUcrQixHQUFSO0FBQ0EsZ0JBQ0VDLFVBQVUsQ0FBQyxNQUFNO0FBQ2YsY0FBTUQsR0FBTjtBQUNELE9BRlMsQ0FBVixDQUhVLENBS047QUFDUCxLQWRJLENBQVA7QUFlRCxHQW5ESSxFQW9ETDtBQUFDcEMsSUFBQUEsS0FBRDtBQUFRUixJQUFBQSxZQUFSO0FBQXNCOEMsSUFBQUEsV0FBVyxFQUFFO0FBQW5DLEdBcERLLEVBcURMN0Isa0JBckRLLENBQVA7QUFzREQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHByZXBhcmVkIGZyb20gJy4vcHJlcGFyZWQuanMnO1xuXG5kZWNsYXJlIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fOiB7W3N0cmluZ106IGFueX07XG5kZWNsYXJlIHZhciBfX3dlYnBhY2tfcmVxdWlyZV9fOiBhbnkgPT4gYW55O1xuXG5jb25zdCBjb250ZXh0VHlwZXMgPSB7XG4gIHNwbGl0Q29tcG9uZW50TG9hZGVyczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG59O1xuXG5pZiAoX19OT0RFX18pIHtcbiAgLy8gJEZsb3dGaXhNZVxuICBjb250ZXh0VHlwZXMubWFya0FzQ3JpdGljYWwgPSBQcm9wVHlwZXMuZnVuYztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aEFzeW5jQ29tcG9uZW50PENvbmZpZz4oe1xuICBkZWZlcixcbiAgbG9hZCxcbiAgTG9hZGluZ0NvbXBvbmVudCxcbiAgRXJyb3JDb21wb25lbnQsXG59OiB7XG4gIGRlZmVyPzogYm9vbGVhbixcbiAgbG9hZDogKCkgPT4gUHJvbWlzZTx7ZGVmYXVsdDogUmVhY3QuQ29tcG9uZW50VHlwZTxDb25maWc+fT4sXG4gIExvYWRpbmdDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PixcbiAgRXJyb3JDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55Pixcbn0pOiBSZWFjdC5Db21wb25lbnRUeXBlPENvbmZpZz4ge1xuICBsZXQgQXN5bmNDb21wb25lbnQgPSBudWxsO1xuICBsZXQgZXJyb3IgPSBudWxsO1xuICBjb25zdCBtZXRhZGF0YSA9IHtcbiAgICBjaHVua0lkczogW10sXG4gICAgaTE4bktleXM6IFtdLFxuICB9O1xuXG4gIGZ1bmN0aW9uIFdpdGhBc3luY0NvbXBvbmVudChwcm9wcykge1xuICAgIGlmIChfX0JST1dTRVJfXykge1xuICAgICAgbGV0IHByb21pc2UgPSBsb2FkKCk7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBsZXQgaWQgPSBwcm9taXNlLl9fTU9EVUxFX0lEO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBfX3dlYnBhY2tfbW9kdWxlc19fICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBfX3dlYnBhY2tfbW9kdWxlc19fW2lkXVxuICAgICAgKSB7XG4gICAgICAgIC8vIElmIG1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZCwgaXQgY2FuIGJlIHN5bmNocm9ub3VzbHkgaW1wb3J0ZWRcbiAgICAgICAgQXN5bmNDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKS5kZWZhdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIDxFcnJvckNvbXBvbmVudCBlcnJvcj17ZXJyb3J9IC8+O1xuICAgIH1cbiAgICBpZiAoIUFzeW5jQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gPExvYWRpbmdDb21wb25lbnQgLz47XG4gICAgfVxuICAgIHJldHVybiA8QXN5bmNDb21wb25lbnQgey4uLnByb3BzfSAvPjtcbiAgfVxuXG4gIHJldHVybiBwcmVwYXJlZChcbiAgICAocHJvcHMsIGNvbnRleHQpID0+IHtcbiAgICAgIGlmIChBc3luY0NvbXBvbmVudCkge1xuICAgICAgICBpZiAoX19OT0RFX18gJiYgY29udGV4dC5tYXJrQXNDcml0aWNhbCkge1xuICAgICAgICAgIG1ldGFkYXRhLmNodW5rSWRzLmZvckVhY2goY2h1bmtJZCA9PiB7XG4gICAgICAgICAgICBjb250ZXh0Lm1hcmtBc0NyaXRpY2FsKGNodW5rSWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoQXN5bmNDb21wb25lbnQpO1xuICAgICAgfVxuXG4gICAgICBsZXQgY29tcG9uZW50UHJvbWlzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbXBvbmVudFByb21pc2UgPSBsb2FkKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbXBvbmVudFByb21pc2UgPSAoUHJvbWlzZS5yZWplY3QoZSk6IGFueSk7XG4gICAgICB9XG5cbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIG1ldGFkYXRhLmNodW5rSWRzID0gY29tcG9uZW50UHJvbWlzZS5fX0NIVU5LX0lEUyB8fCBbXTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIG1ldGFkYXRhLmkxOG5LZXlzID0gY29tcG9uZW50UHJvbWlzZS5fX0kxOE5fS0VZUyB8fCBbXTtcblxuICAgICAgaWYgKF9fTk9ERV9fICYmIGNvbnRleHQubWFya0FzQ3JpdGljYWwpIHtcbiAgICAgICAgbWV0YWRhdGEuY2h1bmtJZHMuZm9yRWFjaChjaHVua0lkID0+IHtcbiAgICAgICAgICBjb250ZXh0Lm1hcmtBc0NyaXRpY2FsKGNodW5rSWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZFByb21pc2VzID0gW1xuICAgICAgICBjb21wb25lbnRQcm9taXNlLFxuICAgICAgICAuLi5jb250ZXh0LnNwbGl0Q29tcG9uZW50TG9hZGVycy5tYXAobG9hZGVyID0+XG4gICAgICAgICAgbG9hZGVyKG1ldGFkYXRhLmNodW5rSWRzLCBtZXRhZGF0YSlcbiAgICAgICAgKSxcbiAgICAgIF07XG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChsb2FkUHJvbWlzZXMpXG4gICAgICAgIC50aGVuKChbYXN5bmNDb21wb25lbnRdKSA9PiB7XG4gICAgICAgICAgLy8gTm90ZTogLmRlZmF1bHQgaXMgdG9vbGNoYWluIHNwZWNpZmljLCBicmVha3Mgdy8gQ29tbW9uSlMgZXhwb3J0c1xuICAgICAgICAgIEFzeW5jQ29tcG9uZW50ID0gYXN5bmNDb21wb25lbnQuZGVmYXVsdDtcbiAgICAgICAgICBpZiAoQXN5bmNDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCdW5kbGUgZG9lcyBub3QgY29udGFpbiBhIGRlZmF1bHQgZXhwb3J0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICBpZiAoX19CUk9XU0VSX18pXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSk7IC8vIGxvZyBlcnJvclxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHtkZWZlciwgY29udGV4dFR5cGVzLCBmb3JjZVVwZGF0ZTogdHJ1ZX1cbiAgKShXaXRoQXN5bmNDb21wb25lbnQpO1xufVxuIl19