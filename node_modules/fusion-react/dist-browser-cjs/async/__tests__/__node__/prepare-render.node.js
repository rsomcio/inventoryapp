"use strict";

var React = _interopRequireWildcard(require("react"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _index = require("../../index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-disable react/no-multi-comp */
_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

test('Preparing a hook', done => {
  function Component() {
    const [state] = React.useState(0);
    return React.createElement("span", null, state);
  }

  const app = React.createElement(Component, null);
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    const wrapper = (0, _enzyme.shallow)(app);
    expect(wrapper.find('span').length).toBe(1);
    done();
  });
});
test('Preparing a sync app', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement(SimplePresentational, null);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const app = React.createElement(SimpleComponent, null);
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numConstructors).toBe(1);
    expect(numRenders).toBe(1);
    expect(numChildRenders).toBe(1);
    done();
  });
});
test('Preparing a sync app with nested children', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement("div", null, this.props.children);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const app = React.createElement(SimpleComponent, null, React.createElement(SimplePresentational, null), ";");
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numConstructors).toBe(1);
    expect(numRenders).toBe(1);
    expect(numChildRenders).toBe(1);
    done();
  });
});
test('Preparing a sync app with functional components referencing children', done => {
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;

  function SimpleComponent(props, context) {
    numRenders++;
    return React.createElement("div", null, props.children);
  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncChild = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimplePresentational);
  const app = React.createElement(SimpleComponent, null, React.createElement(AsyncChild, {
    data: "test"
  }));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numRenders).toBe(2);
    expect(numPrepares).toBe(1);
    expect(numChildRenders).toBe(1);
    done();
  });
});
test('Preparing an async app', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement(SimplePresentational, null);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncParent = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimpleComponent);
  const app = React.createElement(AsyncParent, {
    data: "test"
  });
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(1);
    expect(numConstructors).toBe(1);
    expect(numRenders).toBe(1);
    expect(numChildRenders).toBe(1);
    done();
  });
});
test('Preparing an async app with nested asyncs', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement("div", null, this.props.children);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncParent = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimpleComponent);
  const app = React.createElement(AsyncParent, {
    effectId: "1",
    data: "test"
  }, React.createElement(AsyncParent, {
    effectId: "2",
    data: "test"
  }, React.createElement(SimplePresentational, null)));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(2);
    expect(numConstructors).toBe(3);
    expect(numRenders).toBe(3);
    expect(numChildRenders).toBe(1);
    done();
  });
});
test('Preparing an app with sibling async components', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement("div", null, this.props.children);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncParent = (0, _index.prepared)(async props => {
    numPrepares++;
    expect(props.data).toBe('test');
  })(SimpleComponent);
  const app = React.createElement("div", null, React.createElement(AsyncParent, {
    effectId: "1",
    data: "test"
  }, React.createElement(SimplePresentational, null)), React.createElement(AsyncParent, {
    effectId: "2",
    data: "test"
  }, React.createElement(SimplePresentational, null)));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(2);
    expect(numConstructors).toBe(2);
    expect(numRenders).toBe(2);
    expect(numChildRenders).toBe(2);
    done();
  });
});
test('Rendering a component triggers componentWillMount before render', done => {
  const orderedMethodCalls = [];
  const orderedChildMethodCalls = []; // Disable eslint for deprecated componentWillMount
  // eslint-disable-next-line react/no-deprecated

  class SimpleComponent extends React.Component {
    UNSAFE_componentWillMount() {
      orderedMethodCalls.push('componentWillMount');
    }

    render() {
      orderedMethodCalls.push('render');
      return React.createElement(SimpleChildComponent, null);
    }

  } // Disable eslint for deprecated componentWillMount
  // eslint-disable-next-line react/no-deprecated


  class SimpleChildComponent extends React.Component {
    UNSAFE_componentWillMount() {
      orderedChildMethodCalls.push('componentWillMount');
    }

    render() {
      orderedChildMethodCalls.push('render');
      return React.createElement("div", null, "Hello World");
    }

  }

  const app = React.createElement(SimpleComponent, null);
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(orderedMethodCalls).toEqual(['componentWillMount', 'render']);
    expect(orderedChildMethodCalls).toEqual(['componentWillMount', 'render']);
    done();
  });
});
test('Preparing an async app with componentWillReceiveProps option', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement(SimplePresentational, null);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncParent = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  }, {
    componentWillReceiveProps: true
  })(SimpleComponent);
  const app = React.createElement(AsyncParent, {
    data: "test"
  });
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(1);
    expect(numConstructors).toBe(1);
    expect(numRenders).toBe(1);
    expect(numChildRenders).toBe(1); // triggers componentDidMount

    const wrapper = (0, _enzyme.shallow)(app);
    expect(numPrepares).toBe(2); // triggers componentWillReceiveProps

    wrapper.setProps({
      test: true
    });
    expect(numPrepares).toBe(3);
    done();
  });
});
test('Preparing an async app with componentDidUpdate option', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
    }

    render() {
      numRenders++;
      return React.createElement(SimplePresentational, null);
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncParent = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  }, {
    componentDidUpdate: true
  })(SimpleComponent);
  const app = React.createElement(AsyncParent, {
    data: "test"
  });
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(1);
    expect(numConstructors).toBe(1);
    expect(numRenders).toBe(1);
    expect(numChildRenders).toBe(1); // triggers componentDidMount

    const wrapper = (0, _enzyme.shallow)(app);
    expect(numPrepares).toBe(2); // triggers componentDidUpdate

    wrapper.setProps({
      test: true
    });
    expect(numPrepares).toBe(3);
    done();
  });
});
test('Preparing React.forwardRef', done => {
  // $FlowFixMe
  const Forwarded = React.forwardRef(function Inner(props, ref) {
    // eslint-disable-line
    return React.createElement("div", {
      ref: ref
    }, props.children);
  });
  const app = React.createElement(Forwarded, null, React.createElement("span", null, "1"), React.createElement("span", null, "2"));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    const wrapper = (0, _enzyme.shallow)(React.createElement("div", null, app));
    expect(wrapper.find('span').length).toBe(2);
    done();
  });
});
test('Preparing React.forwardRef with async children', done => {
  // $FlowFixMe
  const Forwarded = React.forwardRef(function Inner(props, ref) {
    // eslint-disable-line
    return React.createElement("div", {
      ref: ref
    }, props.children);
  });
  let numChildRenders = 0;
  let numPrepares = 0;

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncChild = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimplePresentational);
  const app = React.createElement(Forwarded, null, React.createElement(AsyncChild, {
    effectId: "1",
    data: "test"
  }), React.createElement(AsyncChild, {
    effectId: "2",
    data: "test"
  }));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(2);
    expect(numChildRenders).toBe(2);
    done();
  });
});
test('Preparing a Fragment', done => {
  const app = React.createElement(React.Fragment, null, React.createElement("span", null, "1"), React.createElement("span", null, "2"));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    const wrapper = (0, _enzyme.shallow)(React.createElement("div", null, app));
    expect(wrapper.find('span').length).toBe(2);
    done();
  });
});
test('Preparing a fragment with async children', done => {
  let numChildRenders = 0;
  let numPrepares = 0;

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncChild = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimplePresentational);
  const app = // $FlowFixMe
  React.createElement(React.Fragment, null, React.createElement(AsyncChild, {
    effectId: "1",
    data: "test"
  }), React.createElement(AsyncChild, {
    effectId: "2",
    data: "test"
  }));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(2);
    expect(numChildRenders).toBe(2);
    done();
  });
});
test('Preparing React.createContext()', done => {
  // $FlowFixMe
  const {
    Provider,
    Consumer
  } = React.createContext('light');
  const app = React.createElement(Provider, {
    value: "light"
  }, React.createElement("span", null, "1"), React.createElement(Consumer, null, () => React.createElement("span", null, "2")));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    const wrapper = (0, _enzyme.shallow)(React.createElement("div", null, app));
    expect(wrapper.find('span').length).toBe(1);
    done();
  });
});
test('Preparing React.createContext() with async children', done => {
  // $FlowFixMe
  const {
    Provider,
    Consumer
  } = React.createContext('light');
  let numChildRenders = 0;
  let numPrepares = 0;
  let numRenderPropsRenders = 0;

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement(Consumer, null, theme => {
      numRenderPropsRenders++;
      expect(theme).toBe('dark');
      return React.createElement("div", null, theme);
    });
  }

  const AsyncChild = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimplePresentational);
  const app = React.createElement(Provider, {
    value: "dark"
  }, React.createElement(AsyncChild, {
    effectId: "1",
    data: "test"
  }), React.createElement(AsyncChild, {
    effectId: "2",
    data: "test"
  }));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(2);
    expect(numRenderPropsRenders).toBe(2);
    expect(numChildRenders).toBe(2);
    expect((0, _enzyme.shallow)(React.createElement("div", null, app)).html()).toBe('<div><div>dark</div><div>dark</div></div>');
    done();
  });
});
test('Preparing React.createContext() with deep async children', done => {
  // $FlowFixMe
  const {
    Provider,
    Consumer
  } = React.createContext('light');
  let numChildRenders = 0;
  let numPrepares = 0;
  let numRenderPropsRenders = 0;

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncChild = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimplePresentational);

  const ConsumerComponent = () => {
    return React.createElement(Consumer, null, theme => {
      numRenderPropsRenders++;
      expect(theme).toBe('dark');
      return React.createElement(AsyncChild, {
        data: "test"
      });
    });
  };

  const app = React.createElement(Provider, {
    value: "dark"
  }, React.createElement(ConsumerComponent, null));
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(1);
    expect(numChildRenders).toBe(1);
    expect(numRenderPropsRenders > 0).toBeTruthy();
    done();
  });
});
test('Preparing React.createContext() using the default provider value', done => {
  // $FlowFixMe
  const {
    Consumer
  } = React.createContext('light');
  let numChildRenders = 0;
  let numPrepares = 0;
  let numRenderPropsRenders = 0;

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncChild = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  })(SimplePresentational);

  const ConsumerComponent = () => {
    return React.createElement(Consumer, null, theme => {
      numRenderPropsRenders++;
      expect(theme).toBe('light');
      return React.createElement(AsyncChild, {
        data: "test"
      });
    });
  };

  const app = React.createElement(ConsumerComponent, null);
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(numPrepares).toBe(1);
    expect(numChildRenders).toBe(1);
    expect(numRenderPropsRenders > 0).toBeTruthy();
    done();
  });
});
test('Preparing a component using getDerivedStateFromProps', done => {
  let numConstructors = 0;
  let numRenders = 0;
  let numChildRenders = 0;
  let numPrepares = 0;
  let numDerivedStateFromProps = 0;
  let retainedState = false;

  class SimpleComponent extends React.Component {
    constructor(props, context) {
      super(props, context);
      numConstructors++;
      this.state = {
        firstRender: true,
        originalState: 'should remain'
      };
    }

    static getDerivedStateFromProps(props, {
      firstRender
    }) {
      numDerivedStateFromProps++;
      return {
        firstRender: false,
        someNewKey: [1, 2, 3]
      };
    } // eslint-disable-next-line react/no-deprecated


    componentWillMount() {
      throw new Error('Should not be called when gDSFP is defined');
    }

    render() {
      numRenders++;
      retainedState = this.state.originalState === 'should remain';
      return React.createElement("div", null, this.state.someNewKey.map((item, key) => React.createElement("div", {
        key: key
      })), React.createElement(SimplePresentational, null));
    }

  }

  function SimplePresentational() {
    numChildRenders++;
    return React.createElement("div", null, "Hello World");
  }

  const AsyncParent = (0, _index.prepared)(props => {
    numPrepares++;
    expect(props.data).toBe('test');
    return Promise.resolve();
  }, {
    componentDidMount: false,
    componentDidUpdate: false
  })(SimpleComponent);
  const app = React.createElement(AsyncParent, {
    data: "test"
  });
  const p = (0, _index.prepare)(app);
  expect(p instanceof Promise).toBeTruthy();
  p.then(() => {
    expect(retainedState).toBe(true);
    expect(numPrepares).toBe(1);
    expect(numConstructors).toBe(1);
    expect(numRenders).toBe(1);
    expect(numChildRenders).toBe(1);
    const wrapper = (0, _enzyme.shallow)(app); // triggers getDerivedStateFromProps
    // Enzyme does not yet support calling getDerivedStateFromProps after setProps

    wrapper.setProps({
      test: true
    });
    expect(numDerivedStateFromProps).toBe(1);
    done();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,