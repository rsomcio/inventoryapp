"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const prepared = (sideEffect, opts = {}) => OriginalComponent => {
  opts = Object.assign({
    boundary: false,
    defer: false,
    componentDidMount: true,
    componentWillReceiveProps: false,
    componentDidUpdate: false,
    contextTypes: {},
    forceUpdate: false
  }, opts);

  class PreparedComponent extends React.Component {
    componentDidMount() {
      if (opts.componentDidMount) {
        Promise.resolve(sideEffect(this.props, this.context)).then(() => {
          if (opts.forceUpdate) {
            this.forceUpdate();
          }
        });
      }
    }

    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
      if (opts.componentWillReceiveProps) {
        sideEffect(nextProps, nextContext);
      }
    }

    componentDidUpdate() {
      if (opts.componentDidUpdate) {
        sideEffect(this.props, this.context);
      }
    }

    render() {
      const effectId = this.props.effectId || 'defaultId';
      const prepareState = this.context.__PREPARE_STATE__;

      if (prepareState) {
        if (opts.defer || opts.boundary) {
          // skip prepare if defer or boundary
          return null;
        }

        const isResolved = prepareState.isResolved(PreparedComponent, effectId, () => sideEffect(this.props, this.context));

        if (!isResolved) {
          // Wait until resolved
          return null;
        }
      }

      return React.createElement(OriginalComponent, this.props);
    }

  }

  PreparedComponent.contextTypes = {
    __PREPARE_STATE__: () => {},
    ...opts.contextTypes
  };
  const displayName = OriginalComponent.displayName || OriginalComponent.name || '';
  PreparedComponent.displayName = `PreparedComponent(${displayName})`;
  return PreparedComponent;
};

var _default = prepared;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmVkLmpzIl0sIm5hbWVzIjpbInByZXBhcmVkIiwic2lkZUVmZmVjdCIsIm9wdHMiLCJPcmlnaW5hbENvbXBvbmVudCIsIk9iamVjdCIsImFzc2lnbiIsImJvdW5kYXJ5IiwiZGVmZXIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb250ZXh0VHlwZXMiLCJmb3JjZVVwZGF0ZSIsIlByZXBhcmVkQ29tcG9uZW50IiwiUmVhY3QiLCJDb21wb25lbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInByb3BzIiwiY29udGV4dCIsInRoZW4iLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm5leHRDb250ZXh0IiwicmVuZGVyIiwiZWZmZWN0SWQiLCJwcmVwYXJlU3RhdGUiLCJfX1BSRVBBUkVfU1RBVEVfXyIsImlzUmVzb2x2ZWQiLCJkaXNwbGF5TmFtZSIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFRQTs7Ozs7O0FBUkE7Ozs7Ozs7QUFvQkEsTUFBTUEsUUFBUSxHQUFHLENBQ2ZDLFVBRGUsRUFFZkMsSUFBbUIsR0FBRyxFQUZQLEtBSWZDLGlCQURHLElBRXFEO0FBQ3hERCxFQUFBQSxJQUFJLEdBQUdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUNMO0FBQ0VDLElBQUFBLFFBQVEsRUFBRSxLQURaO0FBRUVDLElBQUFBLEtBQUssRUFBRSxLQUZUO0FBR0VDLElBQUFBLGlCQUFpQixFQUFFLElBSHJCO0FBSUVDLElBQUFBLHlCQUF5QixFQUFFLEtBSjdCO0FBS0VDLElBQUFBLGtCQUFrQixFQUFFLEtBTHRCO0FBTUVDLElBQUFBLFlBQVksRUFBRSxFQU5oQjtBQU9FQyxJQUFBQSxXQUFXLEVBQUU7QUFQZixHQURLLEVBVUxWLElBVkssQ0FBUDs7QUFhQSxRQUFNVyxpQkFBTixTQUFnQ0MsS0FBSyxDQUFDQyxTQUF0QyxDQUFxRDtBQUNuRFAsSUFBQUEsaUJBQWlCLEdBQUc7QUFDbEIsVUFBSU4sSUFBSSxDQUFDTSxpQkFBVCxFQUE0QjtBQUMxQlEsUUFBQUEsT0FBTyxDQUFDQyxPQUFSLENBQWdCaEIsVUFBVSxDQUFDLEtBQUtpQixLQUFOLEVBQWEsS0FBS0MsT0FBbEIsQ0FBMUIsRUFBc0RDLElBQXRELENBQTJELE1BQU07QUFDL0QsY0FBSWxCLElBQUksQ0FBQ1UsV0FBVCxFQUFzQjtBQUNwQixpQkFBS0EsV0FBTDtBQUNEO0FBQ0YsU0FKRDtBQUtEO0FBQ0Y7O0FBRURTLElBQUFBLGdDQUFnQyxDQUFDQyxTQUFELEVBQVlDLFdBQVosRUFBeUI7QUFDdkQsVUFBSXJCLElBQUksQ0FBQ08seUJBQVQsRUFBb0M7QUFDbENSLFFBQUFBLFVBQVUsQ0FBQ3FCLFNBQUQsRUFBWUMsV0FBWixDQUFWO0FBQ0Q7QUFDRjs7QUFFRGIsSUFBQUEsa0JBQWtCLEdBQUc7QUFDbkIsVUFBSVIsSUFBSSxDQUFDUSxrQkFBVCxFQUE2QjtBQUMzQlQsUUFBQUEsVUFBVSxDQUFDLEtBQUtpQixLQUFOLEVBQWEsS0FBS0MsT0FBbEIsQ0FBVjtBQUNEO0FBQ0Y7O0FBRURLLElBQUFBLE1BQU0sR0FBRztBQUNQLFlBQU1DLFFBQVEsR0FBRyxLQUFLUCxLQUFMLENBQVdPLFFBQVgsSUFBdUIsV0FBeEM7QUFDQSxZQUFNQyxZQUFZLEdBQUcsS0FBS1AsT0FBTCxDQUFhUSxpQkFBbEM7O0FBQ0EsVUFBSUQsWUFBSixFQUFrQjtBQUNoQixZQUFJeEIsSUFBSSxDQUFDSyxLQUFMLElBQWNMLElBQUksQ0FBQ0ksUUFBdkIsRUFBaUM7QUFDL0I7QUFDQSxpQkFBTyxJQUFQO0FBQ0Q7O0FBRUQsY0FBTXNCLFVBQVUsR0FBR0YsWUFBWSxDQUFDRSxVQUFiLENBQ2pCZixpQkFEaUIsRUFFakJZLFFBRmlCLEVBR2pCLE1BQU14QixVQUFVLENBQUMsS0FBS2lCLEtBQU4sRUFBYSxLQUFLQyxPQUFsQixDQUhDLENBQW5COztBQU1BLFlBQUksQ0FBQ1MsVUFBTCxFQUFpQjtBQUNmO0FBQ0EsaUJBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsYUFBTyxvQkFBQyxpQkFBRCxFQUF1QixLQUFLVixLQUE1QixDQUFQO0FBQ0Q7O0FBN0NrRDs7QUFnRHJETCxFQUFBQSxpQkFBaUIsQ0FBQ0YsWUFBbEIsR0FBaUM7QUFDL0JnQixJQUFBQSxpQkFBaUIsRUFBRSxNQUFNLENBQUUsQ0FESTtBQUUvQixPQUFHekIsSUFBSSxDQUFDUztBQUZ1QixHQUFqQztBQUtBLFFBQU1rQixXQUFXLEdBQ2YxQixpQkFBaUIsQ0FBQzBCLFdBQWxCLElBQWlDMUIsaUJBQWlCLENBQUMyQixJQUFuRCxJQUEyRCxFQUQ3RDtBQUVBakIsRUFBQUEsaUJBQWlCLENBQUNnQixXQUFsQixHQUFpQyxxQkFBb0JBLFdBQVksR0FBakU7QUFFQSxTQUFPaEIsaUJBQVA7QUFDRCxDQTdFRDs7ZUErRWViLFEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJlcGFyZWRPcHRzID0ge1xuICBib3VuZGFyeT86IGJvb2xlYW4sXG4gIGRlZmVyPzogYm9vbGVhbixcbiAgY29tcG9uZW50RGlkTW91bnQ/OiBib29sZWFuLFxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPzogYm9vbGVhbixcbiAgY29tcG9uZW50RGlkVXBkYXRlPzogYm9vbGVhbixcbiAgY29udGV4dFR5cGVzPzogT2JqZWN0LFxuICBmb3JjZVVwZGF0ZT86IGJvb2xlYW4sXG59O1xuXG5jb25zdCBwcmVwYXJlZCA9IChcbiAgc2lkZUVmZmVjdDogKGFueSwgYW55KSA9PiBhbnkgfCBQcm9taXNlPGFueT4sXG4gIG9wdHM/OiBQcmVwYXJlZE9wdHMgPSB7fVxuKSA9PiA8Q29uZmlnPihcbiAgT3JpZ2luYWxDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8Q29uZmlnPlxuKTogUmVhY3QuQ29tcG9uZW50VHlwZTx7Li4uQ29uZmlnLCBlZmZlY3RJZD86IHN0cmluZ30+ID0+IHtcbiAgb3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgYm91bmRhcnk6IGZhbHNlLFxuICAgICAgZGVmZXI6IGZhbHNlLFxuICAgICAgY29tcG9uZW50RGlkTW91bnQ6IHRydWUsXG4gICAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZmFsc2UsXG4gICAgICBjb250ZXh0VHlwZXM6IHt9LFxuICAgICAgZm9yY2VVcGRhdGU6IGZhbHNlLFxuICAgIH0sXG4gICAgb3B0c1xuICApO1xuXG4gIGNsYXNzIFByZXBhcmVkQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueT4ge1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKG9wdHMuY29tcG9uZW50RGlkTW91bnQpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHNpZGVFZmZlY3QodGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgaWYgKG9wdHMuZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICAgIGlmIChvcHRzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgc2lkZUVmZmVjdChuZXh0UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBpZiAob3B0cy5jb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgICAgc2lkZUVmZmVjdCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IGVmZmVjdElkID0gdGhpcy5wcm9wcy5lZmZlY3RJZCB8fCAnZGVmYXVsdElkJztcbiAgICAgIGNvbnN0IHByZXBhcmVTdGF0ZSA9IHRoaXMuY29udGV4dC5fX1BSRVBBUkVfU1RBVEVfXztcbiAgICAgIGlmIChwcmVwYXJlU3RhdGUpIHtcbiAgICAgICAgaWYgKG9wdHMuZGVmZXIgfHwgb3B0cy5ib3VuZGFyeSkge1xuICAgICAgICAgIC8vIHNraXAgcHJlcGFyZSBpZiBkZWZlciBvciBib3VuZGFyeVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNSZXNvbHZlZCA9IHByZXBhcmVTdGF0ZS5pc1Jlc29sdmVkKFxuICAgICAgICAgIFByZXBhcmVkQ29tcG9uZW50LFxuICAgICAgICAgIGVmZmVjdElkLFxuICAgICAgICAgICgpID0+IHNpZGVFZmZlY3QodGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghaXNSZXNvbHZlZCkge1xuICAgICAgICAgIC8vIFdhaXQgdW50aWwgcmVzb2x2ZWRcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gPE9yaWdpbmFsQ29tcG9uZW50IHsuLi50aGlzLnByb3BzfSAvPjtcbiAgICB9XG4gIH1cblxuICBQcmVwYXJlZENvbXBvbmVudC5jb250ZXh0VHlwZXMgPSB7XG4gICAgX19QUkVQQVJFX1NUQVRFX186ICgpID0+IHt9LFxuICAgIC4uLm9wdHMuY29udGV4dFR5cGVzLFxuICB9O1xuXG4gIGNvbnN0IGRpc3BsYXlOYW1lID1cbiAgICBPcmlnaW5hbENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBPcmlnaW5hbENvbXBvbmVudC5uYW1lIHx8ICcnO1xuICBQcmVwYXJlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGBQcmVwYXJlZENvbXBvbmVudCgke2Rpc3BsYXlOYW1lfSlgO1xuXG4gIHJldHVybiBQcmVwYXJlZENvbXBvbmVudDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByZXBhcmVkO1xuIl19