/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';

const prepared = (sideEffect, opts = {}) => OriginalComponent => {
  opts = Object.assign({
    boundary: false,
    defer: false,
    componentDidMount: true,
    componentWillReceiveProps: false,
    componentDidUpdate: false,
    contextTypes: {},
    forceUpdate: false
  }, opts);

  class PreparedComponent extends React.Component {
    componentDidMount() {
      if (opts.componentDidMount) {
        Promise.resolve(sideEffect(this.props, this.context)).then(() => {
          if (opts.forceUpdate) {
            this.forceUpdate();
          }
        });
      }
    }

    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
      if (opts.componentWillReceiveProps) {
        sideEffect(nextProps, nextContext);
      }
    }

    componentDidUpdate() {
      if (opts.componentDidUpdate) {
        sideEffect(this.props, this.context);
      }
    }

    render() {
      const effectId = this.props.effectId || 'defaultId';
      const prepareState = this.context.__PREPARE_STATE__;

      if (prepareState) {
        if (opts.defer || opts.boundary) {
          // skip prepare if defer or boundary
          return null;
        }

        const isResolved = prepareState.isResolved(PreparedComponent, effectId, () => sideEffect(this.props, this.context));

        if (!isResolved) {
          // Wait until resolved
          return null;
        }
      }

      return React.createElement(OriginalComponent, this.props);
    }

  }

  PreparedComponent.contextTypes = {
    __PREPARE_STATE__: () => {},
    ...opts.contextTypes
  };
  const displayName = OriginalComponent.displayName || OriginalComponent.name || '';
  PreparedComponent.displayName = `PreparedComponent(${displayName})`;
  return PreparedComponent;
};

export default prepared;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmVkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicHJlcGFyZWQiLCJzaWRlRWZmZWN0Iiwib3B0cyIsIk9yaWdpbmFsQ29tcG9uZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiYm91bmRhcnkiLCJkZWZlciIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbnRleHRUeXBlcyIsImZvcmNlVXBkYXRlIiwiUHJlcGFyZWRDb21wb25lbnQiLCJDb21wb25lbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInByb3BzIiwiY29udGV4dCIsInRoZW4iLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm5leHRDb250ZXh0IiwicmVuZGVyIiwiZWZmZWN0SWQiLCJwcmVwYXJlU3RhdGUiLCJfX1BSRVBBUkVfU1RBVEVfXyIsImlzUmVzb2x2ZWQiLCJkaXNwbGF5TmFtZSIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBUUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCOztBQVlBLE1BQU1DLFFBQVEsR0FBRyxDQUNmQyxVQURlLEVBRWZDLElBQW1CLEdBQUcsRUFGUCxLQUlmQyxpQkFERyxJQUVxRDtBQUN4REQsRUFBQUEsSUFBSSxHQUFHRSxNQUFNLENBQUNDLE1BQVAsQ0FDTDtBQUNFQyxJQUFBQSxRQUFRLEVBQUUsS0FEWjtBQUVFQyxJQUFBQSxLQUFLLEVBQUUsS0FGVDtBQUdFQyxJQUFBQSxpQkFBaUIsRUFBRSxJQUhyQjtBQUlFQyxJQUFBQSx5QkFBeUIsRUFBRSxLQUo3QjtBQUtFQyxJQUFBQSxrQkFBa0IsRUFBRSxLQUx0QjtBQU1FQyxJQUFBQSxZQUFZLEVBQUUsRUFOaEI7QUFPRUMsSUFBQUEsV0FBVyxFQUFFO0FBUGYsR0FESyxFQVVMVixJQVZLLENBQVA7O0FBYUEsUUFBTVcsaUJBQU4sU0FBZ0NkLEtBQUssQ0FBQ2UsU0FBdEMsQ0FBcUQ7QUFDbkROLElBQUFBLGlCQUFpQixHQUFHO0FBQ2xCLFVBQUlOLElBQUksQ0FBQ00saUJBQVQsRUFBNEI7QUFDMUJPLFFBQUFBLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQmYsVUFBVSxDQUFDLEtBQUtnQixLQUFOLEVBQWEsS0FBS0MsT0FBbEIsQ0FBMUIsRUFBc0RDLElBQXRELENBQTJELE1BQU07QUFDL0QsY0FBSWpCLElBQUksQ0FBQ1UsV0FBVCxFQUFzQjtBQUNwQixpQkFBS0EsV0FBTDtBQUNEO0FBQ0YsU0FKRDtBQUtEO0FBQ0Y7O0FBRURRLElBQUFBLGdDQUFnQyxDQUFDQyxTQUFELEVBQVlDLFdBQVosRUFBeUI7QUFDdkQsVUFBSXBCLElBQUksQ0FBQ08seUJBQVQsRUFBb0M7QUFDbENSLFFBQUFBLFVBQVUsQ0FBQ29CLFNBQUQsRUFBWUMsV0FBWixDQUFWO0FBQ0Q7QUFDRjs7QUFFRFosSUFBQUEsa0JBQWtCLEdBQUc7QUFDbkIsVUFBSVIsSUFBSSxDQUFDUSxrQkFBVCxFQUE2QjtBQUMzQlQsUUFBQUEsVUFBVSxDQUFDLEtBQUtnQixLQUFOLEVBQWEsS0FBS0MsT0FBbEIsQ0FBVjtBQUNEO0FBQ0Y7O0FBRURLLElBQUFBLE1BQU0sR0FBRztBQUNQLFlBQU1DLFFBQVEsR0FBRyxLQUFLUCxLQUFMLENBQVdPLFFBQVgsSUFBdUIsV0FBeEM7QUFDQSxZQUFNQyxZQUFZLEdBQUcsS0FBS1AsT0FBTCxDQUFhUSxpQkFBbEM7O0FBQ0EsVUFBSUQsWUFBSixFQUFrQjtBQUNoQixZQUFJdkIsSUFBSSxDQUFDSyxLQUFMLElBQWNMLElBQUksQ0FBQ0ksUUFBdkIsRUFBaUM7QUFDL0I7QUFDQSxpQkFBTyxJQUFQO0FBQ0Q7O0FBRUQsY0FBTXFCLFVBQVUsR0FBR0YsWUFBWSxDQUFDRSxVQUFiLENBQ2pCZCxpQkFEaUIsRUFFakJXLFFBRmlCLEVBR2pCLE1BQU12QixVQUFVLENBQUMsS0FBS2dCLEtBQU4sRUFBYSxLQUFLQyxPQUFsQixDQUhDLENBQW5COztBQU1BLFlBQUksQ0FBQ1MsVUFBTCxFQUFpQjtBQUNmO0FBQ0EsaUJBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsYUFBTyxvQkFBQyxpQkFBRCxFQUF1QixLQUFLVixLQUE1QixDQUFQO0FBQ0Q7O0FBN0NrRDs7QUFnRHJESixFQUFBQSxpQkFBaUIsQ0FBQ0YsWUFBbEIsR0FBaUM7QUFDL0JlLElBQUFBLGlCQUFpQixFQUFFLE1BQU0sQ0FBRSxDQURJO0FBRS9CLE9BQUd4QixJQUFJLENBQUNTO0FBRnVCLEdBQWpDO0FBS0EsUUFBTWlCLFdBQVcsR0FDZnpCLGlCQUFpQixDQUFDeUIsV0FBbEIsSUFBaUN6QixpQkFBaUIsQ0FBQzBCLElBQW5ELElBQTJELEVBRDdEO0FBRUFoQixFQUFBQSxpQkFBaUIsQ0FBQ2UsV0FBbEIsR0FBaUMscUJBQW9CQSxXQUFZLEdBQWpFO0FBRUEsU0FBT2YsaUJBQVA7QUFDRCxDQTdFRDs7QUErRUEsZUFBZWIsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcmVwYXJlZE9wdHMgPSB7XG4gIGJvdW5kYXJ5PzogYm9vbGVhbixcbiAgZGVmZXI/OiBib29sZWFuLFxuICBjb21wb25lbnREaWRNb3VudD86IGJvb2xlYW4sXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM/OiBib29sZWFuLFxuICBjb21wb25lbnREaWRVcGRhdGU/OiBib29sZWFuLFxuICBjb250ZXh0VHlwZXM/OiBPYmplY3QsXG4gIGZvcmNlVXBkYXRlPzogYm9vbGVhbixcbn07XG5cbmNvbnN0IHByZXBhcmVkID0gKFxuICBzaWRlRWZmZWN0OiAoYW55LCBhbnkpID0+IGFueSB8IFByb21pc2U8YW55PixcbiAgb3B0cz86IFByZXBhcmVkT3B0cyA9IHt9XG4pID0+IDxDb25maWc+KFxuICBPcmlnaW5hbENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxDb25maWc+XG4pOiBSZWFjdC5Db21wb25lbnRUeXBlPHsuLi5Db25maWcsIGVmZmVjdElkPzogc3RyaW5nfT4gPT4ge1xuICBvcHRzID0gT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICBib3VuZGFyeTogZmFsc2UsXG4gICAgICBkZWZlcjogZmFsc2UsXG4gICAgICBjb21wb25lbnREaWRNb3VudDogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZhbHNlLFxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlOiBmYWxzZSxcbiAgICAgIGNvbnRleHRUeXBlczoge30sXG4gICAgICBmb3JjZVVwZGF0ZTogZmFsc2UsXG4gICAgfSxcbiAgICBvcHRzXG4gICk7XG5cbiAgY2xhc3MgUHJlcGFyZWRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55PiB7XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAob3B0cy5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoc2lkZUVmZmVjdCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBpZiAob3B0cy5mb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgICAgaWYgKG9wdHMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgICBzaWRlRWZmZWN0KG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIGlmIChvcHRzLmNvbXBvbmVudERpZFVwZGF0ZSkge1xuICAgICAgICBzaWRlRWZmZWN0KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgZWZmZWN0SWQgPSB0aGlzLnByb3BzLmVmZmVjdElkIHx8ICdkZWZhdWx0SWQnO1xuICAgICAgY29uc3QgcHJlcGFyZVN0YXRlID0gdGhpcy5jb250ZXh0Ll9fUFJFUEFSRV9TVEFURV9fO1xuICAgICAgaWYgKHByZXBhcmVTdGF0ZSkge1xuICAgICAgICBpZiAob3B0cy5kZWZlciB8fCBvcHRzLmJvdW5kYXJ5KSB7XG4gICAgICAgICAgLy8gc2tpcCBwcmVwYXJlIGlmIGRlZmVyIG9yIGJvdW5kYXJ5XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc1Jlc29sdmVkID0gcHJlcGFyZVN0YXRlLmlzUmVzb2x2ZWQoXG4gICAgICAgICAgUHJlcGFyZWRDb21wb25lbnQsXG4gICAgICAgICAgZWZmZWN0SWQsXG4gICAgICAgICAgKCkgPT4gc2lkZUVmZmVjdCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICAgICAgLy8gV2FpdCB1bnRpbCByZXNvbHZlZFxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiA8T3JpZ2luYWxDb21wb25lbnQgey4uLnRoaXMucHJvcHN9IC8+O1xuICAgIH1cbiAgfVxuXG4gIFByZXBhcmVkQ29tcG9uZW50LmNvbnRleHRUeXBlcyA9IHtcbiAgICBfX1BSRVBBUkVfU1RBVEVfXzogKCkgPT4ge30sXG4gICAgLi4ub3B0cy5jb250ZXh0VHlwZXMsXG4gIH07XG5cbiAgY29uc3QgZGlzcGxheU5hbWUgPVxuICAgIE9yaWdpbmFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IE9yaWdpbmFsQ29tcG9uZW50Lm5hbWUgfHwgJyc7XG4gIFByZXBhcmVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYFByZXBhcmVkQ29tcG9uZW50KCR7ZGlzcGxheU5hbWV9KWA7XG5cbiAgcmV0dXJuIFByZXBhcmVkQ29tcG9uZW50O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJlcGFyZWQ7XG4iXX0=