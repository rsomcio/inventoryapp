/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import PropTypes from 'prop-types';
import prepared from './prepared.js';
const contextTypes = {
  splitComponentLoaders: PropTypes.array.isRequired
};

if (true) {
  // $FlowFixMe
  contextTypes.markAsCritical = PropTypes.func;
}

export default function withAsyncComponent({
  defer,
  load,
  LoadingComponent,
  ErrorComponent
}) {
  let AsyncComponent = null;
  let error = null;
  const metadata = {
    chunkIds: [],
    i18nKeys: []
  };

  function WithAsyncComponent(props) {
    if (false) {
      let promise = load(); // $FlowFixMe

      let id = promise.__MODULE_ID;

      if (typeof __webpack_modules__ !== 'undefined' && __webpack_modules__[id]) {
        // If module is already loaded, it can be synchronously imported
        AsyncComponent = __webpack_require__(id).default;
      }
    }

    if (error) {
      return React.createElement(ErrorComponent, {
        error: error
      });
    }

    if (!AsyncComponent) {
      return React.createElement(LoadingComponent, null);
    }

    return React.createElement(AsyncComponent, props);
  }

  return prepared((props, context) => {
    if (AsyncComponent) {
      if (true && context.markAsCritical) {
        metadata.chunkIds.forEach(chunkId => {
          context.markAsCritical(chunkId);
        });
      }

      return Promise.resolve(AsyncComponent);
    }

    let componentPromise;

    try {
      componentPromise = load();
    } catch (e) {
      componentPromise = Promise.reject(e);
    } // $FlowFixMe


    metadata.chunkIds = componentPromise.__CHUNK_IDS || []; // $FlowFixMe

    metadata.i18nKeys = componentPromise.__I18N_KEYS || [];

    if (true && context.markAsCritical) {
      metadata.chunkIds.forEach(chunkId => {
        context.markAsCritical(chunkId);
      });
    }

    const loadPromises = [componentPromise, ...context.splitComponentLoaders.map(loader => loader(metadata.chunkIds, metadata))];
    return Promise.all(loadPromises).then(([asyncComponent]) => {
      // Note: .default is toolchain specific, breaks w/ CommonJS exports
      AsyncComponent = asyncComponent.default;

      if (AsyncComponent === undefined) {
        throw new Error('Bundle does not contain a default export');
      }
    }).catch(err => {
      error = err;
      if (false) setTimeout(() => {
        throw err;
      }); // log error
    });
  }, {
    defer,
    contextTypes,
    forceUpdate: true
  })(WithAsyncComponent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,