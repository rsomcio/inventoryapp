/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import ssrPrepass from 'react-ssr-prepass';

class PrepareState {
  constructor() {
    this.seen = new Map();
    this.pending = new Map();
  }

  isResolved(Component, effectId, effectPromiseThunk) {
    let seenEffectIds = this.seen.get(Component);
    let pendingPromises = this.pending.get(Component); // Initialize if not present

    if (!seenEffectIds) {
      seenEffectIds = new Set();
      this.seen.set(Component, seenEffectIds);
    } // If seen and not pending, then it has been resolved


    if (seenEffectIds.has(effectId) && (!pendingPromises || !pendingPromises.has(effectId))) {
      return true;
    } // If not yet seen, need to start promise


    if (!seenEffectIds.has(effectId)) {
      if (!pendingPromises) {
        pendingPromises = new Map();
        this.pending.set(Component, pendingPromises);
      }

      const effectPromise = effectPromiseThunk();
      seenEffectIds.add(effectId);
      pendingPromises.set(effectId, effectPromise);
    }

    return false;
  }

  consumeAndAwaitPromises() {
    let promises = [];

    for (let map of this.pending.values()) {
      for (let promise of map.values()) {
        promises.push(promise);
      }
    }

    this.pending = new Map(); // clear

    return Promise.all(promises);
  }

}

export default function prepare(element) {
  const prepareState = new PrepareState();

  class PrepareContextProvider extends React.Component {
    getChildContext() {
      return {
        __IS_PREPARE__: true,
        __PREPARE_STATE__: prepareState
      };
    }

    render() {
      return element;
    }

  }

  PrepareContextProvider.childContextTypes = {
    __PREPARE_STATE__: () => {},
    __IS_PREPARE__: () => {}
  };

  async function process() {
    await ssrPrepass(React.createElement(PrepareContextProvider));

    if (prepareState.pending.size) {
      return prepareState.consumeAndAwaitPromises().then(process);
    }
  }

  return Promise.resolve().then(process);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJzc3JQcmVwYXNzIiwiUHJlcGFyZVN0YXRlIiwiY29uc3RydWN0b3IiLCJzZWVuIiwiTWFwIiwicGVuZGluZyIsImlzUmVzb2x2ZWQiLCJDb21wb25lbnQiLCJlZmZlY3RJZCIsImVmZmVjdFByb21pc2VUaHVuayIsInNlZW5FZmZlY3RJZHMiLCJnZXQiLCJwZW5kaW5nUHJvbWlzZXMiLCJTZXQiLCJzZXQiLCJoYXMiLCJlZmZlY3RQcm9taXNlIiwiYWRkIiwiY29uc3VtZUFuZEF3YWl0UHJvbWlzZXMiLCJwcm9taXNlcyIsIm1hcCIsInZhbHVlcyIsInByb21pc2UiLCJwdXNoIiwiUHJvbWlzZSIsImFsbCIsInByZXBhcmUiLCJlbGVtZW50IiwicHJlcGFyZVN0YXRlIiwiUHJlcGFyZUNvbnRleHRQcm92aWRlciIsImdldENoaWxkQ29udGV4dCIsIl9fSVNfUFJFUEFSRV9fIiwiX19QUkVQQVJFX1NUQVRFX18iLCJyZW5kZXIiLCJjaGlsZENvbnRleHRUeXBlcyIsInByb2Nlc3MiLCJjcmVhdGVFbGVtZW50Iiwic2l6ZSIsInRoZW4iLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQVFBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsbUJBQXZCOztBQUVBLE1BQU1DLFlBQU4sQ0FBbUI7QUFJakJDLEVBQUFBLFdBQVcsR0FBRztBQUNaLFNBQUtDLElBQUwsR0FBWSxJQUFJQyxHQUFKLEVBQVo7QUFDQSxTQUFLQyxPQUFMLEdBQWUsSUFBSUQsR0FBSixFQUFmO0FBQ0Q7O0FBRURFLEVBQUFBLFVBQVUsQ0FBQ0MsU0FBRCxFQUFZQyxRQUFaLEVBQXNCQyxrQkFBdEIsRUFBMEM7QUFDbEQsUUFBSUMsYUFBYSxHQUFHLEtBQUtQLElBQUwsQ0FBVVEsR0FBVixDQUFjSixTQUFkLENBQXBCO0FBQ0EsUUFBSUssZUFBZSxHQUFHLEtBQUtQLE9BQUwsQ0FBYU0sR0FBYixDQUFpQkosU0FBakIsQ0FBdEIsQ0FGa0QsQ0FJbEQ7O0FBQ0EsUUFBSSxDQUFDRyxhQUFMLEVBQW9CO0FBQ2xCQSxNQUFBQSxhQUFhLEdBQUcsSUFBSUcsR0FBSixFQUFoQjtBQUNBLFdBQUtWLElBQUwsQ0FBVVcsR0FBVixDQUFjUCxTQUFkLEVBQXlCRyxhQUF6QjtBQUNELEtBUmlELENBVWxEOzs7QUFDQSxRQUNFQSxhQUFhLENBQUNLLEdBQWQsQ0FBa0JQLFFBQWxCLE1BQ0MsQ0FBQ0ksZUFBRCxJQUFvQixDQUFDQSxlQUFlLENBQUNHLEdBQWhCLENBQW9CUCxRQUFwQixDQUR0QixDQURGLEVBR0U7QUFDQSxhQUFPLElBQVA7QUFDRCxLQWhCaUQsQ0FrQmxEOzs7QUFDQSxRQUFJLENBQUNFLGFBQWEsQ0FBQ0ssR0FBZCxDQUFrQlAsUUFBbEIsQ0FBTCxFQUFrQztBQUNoQyxVQUFJLENBQUNJLGVBQUwsRUFBc0I7QUFDcEJBLFFBQUFBLGVBQWUsR0FBRyxJQUFJUixHQUFKLEVBQWxCO0FBQ0EsYUFBS0MsT0FBTCxDQUFhUyxHQUFiLENBQWlCUCxTQUFqQixFQUE0QkssZUFBNUI7QUFDRDs7QUFFRCxZQUFNSSxhQUFhLEdBQUdQLGtCQUFrQixFQUF4QztBQUNBQyxNQUFBQSxhQUFhLENBQUNPLEdBQWQsQ0FBa0JULFFBQWxCO0FBQ0FJLE1BQUFBLGVBQWUsQ0FBQ0UsR0FBaEIsQ0FBb0JOLFFBQXBCLEVBQThCUSxhQUE5QjtBQUNEOztBQUVELFdBQU8sS0FBUDtBQUNEOztBQUVERSxFQUFBQSx1QkFBdUIsR0FBRztBQUN4QixRQUFJQyxRQUFRLEdBQUcsRUFBZjs7QUFDQSxTQUFLLElBQUlDLEdBQVQsSUFBZ0IsS0FBS2YsT0FBTCxDQUFhZ0IsTUFBYixFQUFoQixFQUF1QztBQUNyQyxXQUFLLElBQUlDLE9BQVQsSUFBb0JGLEdBQUcsQ0FBQ0MsTUFBSixFQUFwQixFQUFrQztBQUNoQ0YsUUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWNELE9BQWQ7QUFDRDtBQUNGOztBQUVELFNBQUtqQixPQUFMLEdBQWUsSUFBSUQsR0FBSixFQUFmLENBUndCLENBUUU7O0FBQzFCLFdBQU9vQixPQUFPLENBQUNDLEdBQVIsQ0FBWU4sUUFBWixDQUFQO0FBQ0Q7O0FBcERnQjs7QUF1RG5CLGVBQWUsU0FBU08sT0FBVCxDQUFpQkMsT0FBakIsRUFBK0I7QUFDNUMsUUFBTUMsWUFBWSxHQUFHLElBQUkzQixZQUFKLEVBQXJCOztBQUVBLFFBQU00QixzQkFBTixTQUFxQzlCLEtBQUssQ0FBQ1EsU0FBM0MsQ0FBeUQ7QUFDdkR1QixJQUFBQSxlQUFlLEdBQUc7QUFDaEIsYUFBTztBQUNMQyxRQUFBQSxjQUFjLEVBQUUsSUFEWDtBQUVMQyxRQUFBQSxpQkFBaUIsRUFBRUo7QUFGZCxPQUFQO0FBSUQ7O0FBQ0RLLElBQUFBLE1BQU0sR0FBRztBQUNQLGFBQU9OLE9BQVA7QUFDRDs7QUFUc0Q7O0FBV3pERSxFQUFBQSxzQkFBc0IsQ0FBQ0ssaUJBQXZCLEdBQTJDO0FBQ3pDRixJQUFBQSxpQkFBaUIsRUFBRSxNQUFNLENBQUUsQ0FEYztBQUV6Q0QsSUFBQUEsY0FBYyxFQUFFLE1BQU0sQ0FBRTtBQUZpQixHQUEzQzs7QUFLQSxpQkFBZUksT0FBZixHQUF5QjtBQUN2QixVQUFNbkMsVUFBVSxDQUFDRCxLQUFLLENBQUNxQyxhQUFOLENBQW9CUCxzQkFBcEIsQ0FBRCxDQUFoQjs7QUFFQSxRQUFJRCxZQUFZLENBQUN2QixPQUFiLENBQXFCZ0MsSUFBekIsRUFBK0I7QUFDN0IsYUFBT1QsWUFBWSxDQUFDVix1QkFBYixHQUF1Q29CLElBQXZDLENBQTRDSCxPQUE1QyxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPWCxPQUFPLENBQUNlLE9BQVIsR0FBa0JELElBQWxCLENBQXVCSCxPQUF2QixDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3NyUHJlcGFzcyBmcm9tICdyZWFjdC1zc3ItcHJlcGFzcyc7XG5cbmNsYXNzIFByZXBhcmVTdGF0ZSB7XG4gIHNlZW46IE1hcDxhbnksIFNldDxzdHJpbmc+PjtcbiAgcGVuZGluZzogTWFwPGFueSwgTWFwPHN0cmluZywgUHJvbWlzZTxhbnk+Pj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zZWVuID0gbmV3IE1hcCgpO1xuICAgIHRoaXMucGVuZGluZyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGlzUmVzb2x2ZWQoQ29tcG9uZW50LCBlZmZlY3RJZCwgZWZmZWN0UHJvbWlzZVRodW5rKSB7XG4gICAgbGV0IHNlZW5FZmZlY3RJZHMgPSB0aGlzLnNlZW4uZ2V0KENvbXBvbmVudCk7XG4gICAgbGV0IHBlbmRpbmdQcm9taXNlcyA9IHRoaXMucGVuZGluZy5nZXQoQ29tcG9uZW50KTtcblxuICAgIC8vIEluaXRpYWxpemUgaWYgbm90IHByZXNlbnRcbiAgICBpZiAoIXNlZW5FZmZlY3RJZHMpIHtcbiAgICAgIHNlZW5FZmZlY3RJZHMgPSBuZXcgU2V0KCk7XG4gICAgICB0aGlzLnNlZW4uc2V0KENvbXBvbmVudCwgc2VlbkVmZmVjdElkcyk7XG4gICAgfVxuXG4gICAgLy8gSWYgc2VlbiBhbmQgbm90IHBlbmRpbmcsIHRoZW4gaXQgaGFzIGJlZW4gcmVzb2x2ZWRcbiAgICBpZiAoXG4gICAgICBzZWVuRWZmZWN0SWRzLmhhcyhlZmZlY3RJZCkgJiZcbiAgICAgICghcGVuZGluZ1Byb21pc2VzIHx8ICFwZW5kaW5nUHJvbWlzZXMuaGFzKGVmZmVjdElkKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIElmIG5vdCB5ZXQgc2VlbiwgbmVlZCB0byBzdGFydCBwcm9taXNlXG4gICAgaWYgKCFzZWVuRWZmZWN0SWRzLmhhcyhlZmZlY3RJZCkpIHtcbiAgICAgIGlmICghcGVuZGluZ1Byb21pc2VzKSB7XG4gICAgICAgIHBlbmRpbmdQcm9taXNlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nLnNldChDb21wb25lbnQsIHBlbmRpbmdQcm9taXNlcyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVmZmVjdFByb21pc2UgPSBlZmZlY3RQcm9taXNlVGh1bmsoKTtcbiAgICAgIHNlZW5FZmZlY3RJZHMuYWRkKGVmZmVjdElkKTtcbiAgICAgIHBlbmRpbmdQcm9taXNlcy5zZXQoZWZmZWN0SWQsIGVmZmVjdFByb21pc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN1bWVBbmRBd2FpdFByb21pc2VzKCkge1xuICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgIGZvciAobGV0IG1hcCBvZiB0aGlzLnBlbmRpbmcudmFsdWVzKCkpIHtcbiAgICAgIGZvciAobGV0IHByb21pc2Ugb2YgbWFwLnZhbHVlcygpKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nID0gbmV3IE1hcCgpOyAvLyBjbGVhclxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlcGFyZShlbGVtZW50OiBhbnkpIHtcbiAgY29uc3QgcHJlcGFyZVN0YXRlID0gbmV3IFByZXBhcmVTdGF0ZSgpO1xuXG4gIGNsYXNzIFByZXBhcmVDb250ZXh0UHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30+IHtcbiAgICBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfX0lTX1BSRVBBUkVfXzogdHJ1ZSxcbiAgICAgICAgX19QUkVQQVJFX1NUQVRFX186IHByZXBhcmVTdGF0ZSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgfVxuICBQcmVwYXJlQ29udGV4dFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAgIF9fUFJFUEFSRV9TVEFURV9fOiAoKSA9PiB7fSxcbiAgICBfX0lTX1BSRVBBUkVfXzogKCkgPT4ge30sXG4gIH07XG5cbiAgYXN5bmMgZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICBhd2FpdCBzc3JQcmVwYXNzKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJlcGFyZUNvbnRleHRQcm92aWRlcikpO1xuXG4gICAgaWYgKHByZXBhcmVTdGF0ZS5wZW5kaW5nLnNpemUpIHtcbiAgICAgIHJldHVybiBwcmVwYXJlU3RhdGUuY29uc3VtZUFuZEF3YWl0UHJvbWlzZXMoKS50aGVuKHByb2Nlc3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKHByb2Nlc3MpO1xufVxuIl19