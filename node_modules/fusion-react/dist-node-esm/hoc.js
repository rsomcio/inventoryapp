/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import { useService } from './context.js';
import PropTypes from 'prop-types';

function capitalize(str) {
  return str.replace(/^./, c => c.toUpperCase());
}

export default {
  create: (name, mapProvidesToProps, token) => {
    const mapProvides = mapProvidesToProps ? mapProvidesToProps : provides => ({
      [name]: provides
    });
    const _token = token; // Make token constant for flow

    if (_token) {
      // Use new Context through useService hook
      return Component => {
        const Wrapper = props => {
          const service = useService(_token);
          return React.createElement(Component, { ...props,
            ...mapProvides(service)
          });
        };

        const displayName = Component.displayName || Component.name || 'Anonymous';
        Wrapper.displayName = `With${capitalize(name)}(${displayName})`;
        return Wrapper;
      };
    } else {
      // Use legacy Context
      return Component => {
        class HOC extends React.Component {
          constructor(props, ctx) {
            super(props, ctx);
            this.provides = ctx[name];
          }

          render() {
            const props = { ...this.props,
              ...mapProvides(this.provides)
            };
            return React.createElement(Component, props);
          }

        }

        const displayName = Component.displayName || Component.name || 'Anonymous';
        HOC.displayName = `With${capitalize(name)}(${displayName})`;
        HOC.contextTypes = {
          [name]: PropTypes.any.isRequired
        };
        return HOC;
      };
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvYy5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVNlcnZpY2UiLCJQcm9wVHlwZXMiLCJjYXBpdGFsaXplIiwic3RyIiwicmVwbGFjZSIsImMiLCJ0b1VwcGVyQ2FzZSIsImNyZWF0ZSIsIm5hbWUiLCJtYXBQcm92aWRlc1RvUHJvcHMiLCJ0b2tlbiIsIm1hcFByb3ZpZGVzIiwicHJvdmlkZXMiLCJfdG9rZW4iLCJDb21wb25lbnQiLCJXcmFwcGVyIiwicHJvcHMiLCJzZXJ2aWNlIiwiY3JlYXRlRWxlbWVudCIsImRpc3BsYXlOYW1lIiwiSE9DIiwiY29uc3RydWN0b3IiLCJjdHgiLCJyZW5kZXIiLCJjb250ZXh0VHlwZXMiLCJhbnkiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQVFBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLFNBQVFDLFVBQVIsUUFBeUIsY0FBekI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCOztBQUdBLFNBQVNDLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlDO0FBQ3ZDLFNBQU9BLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLElBQVosRUFBa0JDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxXQUFGLEVBQXZCLENBQVA7QUFDRDs7QUFHRCxlQUFlO0FBQ2JDLEVBQUFBLE1BQU0sRUFBRSxDQUNOQyxJQURNLEVBRU5DLGtCQUZNLEVBR05DLEtBSE0sS0FJTztBQUNiLFVBQU1DLFdBQVcsR0FBR0Ysa0JBQWtCLEdBQ2xDQSxrQkFEa0MsR0FFbENHLFFBQVEsS0FBSztBQUFDLE9BQUNKLElBQUQsR0FBUUk7QUFBVCxLQUFMLENBRlo7QUFHQSxVQUFNQyxNQUFNLEdBQUdILEtBQWYsQ0FKYSxDQUlTOztBQUN0QixRQUFJRyxNQUFKLEVBQVk7QUFDVjtBQUNBLGFBQVFDLFNBQUQsSUFBdUM7QUFDNUMsY0FBTUMsT0FBTyxHQUFJQyxLQUFELElBQTZCO0FBQzNDLGdCQUFNQyxPQUFPLEdBQUdqQixVQUFVLENBQUNhLE1BQUQsQ0FBMUI7QUFFQSxpQkFBT2QsS0FBSyxDQUFDbUIsYUFBTixDQUFvQkosU0FBcEIsRUFBK0IsRUFDcEMsR0FBR0UsS0FEaUM7QUFFcEMsZUFBR0wsV0FBVyxDQUFDTSxPQUFEO0FBRnNCLFdBQS9CLENBQVA7QUFJRCxTQVBEOztBQVFBLGNBQU1FLFdBQVcsR0FDZkwsU0FBUyxDQUFDSyxXQUFWLElBQXlCTCxTQUFTLENBQUNOLElBQW5DLElBQTJDLFdBRDdDO0FBRUFPLFFBQUFBLE9BQU8sQ0FBQ0ksV0FBUixHQUF1QixPQUFNakIsVUFBVSxDQUFDTSxJQUFELENBQU8sSUFBR1csV0FBWSxHQUE3RDtBQUNBLGVBQU9KLE9BQVA7QUFDRCxPQWJEO0FBY0QsS0FoQkQsTUFnQk87QUFDTDtBQUNBLGFBQVFELFNBQUQsSUFBdUM7QUFDNUMsY0FBTU0sR0FBTixTQUFrQnJCLEtBQUssQ0FBQ2UsU0FBeEIsQ0FBcUM7QUFHbkNPLFVBQUFBLFdBQVcsQ0FBQ0wsS0FBRCxFQUFXTSxHQUFYLEVBQW1CO0FBQzVCLGtCQUFNTixLQUFOLEVBQWFNLEdBQWI7QUFDQSxpQkFBS1YsUUFBTCxHQUFnQlUsR0FBRyxDQUFDZCxJQUFELENBQW5CO0FBQ0Q7O0FBQ0RlLFVBQUFBLE1BQU0sR0FBRztBQUNQLGtCQUFNUCxLQUFLLEdBQUcsRUFBQyxHQUFHLEtBQUtBLEtBQVQ7QUFBZ0IsaUJBQUdMLFdBQVcsQ0FBQyxLQUFLQyxRQUFOO0FBQTlCLGFBQWQ7QUFDQSxtQkFBT2IsS0FBSyxDQUFDbUIsYUFBTixDQUFvQkosU0FBcEIsRUFBK0JFLEtBQS9CLENBQVA7QUFDRDs7QUFWa0M7O0FBWXJDLGNBQU1HLFdBQVcsR0FDZkwsU0FBUyxDQUFDSyxXQUFWLElBQXlCTCxTQUFTLENBQUNOLElBQW5DLElBQTJDLFdBRDdDO0FBRUFZLFFBQUFBLEdBQUcsQ0FBQ0QsV0FBSixHQUFtQixPQUFNakIsVUFBVSxDQUFDTSxJQUFELENBQU8sSUFBR1csV0FBWSxHQUF6RDtBQUNBQyxRQUFBQSxHQUFHLENBQUNJLFlBQUosR0FBbUI7QUFDakIsV0FBQ2hCLElBQUQsR0FBUVAsU0FBUyxDQUFDd0IsR0FBVixDQUFjQztBQURMLFNBQW5CO0FBR0EsZUFBT04sR0FBUDtBQUNELE9BcEJEO0FBcUJEO0FBQ0Y7QUFsRFksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlU2VydmljZX0gZnJvbSAnLi9jb250ZXh0LmpzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdHlwZSB7VG9rZW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXi4vLCBjID0+IGMudG9VcHBlckNhc2UoKSk7XG59XG5cbnR5cGUgUmVhY3RIT0MgPSAoUmVhY3QuQ29tcG9uZW50VHlwZTwqPikgPT4gUmVhY3QuQ29tcG9uZW50VHlwZTwqPjtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3JlYXRlOiAoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIG1hcFByb3ZpZGVzVG9Qcm9wcz86IE9iamVjdCA9PiBPYmplY3QsXG4gICAgdG9rZW4/OiBUb2tlbjwqPlxuICApOiBSZWFjdEhPQyA9PiB7XG4gICAgY29uc3QgbWFwUHJvdmlkZXMgPSBtYXBQcm92aWRlc1RvUHJvcHNcbiAgICAgID8gbWFwUHJvdmlkZXNUb1Byb3BzXG4gICAgICA6IHByb3ZpZGVzID0+ICh7W25hbWVdOiBwcm92aWRlc30pO1xuICAgIGNvbnN0IF90b2tlbiA9IHRva2VuOyAvLyBNYWtlIHRva2VuIGNvbnN0YW50IGZvciBmbG93XG4gICAgaWYgKF90b2tlbikge1xuICAgICAgLy8gVXNlIG5ldyBDb250ZXh0IHRocm91Z2ggdXNlU2VydmljZSBob29rXG4gICAgICByZXR1cm4gKENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTwqPikgPT4ge1xuICAgICAgICBjb25zdCBXcmFwcGVyID0gKHByb3BzPzoge1tzdHJpbmddOiBhbnl9KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2VydmljZSA9IHVzZVNlcnZpY2UoX3Rva2VuKTtcblxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICAuLi5tYXBQcm92aWRlcyhzZXJ2aWNlKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPVxuICAgICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgICAgICAgV3JhcHBlci5kaXNwbGF5TmFtZSA9IGBXaXRoJHtjYXBpdGFsaXplKG5hbWUpfSgke2Rpc3BsYXlOYW1lfSlgO1xuICAgICAgICByZXR1cm4gV3JhcHBlcjtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzZSBsZWdhY3kgQ29udGV4dFxuICAgICAgcmV0dXJuIChDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8Kj4pID0+IHtcbiAgICAgICAgY2xhc3MgSE9DIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PCo+IHtcbiAgICAgICAgICBwcm92aWRlczogYW55O1xuXG4gICAgICAgICAgY29uc3RydWN0b3IocHJvcHM6ICosIGN0eDogKikge1xuICAgICAgICAgICAgc3VwZXIocHJvcHMsIGN0eCk7XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVzID0gY3R4W25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHsuLi50aGlzLnByb3BzLCAuLi5tYXBQcm92aWRlcyh0aGlzLnByb3ZpZGVzKX07XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPVxuICAgICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgICAgICAgSE9DLmRpc3BsYXlOYW1lID0gYFdpdGgke2NhcGl0YWxpemUobmFtZSl9KCR7ZGlzcGxheU5hbWV9KWA7XG4gICAgICAgIEhPQy5jb250ZXh0VHlwZXMgPSB7XG4gICAgICAgICAgW25hbWVdOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBIT0M7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbn07XG4iXX0=