function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/** Copyright (c) 2019 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
export const FusionContext = React.createContext({});
export const ServiceContext = React.createContext(() => {
  throw new Error('`ServiceContext.Provider` was not found. This occurs if you are attempting to use `ServiceContext` in a non-React Fusion.js application.');
});
export function useService(token) {
  const getService = React.useContext(ServiceContext);
  const provides = getService(token);
  return provides;
}
export function ServiceConsumer({
  token,
  children
}) {
  return React.createElement(ServiceContext.Consumer, null, getService => {
    const provides = getService(token);
    return children(provides);
  });
}

function getServices(getService, deps) {
  const services = {};
  Object.keys(deps).forEach(name => {
    services[name] = getService(deps[name]);
  });
  return services;
}

const identity = i => i;

export function withServices(deps, mapServicesToProps = identity) {
  function resolve(getService) {
    const services = getServices(getService, deps);
    const serviceProps = mapServicesToProps(services);
    return serviceProps;
  }

  return Component => {
    return function WithServices(props) {
      return React.createElement(ServiceContext.Consumer, null, getService => React.createElement(Component, _extends({}, resolve(getService), props)));
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRleHQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJGdXNpb25Db250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIlNlcnZpY2VDb250ZXh0IiwiRXJyb3IiLCJ1c2VTZXJ2aWNlIiwidG9rZW4iLCJnZXRTZXJ2aWNlIiwidXNlQ29udGV4dCIsInByb3ZpZGVzIiwiU2VydmljZUNvbnN1bWVyIiwiY2hpbGRyZW4iLCJnZXRTZXJ2aWNlcyIsImRlcHMiLCJzZXJ2aWNlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibmFtZSIsImlkZW50aXR5IiwiaSIsIndpdGhTZXJ2aWNlcyIsIm1hcFNlcnZpY2VzVG9Qcm9wcyIsInJlc29sdmUiLCJzZXJ2aWNlUHJvcHMiLCJDb21wb25lbnQiLCJXaXRoU2VydmljZXMiLCJwcm9wcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQU9BLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUdBLE9BQU8sTUFBTUMsYUFBYSxHQUFHRCxLQUFLLENBQUNFLGFBQU4sQ0FBeUIsRUFBekIsQ0FBdEI7QUFDUCxPQUFPLE1BQU1DLGNBQWMsR0FBR0gsS0FBSyxDQUFDRSxhQUFOLENBQXlCLE1BQU07QUFDM0QsUUFBTSxJQUFJRSxLQUFKLENBQ0osMElBREksQ0FBTjtBQUdELENBSjZCLENBQXZCO0FBUVAsT0FBTyxTQUFTQyxVQUFULENBQThCQyxLQUE5QixFQUFzRTtBQUMzRSxRQUFNQyxVQUFVLEdBQUdQLEtBQUssQ0FBQ1EsVUFBTixDQUNqQkwsY0FEaUIsQ0FBbkI7QUFHQSxRQUFNTSxRQUFRLEdBQUdGLFVBQVUsQ0FBQ0QsS0FBRCxDQUEzQjtBQUNBLFNBQU9HLFFBQVA7QUFDRDtBQU9ELE9BQU8sU0FBU0MsZUFBVCxDQUFtQztBQUN4Q0osRUFBQUEsS0FEd0M7QUFFeENLLEVBQUFBO0FBRndDLENBQW5DLEVBRzRCO0FBQ2pDLFNBQ0Usb0JBQUMsY0FBRCxDQUFnQixRQUFoQixRQUNJSixVQUFELElBQXFEO0FBQ3BELFVBQU1FLFFBQVEsR0FBR0YsVUFBVSxDQUFDRCxLQUFELENBQTNCO0FBQ0EsV0FBT0ssUUFBUSxDQUFDRixRQUFELENBQWY7QUFDRCxHQUpILENBREY7QUFRRDs7QUFPRCxTQUFTRyxXQUFULENBQXFCTCxVQUFyQixFQUFpQ00sSUFBakMsRUFBK0Q7QUFDN0QsUUFBTUMsUUFBUSxHQUFHLEVBQWpCO0FBRUFDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxJQUFaLEVBQWtCSSxPQUFsQixDQUEyQkMsSUFBRCxJQUFrQjtBQUMxQ0osSUFBQUEsUUFBUSxDQUFDSSxJQUFELENBQVIsR0FBaUJYLFVBQVUsQ0FBQ00sSUFBSSxDQUFDSyxJQUFELENBQUwsQ0FBM0I7QUFDRCxHQUZEO0FBSUEsU0FBT0osUUFBUDtBQUNEOztBQUVELE1BQU1LLFFBQVEsR0FBR0MsQ0FBQyxJQUFJQSxDQUF0Qjs7QUFFQSxPQUFPLFNBQVNDLFlBQVQsQ0FDTFIsSUFESyxFQUVMUyxrQkFBMEIsR0FBR0gsUUFGeEIsRUFHTDtBQUNBLFdBQVNJLE9BQVQsQ0FBaUJoQixVQUFqQixFQUE2QjtBQUMzQixVQUFNTyxRQUFRLEdBQUdGLFdBQVcsQ0FBQ0wsVUFBRCxFQUFhTSxJQUFiLENBQTVCO0FBQ0EsVUFBTVcsWUFBWSxHQUFHRixrQkFBa0IsQ0FBQ1IsUUFBRCxDQUF2QztBQUVBLFdBQU9VLFlBQVA7QUFDRDs7QUFFRCxTQUFRQyxTQUFELElBQXVDO0FBQzVDLFdBQU8sU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBcUM7QUFDMUMsYUFDRSxvQkFBQyxjQUFELENBQWdCLFFBQWhCLFFBQ0lwQixVQUFELElBQ0Msb0JBQUMsU0FBRCxlQUFlZ0IsT0FBTyxDQUFDaEIsVUFBRCxDQUF0QixFQUF3Q29CLEtBQXhDLEVBRkosQ0FERjtBQU9ELEtBUkQ7QUFTRCxHQVZEO0FBV0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE5IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUge0VsZW1lbnR9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IEZ1c2lvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PGFueT4oe30pO1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxhbnk+KCgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICdgU2VydmljZUNvbnRleHQuUHJvdmlkZXJgIHdhcyBub3QgZm91bmQuIFRoaXMgb2NjdXJzIGlmIHlvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYFNlcnZpY2VDb250ZXh0YCBpbiBhIG5vbi1SZWFjdCBGdXNpb24uanMgYXBwbGljYXRpb24uJ1xuICApO1xufSk7XG5cbnR5cGUgUmV0dXJuc1R5cGU8VD4gPSAoKSA9PiBUO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VydmljZTxUU2VydmljZT4odG9rZW46IFJldHVybnNUeXBlPFRTZXJ2aWNlPik6IFRTZXJ2aWNlIHtcbiAgY29uc3QgZ2V0U2VydmljZSA9IFJlYWN0LnVzZUNvbnRleHQ8KFJldHVybnNUeXBlPFRTZXJ2aWNlPikgPT4gVFNlcnZpY2U+KFxuICAgIFNlcnZpY2VDb250ZXh0XG4gICk7XG4gIGNvbnN0IHByb3ZpZGVzID0gZ2V0U2VydmljZSh0b2tlbik7XG4gIHJldHVybiBwcm92aWRlcztcbn1cblxudHlwZSBTZXJ2aWNlQ29uc3VtZXJQcm9wczxUU2VydmljZT4gPSB7XG4gIHRva2VuOiBSZXR1cm5zVHlwZTxUU2VydmljZT4sXG4gIGNoaWxkcmVuOiBUU2VydmljZSA9PiBFbGVtZW50PGFueT4sXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gU2VydmljZUNvbnN1bWVyPFRTZXJ2aWNlPih7XG4gIHRva2VuLFxuICBjaGlsZHJlbixcbn06IFNlcnZpY2VDb25zdW1lclByb3BzPFRTZXJ2aWNlPikge1xuICByZXR1cm4gKFxuICAgIDxTZXJ2aWNlQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHsoZ2V0U2VydmljZTogKFJldHVybnNUeXBlPFRTZXJ2aWNlPikgPT4gVFNlcnZpY2UpID0+IHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBnZXRTZXJ2aWNlKHRva2VuKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuKHByb3ZpZGVzKTtcbiAgICAgIH19XG4gICAgPC9TZXJ2aWNlQ29udGV4dC5Db25zdW1lcj5cbiAgKTtcbn1cblxudHlwZSBEZXBlbmRlbmNpZXMgPSB7W3N0cmluZ106IFJldHVybnNUeXBlPG1peGVkPn07XG50eXBlIFNlcnZpY2VzID0ge1tzdHJpbmddOiBSZXR1cm5zVHlwZTxtaXhlZD59O1xudHlwZSBQcm9wcyA9IHtbc3RyaW5nXTogYW55fTtcbnR5cGUgTWFwcGVyID0gU2VydmljZXMgPT4gUHJvcHM7XG5cbmZ1bmN0aW9uIGdldFNlcnZpY2VzKGdldFNlcnZpY2UsIGRlcHM6IERlcGVuZGVuY2llcyk6IFNlcnZpY2VzIHtcbiAgY29uc3Qgc2VydmljZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhkZXBzKS5mb3JFYWNoKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBzZXJ2aWNlc1tuYW1lXSA9IGdldFNlcnZpY2UoZGVwc1tuYW1lXSk7XG4gIH0pO1xuXG4gIHJldHVybiBzZXJ2aWNlcztcbn1cblxuY29uc3QgaWRlbnRpdHkgPSBpID0+IGk7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2VydmljZXMoXG4gIGRlcHM6IERlcGVuZGVuY2llcyxcbiAgbWFwU2VydmljZXNUb1Byb3BzOiBNYXBwZXIgPSBpZGVudGl0eVxuKSB7XG4gIGZ1bmN0aW9uIHJlc29sdmUoZ2V0U2VydmljZSkge1xuICAgIGNvbnN0IHNlcnZpY2VzID0gZ2V0U2VydmljZXMoZ2V0U2VydmljZSwgZGVwcyk7XG4gICAgY29uc3Qgc2VydmljZVByb3BzID0gbWFwU2VydmljZXNUb1Byb3BzKHNlcnZpY2VzKTtcblxuICAgIHJldHVybiBzZXJ2aWNlUHJvcHM7XG4gIH1cblxuICByZXR1cm4gKENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTwqPikgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBXaXRoU2VydmljZXMocHJvcHM/OiBQcm9wcykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFNlcnZpY2VDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgIHsoZ2V0U2VydmljZTogPFRTZXJ2aWNlPihSZXR1cm5zVHlwZTxUU2VydmljZT4pID0+IFRTZXJ2aWNlKSA9PiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IHsuLi5yZXNvbHZlKGdldFNlcnZpY2UpfSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TZXJ2aWNlQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICk7XG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==