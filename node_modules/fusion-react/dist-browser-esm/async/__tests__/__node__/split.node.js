/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-disable react/no-multi-comp */
import * as React from 'react';
import { renderToString } from 'react-dom/server';
import Provider from '../../prepare-provider';
import { prepare, split } from '../../index.js';
test('Preparing an app with an async component', async () => {
  function DeferredComponent(props) {
    return React.createElement("div", null, "Loaded");
  }

  function LoadingComponent() {
    return React.createElement("div", null, "Loading");
  }

  function ErrorComponent() {
    return React.createElement("div", null, "Failed");
  }

  const ToTest = split({
    defer: false,
    load: () => Promise.resolve({
      default: DeferredComponent
    }),
    LoadingComponent,
    ErrorComponent
  });
  const app = React.createElement(Provider, null, React.createElement(ToTest, {
    foo: "foo"
  }));
  expect(/Loading/.test(renderToString(app))).toBeTruthy();
  await prepare(app);
  expect(/Loaded/.test(renderToString(app))).toBeTruthy();

  try {
    await prepare(app);
  } catch (e) {
    expect(e).toBeFalsy();
  }
});
test('Preparing an app with an errored async component', async () => {
  function LoadingComponent() {
    return React.createElement("div", null, "Loading");
  }

  function ErrorComponent() {
    return React.createElement("div", null, "Failed");
  }

  const ToTest = split({
    defer: false,
    load: () => Promise.reject(new Error('failed')),
    LoadingComponent,
    ErrorComponent
  });
  const app = React.createElement(Provider, null, React.createElement(ToTest, null));
  expect(/Loading/.test(renderToString(app))).toBeTruthy();
  await prepare(app);
  expect(/Failed/.test(renderToString(app))).toBeTruthy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwbGl0Lm5vZGUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXJUb1N0cmluZyIsIlByb3ZpZGVyIiwicHJlcGFyZSIsInNwbGl0IiwidGVzdCIsIkRlZmVycmVkQ29tcG9uZW50IiwicHJvcHMiLCJMb2FkaW5nQ29tcG9uZW50IiwiRXJyb3JDb21wb25lbnQiLCJUb1Rlc3QiLCJkZWZlciIsImxvYWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRlZmF1bHQiLCJhcHAiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiZSIsInRvQmVGYWxzeSIsInJlamVjdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTtBQUNBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLFNBQVFDLGNBQVIsUUFBNkIsa0JBQTdCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQix3QkFBckI7QUFDQSxTQUFRQyxPQUFSLEVBQWlCQyxLQUFqQixRQUE2QixnQkFBN0I7QUFFQUMsSUFBSSxDQUFDLDBDQUFELEVBQTZDLFlBQVk7QUFDM0QsV0FBU0MsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQWdEO0FBQzlDLFdBQU8sMENBQVA7QUFDRDs7QUFDRCxXQUFTQyxnQkFBVCxHQUE0QjtBQUMxQixXQUFPLDJDQUFQO0FBQ0Q7O0FBQ0QsV0FBU0MsY0FBVCxHQUEwQjtBQUN4QixXQUFPLDBDQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsTUFBTSxHQUFHTixLQUFLLENBQUM7QUFDbkJPLElBQUFBLEtBQUssRUFBRSxLQURZO0FBRW5CQyxJQUFBQSxJQUFJLEVBQUUsTUFBT0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCO0FBQUNDLE1BQUFBLE9BQU8sRUFBRVQ7QUFBVixLQUFoQixDQUZNO0FBR25CRSxJQUFBQSxnQkFIbUI7QUFJbkJDLElBQUFBO0FBSm1CLEdBQUQsQ0FBcEI7QUFPQSxRQUFNTyxHQUFHLEdBQ1Asb0JBQUMsUUFBRCxRQUNFLG9CQUFDLE1BQUQ7QUFBUSxJQUFBLEdBQUcsRUFBQztBQUFaLElBREYsQ0FERjtBQU1BQyxFQUFBQSxNQUFNLENBQUMsVUFBVVosSUFBVixDQUFlSixjQUFjLENBQUNlLEdBQUQsQ0FBN0IsQ0FBRCxDQUFOLENBQTRDRSxVQUE1QztBQUVBLFFBQU1mLE9BQU8sQ0FBQ2EsR0FBRCxDQUFiO0FBRUFDLEVBQUFBLE1BQU0sQ0FBQyxTQUFTWixJQUFULENBQWNKLGNBQWMsQ0FBQ2UsR0FBRCxDQUE1QixDQUFELENBQU4sQ0FBMkNFLFVBQTNDOztBQUNBLE1BQUk7QUFDRixVQUFNZixPQUFPLENBQUNhLEdBQUQsQ0FBYjtBQUNELEdBRkQsQ0FFRSxPQUFPRyxDQUFQLEVBQVU7QUFDVkYsSUFBQUEsTUFBTSxDQUFDRSxDQUFELENBQU4sQ0FBVUMsU0FBVjtBQUNEO0FBQ0YsQ0FsQ0csQ0FBSjtBQW9DQWYsSUFBSSxDQUFDLGtEQUFELEVBQXFELFlBQVk7QUFDbkUsV0FBU0csZ0JBQVQsR0FBNEI7QUFDMUIsV0FBTywyQ0FBUDtBQUNEOztBQUNELFdBQVNDLGNBQVQsR0FBMEI7QUFDeEIsV0FBTywwQ0FBUDtBQUNEOztBQUVELFFBQU1DLE1BQU0sR0FBR04sS0FBSyxDQUFDO0FBQ25CTyxJQUFBQSxLQUFLLEVBQUUsS0FEWTtBQUVuQkMsSUFBQUEsSUFBSSxFQUFFLE1BQU9DLE9BQU8sQ0FBQ1EsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSxRQUFWLENBQWYsQ0FGTTtBQUduQmQsSUFBQUEsZ0JBSG1CO0FBSW5CQyxJQUFBQTtBQUptQixHQUFELENBQXBCO0FBT0EsUUFBTU8sR0FBRyxHQUNQLG9CQUFDLFFBQUQsUUFDRSxvQkFBQyxNQUFELE9BREYsQ0FERjtBQU1BQyxFQUFBQSxNQUFNLENBQUMsVUFBVVosSUFBVixDQUFlSixjQUFjLENBQUNlLEdBQUQsQ0FBN0IsQ0FBRCxDQUFOLENBQTRDRSxVQUE1QztBQUNBLFFBQU1mLE9BQU8sQ0FBQ2EsR0FBRCxDQUFiO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQyxTQUFTWixJQUFULENBQWNKLGNBQWMsQ0FBQ2UsR0FBRCxDQUE1QixDQUFELENBQU4sQ0FBMkNFLFVBQTNDO0FBQ0QsQ0F4QkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyVG9TdHJpbmd9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInO1xuaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4uLy4uL3ByZXBhcmUtcHJvdmlkZXInO1xuaW1wb3J0IHtwcmVwYXJlLCBzcGxpdH0gZnJvbSAnLi4vLi4vaW5kZXguanMnO1xuXG50ZXN0KCdQcmVwYXJpbmcgYW4gYXBwIHdpdGggYW4gYXN5bmMgY29tcG9uZW50JywgYXN5bmMgKCkgPT4ge1xuICBmdW5jdGlvbiBEZWZlcnJlZENvbXBvbmVudChwcm9wczoge2ZvbzogJ2Zvbyd9KSB7XG4gICAgcmV0dXJuIDxkaXY+TG9hZGVkPC9kaXY+O1xuICB9XG4gIGZ1bmN0aW9uIExvYWRpbmdDb21wb25lbnQoKSB7XG4gICAgcmV0dXJuIDxkaXY+TG9hZGluZzwvZGl2PjtcbiAgfVxuICBmdW5jdGlvbiBFcnJvckNvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gPGRpdj5GYWlsZWQ8L2Rpdj47XG4gIH1cblxuICBjb25zdCBUb1Rlc3QgPSBzcGxpdCh7XG4gICAgZGVmZXI6IGZhbHNlLFxuICAgIGxvYWQ6ICgpID0+IChQcm9taXNlLnJlc29sdmUoe2RlZmF1bHQ6IERlZmVycmVkQ29tcG9uZW50fSk6IGFueSksXG4gICAgTG9hZGluZ0NvbXBvbmVudCxcbiAgICBFcnJvckNvbXBvbmVudCxcbiAgfSk7XG5cbiAgY29uc3QgYXBwID0gKFxuICAgIDxQcm92aWRlcj5cbiAgICAgIDxUb1Rlc3QgZm9vPVwiZm9vXCIgLz5cbiAgICA8L1Byb3ZpZGVyPlxuICApO1xuXG4gIGV4cGVjdCgvTG9hZGluZy8udGVzdChyZW5kZXJUb1N0cmluZyhhcHApKSkudG9CZVRydXRoeSgpO1xuXG4gIGF3YWl0IHByZXBhcmUoYXBwKTtcblxuICBleHBlY3QoL0xvYWRlZC8udGVzdChyZW5kZXJUb1N0cmluZyhhcHApKSkudG9CZVRydXRoeSgpO1xuICB0cnkge1xuICAgIGF3YWl0IHByZXBhcmUoYXBwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGV4cGVjdChlKS50b0JlRmFsc3koKTtcbiAgfVxufSk7XG5cbnRlc3QoJ1ByZXBhcmluZyBhbiBhcHAgd2l0aCBhbiBlcnJvcmVkIGFzeW5jIGNvbXBvbmVudCcsIGFzeW5jICgpID0+IHtcbiAgZnVuY3Rpb24gTG9hZGluZ0NvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+O1xuICB9XG4gIGZ1bmN0aW9uIEVycm9yQ29tcG9uZW50KCkge1xuICAgIHJldHVybiA8ZGl2PkZhaWxlZDwvZGl2PjtcbiAgfVxuXG4gIGNvbnN0IFRvVGVzdCA9IHNwbGl0KHtcbiAgICBkZWZlcjogZmFsc2UsXG4gICAgbG9hZDogKCkgPT4gKFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignZmFpbGVkJykpOiBhbnkpLFxuICAgIExvYWRpbmdDb21wb25lbnQsXG4gICAgRXJyb3JDb21wb25lbnQsXG4gIH0pO1xuXG4gIGNvbnN0IGFwcCA9IChcbiAgICA8UHJvdmlkZXI+XG4gICAgICA8VG9UZXN0IC8+XG4gICAgPC9Qcm92aWRlcj5cbiAgKTtcblxuICBleHBlY3QoL0xvYWRpbmcvLnRlc3QocmVuZGVyVG9TdHJpbmcoYXBwKSkpLnRvQmVUcnV0aHkoKTtcbiAgYXdhaXQgcHJlcGFyZShhcHApO1xuICBleHBlY3QoL0ZhaWxlZC8udGVzdChyZW5kZXJUb1N0cmluZyhhcHApKSkudG9CZVRydXRoeSgpO1xufSk7XG4iXX0=