/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import PropTypes from 'prop-types';
import ReactPlugin from '../plugin';
test('.create works', done => {
  class Foo {
    foo() {}

  }

  const plugin = ReactPlugin.create('foo', {}); // $FlowFixMe

  const middleware = plugin.middleware({}, new Foo());
  const element = React.createElement('div');
  const ctx = {
    element
  }; // $FlowFixMe

  middleware(ctx, () => Promise.resolve()).then(() => {
    expect(ctx.element).not.toBe(element); // $FlowFixMe

    expect(ctx.element.type.displayName).toBe('FooProvider'); // $FlowFixMe

    expect(ctx.element.type.childContextTypes.foo).toBe(PropTypes.any.isRequired);
    done();
  });
});
test('idempotency with wrapped middleware', async () => {
  let called = 0;
  const foo = 'foo';
  const bar = 'bar';
  const baz = 'baz';
  const expectedDeps = [foo, bar];
  const expectedSelf = [bar, baz];
  const plugin = ReactPlugin.create('foo', {
    middleware: (deps, self) => async () => {
      expect(deps).toBe(expectedDeps.shift());
      expect(self).toBe(expectedSelf.shift());
      called += 1;
    }
  }); // $FlowFixMe

  const middleware = plugin.middleware(foo, bar); // $FlowFixMe

  const middleware2 = plugin.middleware(bar, baz);
  const element = React.createElement('div');
  const ctx = {
    element
  }; // $FlowFixMe

  middleware(ctx, () => Promise.resolve()); // $FlowFixMe

  middleware2(ctx, () => Promise.resolve());
  expect(called).toBe(2);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbi5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsIlJlYWN0UGx1Z2luIiwidGVzdCIsImRvbmUiLCJGb28iLCJmb28iLCJwbHVnaW4iLCJjcmVhdGUiLCJtaWRkbGV3YXJlIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJleHBlY3QiLCJub3QiLCJ0b0JlIiwidHlwZSIsImRpc3BsYXlOYW1lIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJhbnkiLCJpc1JlcXVpcmVkIiwiY2FsbGVkIiwiYmFyIiwiYmF6IiwiZXhwZWN0ZWREZXBzIiwiZXhwZWN0ZWRTZWxmIiwiZGVwcyIsInNlbGYiLCJzaGlmdCIsIm1pZGRsZXdhcmUyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQVFBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFFQSxPQUFPQyxXQUFQLE1BQXdCLFdBQXhCO0FBRUFDLElBQUksQ0FBQyxlQUFELEVBQWtCQyxJQUFJLElBQUk7QUFDNUIsUUFBTUMsR0FBTixDQUFVO0FBQ1JDLElBQUFBLEdBQUcsR0FBRyxDQUFFOztBQURBOztBQUdWLFFBQU1DLE1BQU0sR0FBR0wsV0FBVyxDQUFDTSxNQUFaLENBQW1CLEtBQW5CLEVBQTBCLEVBQTFCLENBQWYsQ0FKNEIsQ0FLNUI7O0FBQ0EsUUFBTUMsVUFBVSxHQUFHRixNQUFNLENBQUNFLFVBQVAsQ0FBa0IsRUFBbEIsRUFBc0IsSUFBSUosR0FBSixFQUF0QixDQUFuQjtBQUNBLFFBQU1LLE9BQU8sR0FBR1YsS0FBSyxDQUFDVyxhQUFOLENBQW9CLEtBQXBCLENBQWhCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHO0FBQUNGLElBQUFBO0FBQUQsR0FBWixDQVI0QixDQVM1Qjs7QUFDQUQsRUFBQUEsVUFBVSxDQUFDRyxHQUFELEVBQU0sTUFBTUMsT0FBTyxDQUFDQyxPQUFSLEVBQVosQ0FBVixDQUF5Q0MsSUFBekMsQ0FBOEMsTUFBTTtBQUNsREMsSUFBQUEsTUFBTSxDQUFDSixHQUFHLENBQUNGLE9BQUwsQ0FBTixDQUFvQk8sR0FBcEIsQ0FBd0JDLElBQXhCLENBQTZCUixPQUE3QixFQURrRCxDQUVsRDs7QUFDQU0sSUFBQUEsTUFBTSxDQUFDSixHQUFHLENBQUNGLE9BQUosQ0FBWVMsSUFBWixDQUFpQkMsV0FBbEIsQ0FBTixDQUFxQ0YsSUFBckMsQ0FBMEMsYUFBMUMsRUFIa0QsQ0FJbEQ7O0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0osR0FBRyxDQUFDRixPQUFKLENBQVlTLElBQVosQ0FBaUJFLGlCQUFqQixDQUFtQ2YsR0FBcEMsQ0FBTixDQUErQ1ksSUFBL0MsQ0FDRWpCLFNBQVMsQ0FBQ3FCLEdBQVYsQ0FBY0MsVUFEaEI7QUFHQW5CLElBQUFBLElBQUk7QUFDTCxHQVREO0FBVUQsQ0FwQkcsQ0FBSjtBQXNCQUQsSUFBSSxDQUFDLHFDQUFELEVBQXdDLFlBQVk7QUFDdEQsTUFBSXFCLE1BQU0sR0FBRyxDQUFiO0FBQ0EsUUFBTWxCLEdBQUcsR0FBRyxLQUFaO0FBQ0EsUUFBTW1CLEdBQUcsR0FBRyxLQUFaO0FBQ0EsUUFBTUMsR0FBRyxHQUFHLEtBQVo7QUFDQSxRQUFNQyxZQUFZLEdBQUcsQ0FBQ3JCLEdBQUQsRUFBTW1CLEdBQU4sQ0FBckI7QUFDQSxRQUFNRyxZQUFZLEdBQUcsQ0FBQ0gsR0FBRCxFQUFNQyxHQUFOLENBQXJCO0FBQ0EsUUFBTW5CLE1BQU0sR0FBR0wsV0FBVyxDQUFDTSxNQUFaLENBQW1CLEtBQW5CLEVBQTBCO0FBQ3ZDQyxJQUFBQSxVQUFVLEVBQUUsQ0FBQ29CLElBQUQsRUFBT0MsSUFBUCxLQUFnQixZQUFZO0FBQ3RDZCxNQUFBQSxNQUFNLENBQUNhLElBQUQsQ0FBTixDQUFhWCxJQUFiLENBQWtCUyxZQUFZLENBQUNJLEtBQWIsRUFBbEI7QUFDQWYsTUFBQUEsTUFBTSxDQUFDYyxJQUFELENBQU4sQ0FBYVosSUFBYixDQUFrQlUsWUFBWSxDQUFDRyxLQUFiLEVBQWxCO0FBQ0FQLE1BQUFBLE1BQU0sSUFBSSxDQUFWO0FBQ0Q7QUFMc0MsR0FBMUIsQ0FBZixDQVBzRCxDQWN0RDs7QUFDQSxRQUFNZixVQUFVLEdBQUdGLE1BQU0sQ0FBQ0UsVUFBUCxDQUFrQkgsR0FBbEIsRUFBdUJtQixHQUF2QixDQUFuQixDQWZzRCxDQWdCdEQ7O0FBQ0EsUUFBTU8sV0FBVyxHQUFHekIsTUFBTSxDQUFDRSxVQUFQLENBQWtCZ0IsR0FBbEIsRUFBdUJDLEdBQXZCLENBQXBCO0FBQ0EsUUFBTWhCLE9BQU8sR0FBR1YsS0FBSyxDQUFDVyxhQUFOLENBQW9CLEtBQXBCLENBQWhCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHO0FBQUNGLElBQUFBO0FBQUQsR0FBWixDQW5Cc0QsQ0FvQnREOztBQUNBRCxFQUFBQSxVQUFVLENBQUNHLEdBQUQsRUFBTSxNQUFNQyxPQUFPLENBQUNDLE9BQVIsRUFBWixDQUFWLENBckJzRCxDQXNCdEQ7O0FBQ0FrQixFQUFBQSxXQUFXLENBQUNwQixHQUFELEVBQU0sTUFBTUMsT0FBTyxDQUFDQyxPQUFSLEVBQVosQ0FBWDtBQUNBRSxFQUFBQSxNQUFNLENBQUNRLE1BQUQsQ0FBTixDQUFlTixJQUFmLENBQW9CLENBQXBCO0FBQ0QsQ0F6QkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBSZWFjdFBsdWdpbiBmcm9tICcuLi9wbHVnaW4nO1xuXG50ZXN0KCcuY3JlYXRlIHdvcmtzJywgZG9uZSA9PiB7XG4gIGNsYXNzIEZvbyB7XG4gICAgZm9vKCkge31cbiAgfVxuICBjb25zdCBwbHVnaW4gPSBSZWFjdFBsdWdpbi5jcmVhdGUoJ2ZvbycsIHt9KTtcbiAgLy8gJEZsb3dGaXhNZVxuICBjb25zdCBtaWRkbGV3YXJlID0gcGx1Z2luLm1pZGRsZXdhcmUoe30sIG5ldyBGb28oKSk7XG4gIGNvbnN0IGVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgY3R4ID0ge2VsZW1lbnR9O1xuICAvLyAkRmxvd0ZpeE1lXG4gIG1pZGRsZXdhcmUoY3R4LCAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSkudGhlbigoKSA9PiB7XG4gICAgZXhwZWN0KGN0eC5lbGVtZW50KS5ub3QudG9CZShlbGVtZW50KTtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgZXhwZWN0KGN0eC5lbGVtZW50LnR5cGUuZGlzcGxheU5hbWUpLnRvQmUoJ0Zvb1Byb3ZpZGVyJyk7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGV4cGVjdChjdHguZWxlbWVudC50eXBlLmNoaWxkQ29udGV4dFR5cGVzLmZvbykudG9CZShcbiAgICAgIFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxuICAgICk7XG4gICAgZG9uZSgpO1xuICB9KTtcbn0pO1xuXG50ZXN0KCdpZGVtcG90ZW5jeSB3aXRoIHdyYXBwZWQgbWlkZGxld2FyZScsIGFzeW5jICgpID0+IHtcbiAgbGV0IGNhbGxlZCA9IDA7XG4gIGNvbnN0IGZvbyA9ICdmb28nO1xuICBjb25zdCBiYXIgPSAnYmFyJztcbiAgY29uc3QgYmF6ID0gJ2Jheic7XG4gIGNvbnN0IGV4cGVjdGVkRGVwcyA9IFtmb28sIGJhcl07XG4gIGNvbnN0IGV4cGVjdGVkU2VsZiA9IFtiYXIsIGJhel07XG4gIGNvbnN0IHBsdWdpbiA9IFJlYWN0UGx1Z2luLmNyZWF0ZSgnZm9vJywge1xuICAgIG1pZGRsZXdhcmU6IChkZXBzLCBzZWxmKSA9PiBhc3luYyAoKSA9PiB7XG4gICAgICBleHBlY3QoZGVwcykudG9CZShleHBlY3RlZERlcHMuc2hpZnQoKSk7XG4gICAgICBleHBlY3Qoc2VsZikudG9CZShleHBlY3RlZFNlbGYuc2hpZnQoKSk7XG4gICAgICBjYWxsZWQgKz0gMTtcbiAgICB9LFxuICB9KTtcbiAgLy8gJEZsb3dGaXhNZVxuICBjb25zdCBtaWRkbGV3YXJlID0gcGx1Z2luLm1pZGRsZXdhcmUoZm9vLCBiYXIpO1xuICAvLyAkRmxvd0ZpeE1lXG4gIGNvbnN0IG1pZGRsZXdhcmUyID0gcGx1Z2luLm1pZGRsZXdhcmUoYmFyLCBiYXopO1xuICBjb25zdCBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGN0eCA9IHtlbGVtZW50fTtcbiAgLy8gJEZsb3dGaXhNZVxuICBtaWRkbGV3YXJlKGN0eCwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAvLyAkRmxvd0ZpeE1lXG4gIG1pZGRsZXdhcmUyKGN0eCwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xuICBleHBlY3QoY2FsbGVkKS50b0JlKDIpO1xufSk7XG4iXX0=