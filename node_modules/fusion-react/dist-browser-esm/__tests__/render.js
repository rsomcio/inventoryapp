/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import { getSimulator } from 'fusion-test-utils';
import App, { SkipPrepareToken } from '../index';
import prepared from '../async/prepared';
test('custom render function', async () => {
  let didRender = false;
  const app = new App(React.createElement('span', null, 'hello'), (el, ctx) => {
    expect(el).toBeTruthy();
    expect(ctx).toBeTruthy();
    didRender = true;
    return 10;
  });
  const simulator = getSimulator(app);
  const ctx = await simulator.render('/');
  expect(ctx.element).toBeTruthy();
  expect(ctx.rendered).toBe(10);
  expect(didRender).toBeTruthy();
});
test('runs prepare', async done => {
  let called = false;
  const Root = prepared(() => {
    called = true;
    return Promise.resolve();
  })(() => {
    return React.createElement('span', null, 'hello');
  });
  const app = new App(React.createElement(Root), () => {
    expect(called).toBe(true);
    done();
  });
  const simulator = getSimulator(app);
  await simulator.render('/');
});
test('skip prepare', async done => {
  const Root = prepared(() => {
    // $FlowFixMe
    done.fail('Should not call this');
    return Promise.resolve();
  })(() => {
    return React.createElement('span', null, 'hello');
  });
  const app = new App(React.createElement(Root), () => {
    done();
  });
  app.register(SkipPrepareToken, true);
  const simulator = getSimulator(app);
  await simulator.render('/');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsImdldFNpbXVsYXRvciIsIkFwcCIsIlNraXBQcmVwYXJlVG9rZW4iLCJwcmVwYXJlZCIsInRlc3QiLCJkaWRSZW5kZXIiLCJhcHAiLCJjcmVhdGVFbGVtZW50IiwiZWwiLCJjdHgiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwic2ltdWxhdG9yIiwicmVuZGVyIiwiZWxlbWVudCIsInJlbmRlcmVkIiwidG9CZSIsImRvbmUiLCJjYWxsZWQiLCJSb290IiwiUHJvbWlzZSIsInJlc29sdmUiLCJmYWlsIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBUUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCO0FBQ0EsU0FBUUMsWUFBUixRQUEyQixtQkFBM0I7QUFDQSxPQUFPQyxHQUFQLElBQWFDLGdCQUFiLFFBQW9DLFVBQXBDO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixtQkFBckI7QUFFQUMsSUFBSSxDQUFDLHdCQUFELEVBQTJCLFlBQVk7QUFDekMsTUFBSUMsU0FBUyxHQUFHLEtBQWhCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHLElBQUlMLEdBQUosQ0FBUUYsS0FBSyxDQUFDUSxhQUFOLENBQW9CLE1BQXBCLEVBQTRCLElBQTVCLEVBQWtDLE9BQWxDLENBQVIsRUFBb0QsQ0FBQ0MsRUFBRCxFQUFLQyxHQUFMLEtBQWE7QUFDM0VDLElBQUFBLE1BQU0sQ0FBQ0YsRUFBRCxDQUFOLENBQVdHLFVBQVg7QUFDQUQsSUFBQUEsTUFBTSxDQUFDRCxHQUFELENBQU4sQ0FBWUUsVUFBWjtBQUNBTixJQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNBLFdBQU8sRUFBUDtBQUNELEdBTFcsQ0FBWjtBQU1BLFFBQU1PLFNBQVMsR0FBR1osWUFBWSxDQUFDTSxHQUFELENBQTlCO0FBQ0EsUUFBTUcsR0FBRyxHQUFHLE1BQU1HLFNBQVMsQ0FBQ0MsTUFBVixDQUFpQixHQUFqQixDQUFsQjtBQUNBSCxFQUFBQSxNQUFNLENBQUNELEdBQUcsQ0FBQ0ssT0FBTCxDQUFOLENBQW9CSCxVQUFwQjtBQUNBRCxFQUFBQSxNQUFNLENBQUNELEdBQUcsQ0FBQ00sUUFBTCxDQUFOLENBQXFCQyxJQUFyQixDQUEwQixFQUExQjtBQUNBTixFQUFBQSxNQUFNLENBQUNMLFNBQUQsQ0FBTixDQUFrQk0sVUFBbEI7QUFDRCxDQWJHLENBQUo7QUFlQVAsSUFBSSxDQUFDLGNBQUQsRUFBaUIsTUFBTWEsSUFBTixJQUFjO0FBQ2pDLE1BQUlDLE1BQU0sR0FBRyxLQUFiO0FBQ0EsUUFBTUMsSUFBSSxHQUFHaEIsUUFBUSxDQUFDLE1BQU07QUFDMUJlLElBQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0EsV0FBT0UsT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDRCxHQUhvQixDQUFSLENBR1YsTUFBTTtBQUNQLFdBQU90QixLQUFLLENBQUNRLGFBQU4sQ0FBb0IsTUFBcEIsRUFBNEIsSUFBNUIsRUFBa0MsT0FBbEMsQ0FBUDtBQUNELEdBTFksQ0FBYjtBQU1BLFFBQU1ELEdBQUcsR0FBRyxJQUFJTCxHQUFKLENBQVFGLEtBQUssQ0FBQ1EsYUFBTixDQUFvQlksSUFBcEIsQ0FBUixFQUFtQyxNQUFNO0FBQ25EVCxJQUFBQSxNQUFNLENBQUNRLE1BQUQsQ0FBTixDQUFlRixJQUFmLENBQW9CLElBQXBCO0FBQ0FDLElBQUFBLElBQUk7QUFDTCxHQUhXLENBQVo7QUFJQSxRQUFNTCxTQUFTLEdBQUdaLFlBQVksQ0FBQ00sR0FBRCxDQUE5QjtBQUNBLFFBQU1NLFNBQVMsQ0FBQ0MsTUFBVixDQUFpQixHQUFqQixDQUFOO0FBQ0QsQ0FkRyxDQUFKO0FBZ0JBVCxJQUFJLENBQUMsY0FBRCxFQUFpQixNQUFNYSxJQUFOLElBQWM7QUFDakMsUUFBTUUsSUFBSSxHQUFHaEIsUUFBUSxDQUFDLE1BQU07QUFDMUI7QUFDQWMsSUFBQUEsSUFBSSxDQUFDSyxJQUFMLENBQVUsc0JBQVY7QUFDQSxXQUFPRixPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNELEdBSm9CLENBQVIsQ0FJVixNQUFNO0FBQ1AsV0FBT3RCLEtBQUssQ0FBQ1EsYUFBTixDQUFvQixNQUFwQixFQUE0QixJQUE1QixFQUFrQyxPQUFsQyxDQUFQO0FBQ0QsR0FOWSxDQUFiO0FBT0EsUUFBTUQsR0FBRyxHQUFHLElBQUlMLEdBQUosQ0FBUUYsS0FBSyxDQUFDUSxhQUFOLENBQW9CWSxJQUFwQixDQUFSLEVBQW1DLE1BQU07QUFDbkRGLElBQUFBLElBQUk7QUFDTCxHQUZXLENBQVo7QUFHQVgsRUFBQUEsR0FBRyxDQUFDaUIsUUFBSixDQUFhckIsZ0JBQWIsRUFBK0IsSUFBL0I7QUFDQSxRQUFNVSxTQUFTLEdBQUdaLFlBQVksQ0FBQ00sR0FBRCxDQUE5QjtBQUNBLFFBQU1NLFNBQVMsQ0FBQ0MsTUFBVixDQUFpQixHQUFqQixDQUFOO0FBQ0QsQ0FkRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtnZXRTaW11bGF0b3J9IGZyb20gJ2Z1c2lvbi10ZXN0LXV0aWxzJztcbmltcG9ydCBBcHAsIHtTa2lwUHJlcGFyZVRva2VufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgcHJlcGFyZWQgZnJvbSAnLi4vYXN5bmMvcHJlcGFyZWQnO1xuXG50ZXN0KCdjdXN0b20gcmVuZGVyIGZ1bmN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICBsZXQgZGlkUmVuZGVyID0gZmFsc2U7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsICdoZWxsbycpLCAoZWwsIGN0eCkgPT4ge1xuICAgIGV4cGVjdChlbCkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChjdHgpLnRvQmVUcnV0aHkoKTtcbiAgICBkaWRSZW5kZXIgPSB0cnVlO1xuICAgIHJldHVybiAxMDtcbiAgfSk7XG4gIGNvbnN0IHNpbXVsYXRvciA9IGdldFNpbXVsYXRvcihhcHApO1xuICBjb25zdCBjdHggPSBhd2FpdCBzaW11bGF0b3IucmVuZGVyKCcvJyk7XG4gIGV4cGVjdChjdHguZWxlbWVudCkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoY3R4LnJlbmRlcmVkKS50b0JlKDEwKTtcbiAgZXhwZWN0KGRpZFJlbmRlcikudG9CZVRydXRoeSgpO1xufSk7XG5cbnRlc3QoJ3J1bnMgcHJlcGFyZScsIGFzeW5jIGRvbmUgPT4ge1xuICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gIGNvbnN0IFJvb3QgPSBwcmVwYXJlZCgoKSA9PiB7XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH0pKCgpID0+IHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsICdoZWxsbycpO1xuICB9KTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChSZWFjdC5jcmVhdGVFbGVtZW50KFJvb3QpLCAoKSA9PiB7XG4gICAgZXhwZWN0KGNhbGxlZCkudG9CZSh0cnVlKTtcbiAgICBkb25lKCk7XG4gIH0pO1xuICBjb25zdCBzaW11bGF0b3IgPSBnZXRTaW11bGF0b3IoYXBwKTtcbiAgYXdhaXQgc2ltdWxhdG9yLnJlbmRlcignLycpO1xufSk7XG5cbnRlc3QoJ3NraXAgcHJlcGFyZScsIGFzeW5jIGRvbmUgPT4ge1xuICBjb25zdCBSb290ID0gcHJlcGFyZWQoKCkgPT4ge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBkb25lLmZhaWwoJ1Nob3VsZCBub3QgY2FsbCB0aGlzJyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9KSgoKSA9PiB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBudWxsLCAnaGVsbG8nKTtcbiAgfSk7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoUmVhY3QuY3JlYXRlRWxlbWVudChSb290KSwgKCkgPT4ge1xuICAgIGRvbmUoKTtcbiAgfSk7XG4gIGFwcC5yZWdpc3RlcihTa2lwUHJlcGFyZVRva2VuLCB0cnVlKTtcbiAgY29uc3Qgc2ltdWxhdG9yID0gZ2V0U2ltdWxhdG9yKGFwcCk7XG4gIGF3YWl0IHNpbXVsYXRvci5yZW5kZXIoJy8nKTtcbn0pO1xuIl19