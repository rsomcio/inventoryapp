"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prepare;

var React = _interopRequireWildcard(require("react"));

var _reactSsrPrepass = _interopRequireDefault(require("react-ssr-prepass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class PrepareState {
  constructor() {
    this.seen = new Map();
    this.pending = new Map();
  }

  isResolved(Component, effectId, effectPromiseThunk) {
    let seenEffectIds = this.seen.get(Component);
    let pendingPromises = this.pending.get(Component); // Initialize if not present

    if (!seenEffectIds) {
      seenEffectIds = new Set();
      this.seen.set(Component, seenEffectIds);
    } // If seen and not pending, then it has been resolved


    if (seenEffectIds.has(effectId) && (!pendingPromises || !pendingPromises.has(effectId))) {
      return true;
    } // If not yet seen, need to start promise


    if (!seenEffectIds.has(effectId)) {
      if (!pendingPromises) {
        pendingPromises = new Map();
        this.pending.set(Component, pendingPromises);
      }

      const effectPromise = effectPromiseThunk();
      seenEffectIds.add(effectId);
      pendingPromises.set(effectId, effectPromise);
    }

    return false;
  }

  consumeAndAwaitPromises() {
    let promises = [];

    for (let map of this.pending.values()) {
      for (let promise of map.values()) {
        promises.push(promise);
      }
    }

    this.pending = new Map(); // clear

    return Promise.all(promises);
  }

}

function prepare(element) {
  const prepareState = new PrepareState();

  class PrepareContextProvider extends React.Component {
    getChildContext() {
      return {
        __IS_PREPARE__: true,
        __PREPARE_STATE__: prepareState
      };
    }

    render() {
      return element;
    }

  }

  PrepareContextProvider.childContextTypes = {
    __PREPARE_STATE__: () => {},
    __IS_PREPARE__: () => {}
  };

  async function process() {
    await (0, _reactSsrPrepass.default)(React.createElement(PrepareContextProvider));

    if (prepareState.pending.size) {
      return prepareState.consumeAndAwaitPromises().then(process);
    }
  }

  return Promise.resolve().then(process);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmUuanMiXSwibmFtZXMiOlsiUHJlcGFyZVN0YXRlIiwiY29uc3RydWN0b3IiLCJzZWVuIiwiTWFwIiwicGVuZGluZyIsImlzUmVzb2x2ZWQiLCJDb21wb25lbnQiLCJlZmZlY3RJZCIsImVmZmVjdFByb21pc2VUaHVuayIsInNlZW5FZmZlY3RJZHMiLCJnZXQiLCJwZW5kaW5nUHJvbWlzZXMiLCJTZXQiLCJzZXQiLCJoYXMiLCJlZmZlY3RQcm9taXNlIiwiYWRkIiwiY29uc3VtZUFuZEF3YWl0UHJvbWlzZXMiLCJwcm9taXNlcyIsIm1hcCIsInZhbHVlcyIsInByb21pc2UiLCJwdXNoIiwiUHJvbWlzZSIsImFsbCIsInByZXBhcmUiLCJlbGVtZW50IiwicHJlcGFyZVN0YXRlIiwiUHJlcGFyZUNvbnRleHRQcm92aWRlciIsIlJlYWN0IiwiZ2V0Q2hpbGRDb250ZXh0IiwiX19JU19QUkVQQVJFX18iLCJfX1BSRVBBUkVfU1RBVEVfXyIsInJlbmRlciIsImNoaWxkQ29udGV4dFR5cGVzIiwicHJvY2VzcyIsImNyZWF0ZUVsZW1lbnQiLCJzaXplIiwidGhlbiIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFRQTs7QUFDQTs7Ozs7Ozs7QUFUQTs7Ozs7OztBQVdBLE1BQU1BLFlBQU4sQ0FBbUI7QUFJakJDLEVBQUFBLFdBQVcsR0FBRztBQUNaLFNBQUtDLElBQUwsR0FBWSxJQUFJQyxHQUFKLEVBQVo7QUFDQSxTQUFLQyxPQUFMLEdBQWUsSUFBSUQsR0FBSixFQUFmO0FBQ0Q7O0FBRURFLEVBQUFBLFVBQVUsQ0FBQ0MsU0FBRCxFQUFZQyxRQUFaLEVBQXNCQyxrQkFBdEIsRUFBMEM7QUFDbEQsUUFBSUMsYUFBYSxHQUFHLEtBQUtQLElBQUwsQ0FBVVEsR0FBVixDQUFjSixTQUFkLENBQXBCO0FBQ0EsUUFBSUssZUFBZSxHQUFHLEtBQUtQLE9BQUwsQ0FBYU0sR0FBYixDQUFpQkosU0FBakIsQ0FBdEIsQ0FGa0QsQ0FJbEQ7O0FBQ0EsUUFBSSxDQUFDRyxhQUFMLEVBQW9CO0FBQ2xCQSxNQUFBQSxhQUFhLEdBQUcsSUFBSUcsR0FBSixFQUFoQjtBQUNBLFdBQUtWLElBQUwsQ0FBVVcsR0FBVixDQUFjUCxTQUFkLEVBQXlCRyxhQUF6QjtBQUNELEtBUmlELENBVWxEOzs7QUFDQSxRQUNFQSxhQUFhLENBQUNLLEdBQWQsQ0FBa0JQLFFBQWxCLE1BQ0MsQ0FBQ0ksZUFBRCxJQUFvQixDQUFDQSxlQUFlLENBQUNHLEdBQWhCLENBQW9CUCxRQUFwQixDQUR0QixDQURGLEVBR0U7QUFDQSxhQUFPLElBQVA7QUFDRCxLQWhCaUQsQ0FrQmxEOzs7QUFDQSxRQUFJLENBQUNFLGFBQWEsQ0FBQ0ssR0FBZCxDQUFrQlAsUUFBbEIsQ0FBTCxFQUFrQztBQUNoQyxVQUFJLENBQUNJLGVBQUwsRUFBc0I7QUFDcEJBLFFBQUFBLGVBQWUsR0FBRyxJQUFJUixHQUFKLEVBQWxCO0FBQ0EsYUFBS0MsT0FBTCxDQUFhUyxHQUFiLENBQWlCUCxTQUFqQixFQUE0QkssZUFBNUI7QUFDRDs7QUFFRCxZQUFNSSxhQUFhLEdBQUdQLGtCQUFrQixFQUF4QztBQUNBQyxNQUFBQSxhQUFhLENBQUNPLEdBQWQsQ0FBa0JULFFBQWxCO0FBQ0FJLE1BQUFBLGVBQWUsQ0FBQ0UsR0FBaEIsQ0FBb0JOLFFBQXBCLEVBQThCUSxhQUE5QjtBQUNEOztBQUVELFdBQU8sS0FBUDtBQUNEOztBQUVERSxFQUFBQSx1QkFBdUIsR0FBRztBQUN4QixRQUFJQyxRQUFRLEdBQUcsRUFBZjs7QUFDQSxTQUFLLElBQUlDLEdBQVQsSUFBZ0IsS0FBS2YsT0FBTCxDQUFhZ0IsTUFBYixFQUFoQixFQUF1QztBQUNyQyxXQUFLLElBQUlDLE9BQVQsSUFBb0JGLEdBQUcsQ0FBQ0MsTUFBSixFQUFwQixFQUFrQztBQUNoQ0YsUUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWNELE9BQWQ7QUFDRDtBQUNGOztBQUVELFNBQUtqQixPQUFMLEdBQWUsSUFBSUQsR0FBSixFQUFmLENBUndCLENBUUU7O0FBQzFCLFdBQU9vQixPQUFPLENBQUNDLEdBQVIsQ0FBWU4sUUFBWixDQUFQO0FBQ0Q7O0FBcERnQjs7QUF1REosU0FBU08sT0FBVCxDQUFpQkMsT0FBakIsRUFBK0I7QUFDNUMsUUFBTUMsWUFBWSxHQUFHLElBQUkzQixZQUFKLEVBQXJCOztBQUVBLFFBQU00QixzQkFBTixTQUFxQ0MsS0FBSyxDQUFDdkIsU0FBM0MsQ0FBeUQ7QUFDdkR3QixJQUFBQSxlQUFlLEdBQUc7QUFDaEIsYUFBTztBQUNMQyxRQUFBQSxjQUFjLEVBQUUsSUFEWDtBQUVMQyxRQUFBQSxpQkFBaUIsRUFBRUw7QUFGZCxPQUFQO0FBSUQ7O0FBQ0RNLElBQUFBLE1BQU0sR0FBRztBQUNQLGFBQU9QLE9BQVA7QUFDRDs7QUFUc0Q7O0FBV3pERSxFQUFBQSxzQkFBc0IsQ0FBQ00saUJBQXZCLEdBQTJDO0FBQ3pDRixJQUFBQSxpQkFBaUIsRUFBRSxNQUFNLENBQUUsQ0FEYztBQUV6Q0QsSUFBQUEsY0FBYyxFQUFFLE1BQU0sQ0FBRTtBQUZpQixHQUEzQzs7QUFLQSxpQkFBZUksT0FBZixHQUF5QjtBQUN2QixVQUFNLDhCQUFXTixLQUFLLENBQUNPLGFBQU4sQ0FBb0JSLHNCQUFwQixDQUFYLENBQU47O0FBRUEsUUFBSUQsWUFBWSxDQUFDdkIsT0FBYixDQUFxQmlDLElBQXpCLEVBQStCO0FBQzdCLGFBQU9WLFlBQVksQ0FBQ1YsdUJBQWIsR0FBdUNxQixJQUF2QyxDQUE0Q0gsT0FBNUMsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1osT0FBTyxDQUFDZ0IsT0FBUixHQUFrQkQsSUFBbEIsQ0FBdUJILE9BQXZCLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzc3JQcmVwYXNzIGZyb20gJ3JlYWN0LXNzci1wcmVwYXNzJztcblxuY2xhc3MgUHJlcGFyZVN0YXRlIHtcbiAgc2VlbjogTWFwPGFueSwgU2V0PHN0cmluZz4+O1xuICBwZW5kaW5nOiBNYXA8YW55LCBNYXA8c3RyaW5nLCBQcm9taXNlPGFueT4+PjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNlZW4gPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5wZW5kaW5nID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgaXNSZXNvbHZlZChDb21wb25lbnQsIGVmZmVjdElkLCBlZmZlY3RQcm9taXNlVGh1bmspIHtcbiAgICBsZXQgc2VlbkVmZmVjdElkcyA9IHRoaXMuc2Vlbi5nZXQoQ29tcG9uZW50KTtcbiAgICBsZXQgcGVuZGluZ1Byb21pc2VzID0gdGhpcy5wZW5kaW5nLmdldChDb21wb25lbnQpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBpZiBub3QgcHJlc2VudFxuICAgIGlmICghc2VlbkVmZmVjdElkcykge1xuICAgICAgc2VlbkVmZmVjdElkcyA9IG5ldyBTZXQoKTtcbiAgICAgIHRoaXMuc2Vlbi5zZXQoQ29tcG9uZW50LCBzZWVuRWZmZWN0SWRzKTtcbiAgICB9XG5cbiAgICAvLyBJZiBzZWVuIGFuZCBub3QgcGVuZGluZywgdGhlbiBpdCBoYXMgYmVlbiByZXNvbHZlZFxuICAgIGlmIChcbiAgICAgIHNlZW5FZmZlY3RJZHMuaGFzKGVmZmVjdElkKSAmJlxuICAgICAgKCFwZW5kaW5nUHJvbWlzZXMgfHwgIXBlbmRpbmdQcm9taXNlcy5oYXMoZWZmZWN0SWQpKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gSWYgbm90IHlldCBzZWVuLCBuZWVkIHRvIHN0YXJ0IHByb21pc2VcbiAgICBpZiAoIXNlZW5FZmZlY3RJZHMuaGFzKGVmZmVjdElkKSkge1xuICAgICAgaWYgKCFwZW5kaW5nUHJvbWlzZXMpIHtcbiAgICAgICAgcGVuZGluZ1Byb21pc2VzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnBlbmRpbmcuc2V0KENvbXBvbmVudCwgcGVuZGluZ1Byb21pc2VzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZWZmZWN0UHJvbWlzZSA9IGVmZmVjdFByb21pc2VUaHVuaygpO1xuICAgICAgc2VlbkVmZmVjdElkcy5hZGQoZWZmZWN0SWQpO1xuICAgICAgcGVuZGluZ1Byb21pc2VzLnNldChlZmZlY3RJZCwgZWZmZWN0UHJvbWlzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3VtZUFuZEF3YWl0UHJvbWlzZXMoKSB7XG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgbWFwIG9mIHRoaXMucGVuZGluZy52YWx1ZXMoKSkge1xuICAgICAgZm9yIChsZXQgcHJvbWlzZSBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICAgICAgcHJvbWlzZXMucHVzaChwcm9taXNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmcgPSBuZXcgTWFwKCk7IC8vIGNsZWFyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwYXJlKGVsZW1lbnQ6IGFueSkge1xuICBjb25zdCBwcmVwYXJlU3RhdGUgPSBuZXcgUHJlcGFyZVN0YXRlKCk7XG5cbiAgY2xhc3MgUHJlcGFyZUNvbnRleHRQcm92aWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fT4ge1xuICAgIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fSVNfUFJFUEFSRV9fOiB0cnVlLFxuICAgICAgICBfX1BSRVBBUkVfU1RBVEVfXzogcHJlcGFyZVN0YXRlLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICB9XG4gIFByZXBhcmVDb250ZXh0UHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgX19QUkVQQVJFX1NUQVRFX186ICgpID0+IHt9LFxuICAgIF9fSVNfUFJFUEFSRV9fOiAoKSA9PiB7fSxcbiAgfTtcblxuICBhc3luYyBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgIGF3YWl0IHNzclByZXBhc3MoUmVhY3QuY3JlYXRlRWxlbWVudChQcmVwYXJlQ29udGV4dFByb3ZpZGVyKSk7XG5cbiAgICBpZiAocHJlcGFyZVN0YXRlLnBlbmRpbmcuc2l6ZSkge1xuICAgICAgcmV0dXJuIHByZXBhcmVTdGF0ZS5jb25zdW1lQW5kQXdhaXRQcm9taXNlcygpLnRoZW4ocHJvY2Vzcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4ocHJvY2Vzcyk7XG59XG4iXX0=