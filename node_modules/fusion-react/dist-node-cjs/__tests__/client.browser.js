"use strict";

var React = _interopRequireWildcard(require("react"));

var _fusionTestUtils = require("fusion-test-utils");

var _client = _interopRequireDefault(require("../client"));

var _index = _interopRequireDefault(require("../index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
test('renders', () => {
  const root = setup();
  (0, _client.default)(React.createElement('span', null, 'hello'));
  expect(root.firstChild).toBeTruthy();
  const firstChild = root.firstChild;
  expect(firstChild.nodeName).toBe('SPAN');
  expect(firstChild.textContent).toBe('hello');
  cleanup(root);
});
test('client side app', async done => {
  const root = setup();
  const app = new _index.default(React.createElement('span', null, 'hello'));
  const simulator = (0, _fusionTestUtils.getSimulator)(app);

  try {
    const ctx = await simulator.render('/');
    expect(ctx.rendered).toBeTruthy();
    expect(ctx.element).toBeTruthy();
    expect(root.firstChild).toBeTruthy();
    const firstChild = root.firstChild;
    expect(firstChild.nodeName).toBe('SPAN');
    expect(firstChild.textContent).toBe('hello');
  } catch (e) {
    expect(e).toBeFalsy();
  } finally {
    cleanup(root);
    done();
  }
});

function setup() {
  const root = document.createElement('div');
  root.id = 'root';
  document.body && document.body.appendChild(root);
  return root;
}

function cleanup(root) {
  document.body && document.body.removeChild(root);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC5icm93c2VyLmpzIl0sIm5hbWVzIjpbInRlc3QiLCJyb290Iiwic2V0dXAiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJleHBlY3QiLCJmaXJzdENoaWxkIiwidG9CZVRydXRoeSIsIm5vZGVOYW1lIiwidG9CZSIsInRleHRDb250ZW50IiwiY2xlYW51cCIsImRvbmUiLCJhcHAiLCJBcHAiLCJzaW11bGF0b3IiLCJjdHgiLCJyZW5kZXIiLCJyZW5kZXJlZCIsImVsZW1lbnQiLCJlIiwidG9CZUZhbHN5IiwiZG9jdW1lbnQiLCJpZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiOztBQVVBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQWJBOzs7Ozs7OztBQVFBO0FBT0FBLElBQUksQ0FBQyxTQUFELEVBQVksTUFBTTtBQUNwQixRQUFNQyxJQUFJLEdBQUdDLEtBQUssRUFBbEI7QUFFQSx1QkFBT0MsS0FBSyxDQUFDQyxhQUFOLENBQW9CLE1BQXBCLEVBQTRCLElBQTVCLEVBQWtDLE9BQWxDLENBQVA7QUFDQUMsRUFBQUEsTUFBTSxDQUFDSixJQUFJLENBQUNLLFVBQU4sQ0FBTixDQUF3QkMsVUFBeEI7QUFDQSxRQUFNRCxVQUFVLEdBQUtMLElBQUksQ0FBQ0ssVUFBMUI7QUFDQUQsRUFBQUEsTUFBTSxDQUFDQyxVQUFVLENBQUNFLFFBQVosQ0FBTixDQUE0QkMsSUFBNUIsQ0FBaUMsTUFBakM7QUFDQUosRUFBQUEsTUFBTSxDQUFDQyxVQUFVLENBQUNJLFdBQVosQ0FBTixDQUErQkQsSUFBL0IsQ0FBb0MsT0FBcEM7QUFFQUUsRUFBQUEsT0FBTyxDQUFDVixJQUFELENBQVA7QUFDRCxDQVZHLENBQUo7QUFZQUQsSUFBSSxDQUFDLGlCQUFELEVBQW9CLE1BQU1ZLElBQU4sSUFBYztBQUNwQyxRQUFNWCxJQUFJLEdBQUdDLEtBQUssRUFBbEI7QUFFQSxRQUFNVyxHQUFHLEdBQUcsSUFBSUMsY0FBSixDQUFRWCxLQUFLLENBQUNDLGFBQU4sQ0FBb0IsTUFBcEIsRUFBNEIsSUFBNUIsRUFBa0MsT0FBbEMsQ0FBUixDQUFaO0FBQ0EsUUFBTVcsU0FBUyxHQUFHLG1DQUFhRixHQUFiLENBQWxCOztBQUNBLE1BQUk7QUFDRixVQUFNRyxHQUFHLEdBQUcsTUFBTUQsU0FBUyxDQUFDRSxNQUFWLENBQWlCLEdBQWpCLENBQWxCO0FBQ0FaLElBQUFBLE1BQU0sQ0FBQ1csR0FBRyxDQUFDRSxRQUFMLENBQU4sQ0FBcUJYLFVBQXJCO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ1csR0FBRyxDQUFDRyxPQUFMLENBQU4sQ0FBb0JaLFVBQXBCO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0osSUFBSSxDQUFDSyxVQUFOLENBQU4sQ0FBd0JDLFVBQXhCO0FBQ0EsVUFBTUQsVUFBVSxHQUFLTCxJQUFJLENBQUNLLFVBQTFCO0FBQ0FELElBQUFBLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDRSxRQUFaLENBQU4sQ0FBNEJDLElBQTVCLENBQWlDLE1BQWpDO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDSSxXQUFaLENBQU4sQ0FBK0JELElBQS9CLENBQW9DLE9BQXBDO0FBQ0QsR0FSRCxDQVFFLE9BQU9XLENBQVAsRUFBVTtBQUNWZixJQUFBQSxNQUFNLENBQUNlLENBQUQsQ0FBTixDQUFVQyxTQUFWO0FBQ0QsR0FWRCxTQVVVO0FBQ1JWLElBQUFBLE9BQU8sQ0FBQ1YsSUFBRCxDQUFQO0FBQ0FXLElBQUFBLElBQUk7QUFDTDtBQUNGLENBbkJHLENBQUo7O0FBcUJBLFNBQVNWLEtBQVQsR0FBaUI7QUFDZixRQUFNRCxJQUFJLEdBQUdxQixRQUFRLENBQUNsQixhQUFULENBQXVCLEtBQXZCLENBQWI7QUFDQUgsRUFBQUEsSUFBSSxDQUFDc0IsRUFBTCxHQUFVLE1BQVY7QUFDQUQsRUFBQUEsUUFBUSxDQUFDRSxJQUFULElBQWlCRixRQUFRLENBQUNFLElBQVQsQ0FBY0MsV0FBZCxDQUEwQnhCLElBQTFCLENBQWpCO0FBQ0EsU0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQVNVLE9BQVQsQ0FBaUJWLElBQWpCLEVBQXVCO0FBQ3JCcUIsRUFBQUEsUUFBUSxDQUFDRSxJQUFULElBQWlCRixRQUFRLENBQUNFLElBQVQsQ0FBY0UsV0FBZCxDQUEwQnpCLElBQTFCLENBQWpCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtnZXRTaW11bGF0b3J9IGZyb20gJ2Z1c2lvbi10ZXN0LXV0aWxzJztcbmltcG9ydCByZW5kZXIgZnJvbSAnLi4vY2xpZW50JztcbmltcG9ydCBBcHAgZnJvbSAnLi4vaW5kZXgnO1xuXG50ZXN0KCdyZW5kZXJzJywgKCkgPT4ge1xuICBjb25zdCByb290ID0gc2V0dXAoKTtcblxuICByZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsICdoZWxsbycpKTtcbiAgZXhwZWN0KHJvb3QuZmlyc3RDaGlsZCkudG9CZVRydXRoeSgpO1xuICBjb25zdCBmaXJzdENoaWxkID0gKChyb290LmZpcnN0Q2hpbGQ6IGFueSk6IE5vZGUpO1xuICBleHBlY3QoZmlyc3RDaGlsZC5ub2RlTmFtZSkudG9CZSgnU1BBTicpO1xuICBleHBlY3QoZmlyc3RDaGlsZC50ZXh0Q29udGVudCkudG9CZSgnaGVsbG8nKTtcblxuICBjbGVhbnVwKHJvb3QpO1xufSk7XG5cbnRlc3QoJ2NsaWVudCBzaWRlIGFwcCcsIGFzeW5jIGRvbmUgPT4ge1xuICBjb25zdCByb290ID0gc2V0dXAoKTtcblxuICBjb25zdCBhcHAgPSBuZXcgQXBwKFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBudWxsLCAnaGVsbG8nKSk7XG4gIGNvbnN0IHNpbXVsYXRvciA9IGdldFNpbXVsYXRvcihhcHApO1xuICB0cnkge1xuICAgIGNvbnN0IGN0eCA9IGF3YWl0IHNpbXVsYXRvci5yZW5kZXIoJy8nKTtcbiAgICBleHBlY3QoY3R4LnJlbmRlcmVkKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGN0eC5lbGVtZW50KS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHJvb3QuZmlyc3RDaGlsZCkudG9CZVRydXRoeSgpO1xuICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSAoKHJvb3QuZmlyc3RDaGlsZDogYW55KTogTm9kZSk7XG4gICAgZXhwZWN0KGZpcnN0Q2hpbGQubm9kZU5hbWUpLnRvQmUoJ1NQQU4nKTtcbiAgICBleHBlY3QoZmlyc3RDaGlsZC50ZXh0Q29udGVudCkudG9CZSgnaGVsbG8nKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGV4cGVjdChlKS50b0JlRmFsc3koKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGVhbnVwKHJvb3QpO1xuICAgIGRvbmUoKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHNldHVwKCkge1xuICBjb25zdCByb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHJvb3QuaWQgPSAncm9vdCc7XG4gIGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcbiAgcmV0dXJuIHJvb3Q7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAocm9vdCkge1xuICBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocm9vdCk7XG59XG4iXX0=