"use strict";

var React = _interopRequireWildcard(require("react"));

var _fusionCore = require("fusion-core");

var _fusionTestUtils = require("fusion-test-utils");

var _index = _interopRequireDefault(require("../index"));

var _context = require("../context.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
test('context#useService', async () => {
  const TestToken = (0, _fusionCore.createToken)('test');
  const TestPlugin = (0, _fusionCore.createPlugin)({
    provides: () => 3
  });
  let didRender = false;

  function TestComponent() {
    const provides = (0, _context.useService)(TestToken);
    const ctx = React.useContext(_context.FusionContext);
    didRender = true;
    expect(provides).toBe(3);
    expect(ctx.request.url).toBe('/');
    return React.createElement('div', null, 'hello');
  }

  const element = React.createElement(TestComponent);
  const app = new _index.default(element);
  app.register(TestToken, TestPlugin);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
});
test('context#useService - unregistered token', async () => {
  let didRender = false;

  function TestComponent() {
    const TestToken = (0, _fusionCore.createToken)('test');
    (0, _context.useService)(TestToken);
    didRender = true;
    return React.createElement('div', null, 'hello');
  }

  const element = React.createElement(TestComponent);
  const app = new _index.default(element);
  const sim = (0, _fusionTestUtils.getSimulator)(app);

  try {
    await sim.render('/');
  } catch (e) {
    expect(/Token .* not registered/.test(e.message)).toBeTruthy();
  }

  expect(didRender).toBeFalsy();
});
test('context#useService - optional token', async () => {
  let didRender = false;

  function TestComponent() {
    const TestToken = (0, _fusionCore.createToken)('test');
    (0, _context.useService)(TestToken.optional);
    didRender = true;
    return React.createElement('div', null, 'hello');
  }

  const element = React.createElement(TestComponent);
  const app = new _index.default(element);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  await sim.render('/');
  expect(didRender).toBeTruthy();
});
test('context#ServiceConsumer', async () => {
  const TestToken = (0, _fusionCore.createToken)('test');
  const TestPlugin = (0, _fusionCore.createPlugin)({
    provides: () => 3
  });
  let didRender = false;

  function TestComponent() {
    return React.createElement(_context.ServiceConsumer, {
      token: TestToken
    }, provides => {
      didRender = true;
      expect(provides).toBe(3);
      return React.createElement('div', null, 'hello');
    });
  }

  const element = React.createElement(TestComponent);
  const app = new _index.default(element);
  app.register(TestToken, TestPlugin);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
});
test('context#withServices', async () => {
  const TestToken1 = (0, _fusionCore.createToken)('test-1');
  const TestToken2 = (0, _fusionCore.createToken)('test-2');
  const TestPlugin1 = (0, _fusionCore.createPlugin)({
    provides: () => 1
  });
  const TestPlugin2 = (0, _fusionCore.createPlugin)({
    provides: () => 2
  });
  let didRender = false;

  function TestComponent({
    mappedOne,
    mappedTwo,
    propValue
  }) {
    didRender = true;
    expect(mappedOne).toBe(1);
    expect(mappedTwo).toBe(2);
    expect(propValue).toBe(3);
    return React.createElement('div', null, 'hello');
  }

  const WrappedComponent = (0, _context.withServices)({
    test1: TestToken1,
    test2: TestToken2
  }, deps => ({
    mappedOne: deps.test1,
    mappedTwo: deps.test2
  }))(TestComponent);
  const element = React.createElement(WrappedComponent, {
    propValue: 3
  });
  const app = new _index.default(element);
  app.register(TestToken1, TestPlugin1);
  app.register(TestToken2, TestPlugin2);
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  expect(typeof ctx.body === 'string' && ctx.body.includes('hello')).toBeTruthy();
  expect(didRender).toBeTruthy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,