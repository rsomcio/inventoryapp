"use strict";

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _plugin = _interopRequireDefault(require("../plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
test('.create works', done => {
  class Foo {
    foo() {}

  }

  const plugin = _plugin.default.create('foo', {}); // $FlowFixMe


  const middleware = plugin.middleware({}, new Foo());
  const element = React.createElement('div');
  const ctx = {
    element
  }; // $FlowFixMe

  middleware(ctx, () => Promise.resolve()).then(() => {
    expect(ctx.element).not.toBe(element); // $FlowFixMe

    expect(ctx.element.type.displayName).toBe('FooProvider'); // $FlowFixMe

    expect(ctx.element.type.childContextTypes.foo).toBe(_propTypes.default.any.isRequired);
    done();
  });
});
test('idempotency with wrapped middleware', async () => {
  let called = 0;
  const foo = 'foo';
  const bar = 'bar';
  const baz = 'baz';
  const expectedDeps = [foo, bar];
  const expectedSelf = [bar, baz];

  const plugin = _plugin.default.create('foo', {
    middleware: (deps, self) => async () => {
      expect(deps).toBe(expectedDeps.shift());
      expect(self).toBe(expectedSelf.shift());
      called += 1;
    }
  }); // $FlowFixMe


  const middleware = plugin.middleware(foo, bar); // $FlowFixMe

  const middleware2 = plugin.middleware(bar, baz);
  const element = React.createElement('div');
  const ctx = {
    element
  }; // $FlowFixMe

  middleware(ctx, () => Promise.resolve()); // $FlowFixMe

  middleware2(ctx, () => Promise.resolve());
  expect(called).toBe(2);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbi5qcyJdLCJuYW1lcyI6WyJ0ZXN0IiwiZG9uZSIsIkZvbyIsImZvbyIsInBsdWdpbiIsIlJlYWN0UGx1Z2luIiwiY3JlYXRlIiwibWlkZGxld2FyZSIsImVsZW1lbnQiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJleHBlY3QiLCJub3QiLCJ0b0JlIiwidHlwZSIsImRpc3BsYXlOYW1lIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJQcm9wVHlwZXMiLCJhbnkiLCJpc1JlcXVpcmVkIiwiY2FsbGVkIiwiYmFyIiwiYmF6IiwiZXhwZWN0ZWREZXBzIiwiZXhwZWN0ZWRTZWxmIiwiZGVwcyIsInNlbGYiLCJzaGlmdCIsIm1pZGRsZXdhcmUyIl0sIm1hcHBpbmdzIjoiOztBQVFBOztBQUNBOztBQUVBOzs7Ozs7OztBQVhBOzs7Ozs7O0FBYUFBLElBQUksQ0FBQyxlQUFELEVBQWtCQyxJQUFJLElBQUk7QUFDNUIsUUFBTUMsR0FBTixDQUFVO0FBQ1JDLElBQUFBLEdBQUcsR0FBRyxDQUFFOztBQURBOztBQUdWLFFBQU1DLE1BQU0sR0FBR0MsZ0JBQVlDLE1BQVosQ0FBbUIsS0FBbkIsRUFBMEIsRUFBMUIsQ0FBZixDQUo0QixDQUs1Qjs7O0FBQ0EsUUFBTUMsVUFBVSxHQUFHSCxNQUFNLENBQUNHLFVBQVAsQ0FBa0IsRUFBbEIsRUFBc0IsSUFBSUwsR0FBSixFQUF0QixDQUFuQjtBQUNBLFFBQU1NLE9BQU8sR0FBR0MsS0FBSyxDQUFDQyxhQUFOLENBQW9CLEtBQXBCLENBQWhCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHO0FBQUNILElBQUFBO0FBQUQsR0FBWixDQVI0QixDQVM1Qjs7QUFDQUQsRUFBQUEsVUFBVSxDQUFDSSxHQUFELEVBQU0sTUFBTUMsT0FBTyxDQUFDQyxPQUFSLEVBQVosQ0FBVixDQUF5Q0MsSUFBekMsQ0FBOEMsTUFBTTtBQUNsREMsSUFBQUEsTUFBTSxDQUFDSixHQUFHLENBQUNILE9BQUwsQ0FBTixDQUFvQlEsR0FBcEIsQ0FBd0JDLElBQXhCLENBQTZCVCxPQUE3QixFQURrRCxDQUVsRDs7QUFDQU8sSUFBQUEsTUFBTSxDQUFDSixHQUFHLENBQUNILE9BQUosQ0FBWVUsSUFBWixDQUFpQkMsV0FBbEIsQ0FBTixDQUFxQ0YsSUFBckMsQ0FBMEMsYUFBMUMsRUFIa0QsQ0FJbEQ7O0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0osR0FBRyxDQUFDSCxPQUFKLENBQVlVLElBQVosQ0FBaUJFLGlCQUFqQixDQUFtQ2pCLEdBQXBDLENBQU4sQ0FBK0NjLElBQS9DLENBQ0VJLG1CQUFVQyxHQUFWLENBQWNDLFVBRGhCO0FBR0F0QixJQUFBQSxJQUFJO0FBQ0wsR0FURDtBQVVELENBcEJHLENBQUo7QUFzQkFELElBQUksQ0FBQyxxQ0FBRCxFQUF3QyxZQUFZO0FBQ3RELE1BQUl3QixNQUFNLEdBQUcsQ0FBYjtBQUNBLFFBQU1yQixHQUFHLEdBQUcsS0FBWjtBQUNBLFFBQU1zQixHQUFHLEdBQUcsS0FBWjtBQUNBLFFBQU1DLEdBQUcsR0FBRyxLQUFaO0FBQ0EsUUFBTUMsWUFBWSxHQUFHLENBQUN4QixHQUFELEVBQU1zQixHQUFOLENBQXJCO0FBQ0EsUUFBTUcsWUFBWSxHQUFHLENBQUNILEdBQUQsRUFBTUMsR0FBTixDQUFyQjs7QUFDQSxRQUFNdEIsTUFBTSxHQUFHQyxnQkFBWUMsTUFBWixDQUFtQixLQUFuQixFQUEwQjtBQUN2Q0MsSUFBQUEsVUFBVSxFQUFFLENBQUNzQixJQUFELEVBQU9DLElBQVAsS0FBZ0IsWUFBWTtBQUN0Q2YsTUFBQUEsTUFBTSxDQUFDYyxJQUFELENBQU4sQ0FBYVosSUFBYixDQUFrQlUsWUFBWSxDQUFDSSxLQUFiLEVBQWxCO0FBQ0FoQixNQUFBQSxNQUFNLENBQUNlLElBQUQsQ0FBTixDQUFhYixJQUFiLENBQWtCVyxZQUFZLENBQUNHLEtBQWIsRUFBbEI7QUFDQVAsTUFBQUEsTUFBTSxJQUFJLENBQVY7QUFDRDtBQUxzQyxHQUExQixDQUFmLENBUHNELENBY3REOzs7QUFDQSxRQUFNakIsVUFBVSxHQUFHSCxNQUFNLENBQUNHLFVBQVAsQ0FBa0JKLEdBQWxCLEVBQXVCc0IsR0FBdkIsQ0FBbkIsQ0Fmc0QsQ0FnQnREOztBQUNBLFFBQU1PLFdBQVcsR0FBRzVCLE1BQU0sQ0FBQ0csVUFBUCxDQUFrQmtCLEdBQWxCLEVBQXVCQyxHQUF2QixDQUFwQjtBQUNBLFFBQU1sQixPQUFPLEdBQUdDLEtBQUssQ0FBQ0MsYUFBTixDQUFvQixLQUFwQixDQUFoQjtBQUNBLFFBQU1DLEdBQUcsR0FBRztBQUFDSCxJQUFBQTtBQUFELEdBQVosQ0FuQnNELENBb0J0RDs7QUFDQUQsRUFBQUEsVUFBVSxDQUFDSSxHQUFELEVBQU0sTUFBTUMsT0FBTyxDQUFDQyxPQUFSLEVBQVosQ0FBVixDQXJCc0QsQ0FzQnREOztBQUNBbUIsRUFBQUEsV0FBVyxDQUFDckIsR0FBRCxFQUFNLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixFQUFaLENBQVg7QUFDQUUsRUFBQUEsTUFBTSxDQUFDUyxNQUFELENBQU4sQ0FBZVAsSUFBZixDQUFvQixDQUFwQjtBQUNELENBekJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgUmVhY3RQbHVnaW4gZnJvbSAnLi4vcGx1Z2luJztcblxudGVzdCgnLmNyZWF0ZSB3b3JrcycsIGRvbmUgPT4ge1xuICBjbGFzcyBGb28ge1xuICAgIGZvbygpIHt9XG4gIH1cbiAgY29uc3QgcGx1Z2luID0gUmVhY3RQbHVnaW4uY3JlYXRlKCdmb28nLCB7fSk7XG4gIC8vICRGbG93Rml4TWVcbiAgY29uc3QgbWlkZGxld2FyZSA9IHBsdWdpbi5taWRkbGV3YXJlKHt9LCBuZXcgRm9vKCkpO1xuICBjb25zdCBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGN0eCA9IHtlbGVtZW50fTtcbiAgLy8gJEZsb3dGaXhNZVxuICBtaWRkbGV3YXJlKGN0eCwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLnRoZW4oKCkgPT4ge1xuICAgIGV4cGVjdChjdHguZWxlbWVudCkubm90LnRvQmUoZWxlbWVudCk7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGV4cGVjdChjdHguZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lKS50b0JlKCdGb29Qcm92aWRlcicpO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBleHBlY3QoY3R4LmVsZW1lbnQudHlwZS5jaGlsZENvbnRleHRUeXBlcy5mb28pLnRvQmUoXG4gICAgICBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWRcbiAgICApO1xuICAgIGRvbmUoKTtcbiAgfSk7XG59KTtcblxudGVzdCgnaWRlbXBvdGVuY3kgd2l0aCB3cmFwcGVkIG1pZGRsZXdhcmUnLCBhc3luYyAoKSA9PiB7XG4gIGxldCBjYWxsZWQgPSAwO1xuICBjb25zdCBmb28gPSAnZm9vJztcbiAgY29uc3QgYmFyID0gJ2Jhcic7XG4gIGNvbnN0IGJheiA9ICdiYXonO1xuICBjb25zdCBleHBlY3RlZERlcHMgPSBbZm9vLCBiYXJdO1xuICBjb25zdCBleHBlY3RlZFNlbGYgPSBbYmFyLCBiYXpdO1xuICBjb25zdCBwbHVnaW4gPSBSZWFjdFBsdWdpbi5jcmVhdGUoJ2ZvbycsIHtcbiAgICBtaWRkbGV3YXJlOiAoZGVwcywgc2VsZikgPT4gYXN5bmMgKCkgPT4ge1xuICAgICAgZXhwZWN0KGRlcHMpLnRvQmUoZXhwZWN0ZWREZXBzLnNoaWZ0KCkpO1xuICAgICAgZXhwZWN0KHNlbGYpLnRvQmUoZXhwZWN0ZWRTZWxmLnNoaWZ0KCkpO1xuICAgICAgY2FsbGVkICs9IDE7XG4gICAgfSxcbiAgfSk7XG4gIC8vICRGbG93Rml4TWVcbiAgY29uc3QgbWlkZGxld2FyZSA9IHBsdWdpbi5taWRkbGV3YXJlKGZvbywgYmFyKTtcbiAgLy8gJEZsb3dGaXhNZVxuICBjb25zdCBtaWRkbGV3YXJlMiA9IHBsdWdpbi5taWRkbGV3YXJlKGJhciwgYmF6KTtcbiAgY29uc3QgZWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBjdHggPSB7ZWxlbWVudH07XG4gIC8vICRGbG93Rml4TWVcbiAgbWlkZGxld2FyZShjdHgsICgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcbiAgLy8gJEZsb3dGaXhNZVxuICBtaWRkbGV3YXJlMihjdHgsICgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcbiAgZXhwZWN0KGNhbGxlZCkudG9CZSgyKTtcbn0pO1xuIl19