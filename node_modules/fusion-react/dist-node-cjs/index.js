"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  SkipPrepareToken: true,
  ProviderPlugin: true,
  ProvidedHOC: true,
  Provider: true,
  FusionContext: true,
  ServiceConsumer: true,
  ServiceContext: true,
  useService: true,
  withServices: true
};
Object.defineProperty(exports, "ProviderPlugin", {
  enumerable: true,
  get: function () {
    return _plugin.default;
  }
});
Object.defineProperty(exports, "ProvidedHOC", {
  enumerable: true,
  get: function () {
    return _hoc.default;
  }
});
Object.defineProperty(exports, "Provider", {
  enumerable: true,
  get: function () {
    return _provider.default;
  }
});
Object.defineProperty(exports, "FusionContext", {
  enumerable: true,
  get: function () {
    return _context.FusionContext;
  }
});
Object.defineProperty(exports, "ServiceConsumer", {
  enumerable: true,
  get: function () {
    return _context.ServiceConsumer;
  }
});
Object.defineProperty(exports, "ServiceContext", {
  enumerable: true,
  get: function () {
    return _context.ServiceContext;
  }
});
Object.defineProperty(exports, "useService", {
  enumerable: true,
  get: function () {
    return _context.useService;
  }
});
Object.defineProperty(exports, "withServices", {
  enumerable: true,
  get: function () {
    return _context.withServices;
  }
});
exports.default = exports.SkipPrepareToken = void 0;

var React = _interopRequireWildcard(require("react"));

var _fusionCore = _interopRequireWildcard(require("fusion-core"));

var _index = require("./async/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _prepareProvider = _interopRequireDefault(require("./async/prepare-provider"));

var _server = _interopRequireDefault(require("./server"));

var _plugin = _interopRequireDefault(require("./plugin"));

var _hoc = _interopRequireDefault(require("./hoc"));

var _provider = _interopRequireDefault(require("./provider"));

var _context = require("./context.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
const SkipPrepareToken = (0, _fusionCore.createToken)('SkipPrepareToken');
exports.SkipPrepareToken = SkipPrepareToken;

class App extends _fusionCore.default {
  constructor(root, render) {
    if (!React.isValidElement(root)) {
      throw new Error('Invalid React element. Ensure your root element is a React.Element (e.g. <Foo />) and not a React.Component (e.g. Foo)');
    }

    const getService = token => {
      // $FlowFixMe
      const provides = this.getService(token);
      const isRequiredToken = Boolean(token.optional);

      if (typeof provides === 'undefined' && isRequiredToken) {
        throw new Error(`Token ${token.name} not registered or registered plugin does not provide a service. To use an optional plugin, use \`Token.optional\`.`);
      }

      return provides;
    };

    const renderer = (0, _fusionCore.createPlugin)({
      deps: {
        criticalChunkIds: _fusionCore.CriticalChunkIdsToken.optional,
        skipPrepare: SkipPrepareToken.optional
      },

      provides({
        skipPrepare
      }) {
        return (el, ctx) => {
          return (skipPrepare ? Promise.resolve() : (0, _index.prepare)(el)).then(() => {
            if (render) {
              return render(el, ctx);
            }

            if (true) {
              return (0, _server.default)(el);
            } else {
              return clientRender(el);
            }
          });
        };
      },

      middleware({
        criticalChunkIds
      }) {
        return (ctx, next) => {
          if (true && !ctx.element) {
            return next();
          }

          const markAsCritical = true ? chunkId => {
            // Push to legacy context for backwards compat w/ legacy SSR template
            ctx.preloadChunks.push(chunkId); // Also use new service if registered

            if (criticalChunkIds) {
              let chunkIds = criticalChunkIds.from(ctx);
              chunkIds.add(chunkId);
            }
          } : noop;
          ctx.element = React.createElement(_prepareProvider.default, {
            markAsCritical: markAsCritical
          }, React.createElement(_context.FusionContext.Provider, {
            value: ctx
          }, React.createElement(_context.ServiceContext.Provider, {
            value: getService
          }, ctx.element)));
          return next();
        };
      }

    });
    super(root, renderer);
  }

}

exports.default = App;

function noop() {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,