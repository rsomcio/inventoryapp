/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import { BrowserRouter as BrowserRouterUntyped, HashRouter as HashRouterUntyped, Link as LinkUntyped, MemoryRouter as MemoryRouterUntyped, NavLink as NavLinkUntyped, Prompt as PromptUntyped, StaticRouter as StaticRouterUntyped, Switch as SwitchUntyped, matchPath as matchPathUntyped, withRouter as withRouterUntyped, useHistory as useHistoryUntyped, useParams as useParamsUntyped, useRouteMatch as useRouteMatchUntyped, useLocation as useLocationUntyped } from 'react-router-dom';
import { Status, NotFound } from './modules/Status';
import { Redirect } from './modules/Redirect';
import { Router } from './modules/BrowserRouter';
import { Route } from './modules/Route';

/**
 * Cast each of these imports from react-router-dom to a copied-version of their
 * types.  This is necessary as the libdef defined types will not be accessible to
 * consumers of this package.
 */
const BrowserRouter = BrowserRouterUntyped;
const HashRouter = HashRouterUntyped;
const Link = LinkUntyped;
const MemoryRouter = MemoryRouterUntyped;
const NavLink = NavLinkUntyped;
const Prompt = PromptUntyped;
const StaticRouter = StaticRouterUntyped;
const Switch = SwitchUntyped;
const matchPath = matchPathUntyped;
const withRouter = withRouterUntyped;
const useHistory = useHistoryUntyped;
const useRouteMatch = useRouteMatchUntyped;
const useLocation = useLocationUntyped;
const useParams = useParamsUntyped;
export { BrowserRouter, HashRouter, Link, MemoryRouter, NavLink, Prompt, StaticRouter, Switch, matchPath, withRouter, Status, NotFound, Redirect, Router, Route, useHistory, useRouteMatch, useLocation, useParams };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9icm93c2VyLmpzIl0sIm5hbWVzIjpbIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyVW50eXBlZCIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyVW50eXBlZCIsIkxpbmsiLCJMaW5rVW50eXBlZCIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlclVudHlwZWQiLCJOYXZMaW5rIiwiTmF2TGlua1VudHlwZWQiLCJQcm9tcHQiLCJQcm9tcHRVbnR5cGVkIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyVW50eXBlZCIsIlN3aXRjaCIsIlN3aXRjaFVudHlwZWQiLCJtYXRjaFBhdGgiLCJtYXRjaFBhdGhVbnR5cGVkIiwid2l0aFJvdXRlciIsIndpdGhSb3V0ZXJVbnR5cGVkIiwidXNlSGlzdG9yeSIsInVzZUhpc3RvcnlVbnR5cGVkIiwidXNlUGFyYW1zIiwidXNlUGFyYW1zVW50eXBlZCIsInVzZVJvdXRlTWF0Y2giLCJ1c2VSb3V0ZU1hdGNoVW50eXBlZCIsInVzZUxvY2F0aW9uIiwidXNlTG9jYXRpb25VbnR5cGVkIiwiU3RhdHVzIiwiTm90Rm91bmQiLCJSZWRpcmVjdCIsIlJvdXRlciIsIlJvdXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLFNBQ0VBLGFBQWEsSUFBSUMsb0JBRG5CLEVBRUVDLFVBQVUsSUFBSUMsaUJBRmhCLEVBR0VDLElBQUksSUFBSUMsV0FIVixFQUlFQyxZQUFZLElBQUlDLG1CQUpsQixFQUtFQyxPQUFPLElBQUlDLGNBTGIsRUFNRUMsTUFBTSxJQUFJQyxhQU5aLEVBT0VDLFlBQVksSUFBSUMsbUJBUGxCLEVBUUVDLE1BQU0sSUFBSUMsYUFSWixFQVNFQyxTQUFTLElBQUlDLGdCQVRmLEVBVUVDLFVBQVUsSUFBSUMsaUJBVmhCLEVBV0VDLFVBQVUsSUFBSUMsaUJBWGhCLEVBWUVDLFNBQVMsSUFBSUMsZ0JBWmYsRUFhRUMsYUFBYSxJQUFJQyxvQkFibkIsRUFjRUMsV0FBVyxJQUFJQyxrQkFkakIsUUFlTyxrQkFmUDtBQWlCQSxTQUFRQyxNQUFSLEVBQWdCQyxRQUFoQixRQUErQixrQkFBL0I7QUFDQSxTQUFRQyxRQUFSLFFBQXVCLG9CQUF2QjtBQUNBLFNBQVFDLE1BQVIsUUFBcUIseUJBQXJCO0FBQ0EsU0FBUUMsS0FBUixRQUFvQixpQkFBcEI7O0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNaEMsYUFBZ0MsR0FBR0Msb0JBQXpDO0FBQ0EsTUFBTUMsVUFBMEIsR0FBR0MsaUJBQW5DO0FBQ0EsTUFBTUMsSUFBYyxHQUFHQyxXQUF2QjtBQUNBLE1BQU1DLFlBQThCLEdBQUdDLG1CQUF2QztBQUNBLE1BQU1DLE9BQW9CLEdBQUdDLGNBQTdCO0FBQ0EsTUFBTUMsTUFBa0IsR0FBR0MsYUFBM0I7QUFDQSxNQUFNQyxZQUE4QixHQUFHQyxtQkFBdkM7QUFDQSxNQUFNQyxNQUFrQixHQUFHQyxhQUEzQjtBQUNBLE1BQU1DLFNBQXdCLEdBQUdDLGdCQUFqQztBQUNBLE1BQU1DLFVBQTBCLEdBQUdDLGlCQUFuQztBQUNBLE1BQU1DLFVBQW1DLEdBQUdDLGlCQUE1QztBQUNBLE1BQU1HLGFBQThCLEdBQUdDLG9CQUF2QztBQUNBLE1BQU1DLFdBQStCLEdBQUdDLGtCQUF4QztBQUNBLE1BQU1MLFNBQTJCLEdBQUdDLGdCQUFwQztBQUVBLFNBQ0V2QixhQURGLEVBRUVFLFVBRkYsRUFHRUUsSUFIRixFQUlFRSxZQUpGLEVBS0VFLE9BTEYsRUFNRUUsTUFORixFQU9FRSxZQVBGLEVBUUVFLE1BUkYsRUFTRUUsU0FURixFQVVFRSxVQVZGLEVBV0VVLE1BWEYsRUFZRUMsUUFaRixFQWFFQyxRQWJGLEVBY0VDLE1BZEYsRUFlRUMsS0FmRixFQWdCRVosVUFoQkYsRUFpQkVJLGFBakJGLEVBa0JFRSxXQWxCRixFQW1CRUosU0FuQkYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge1xuICBCcm93c2VyUm91dGVyIGFzIEJyb3dzZXJSb3V0ZXJVbnR5cGVkLFxuICBIYXNoUm91dGVyIGFzIEhhc2hSb3V0ZXJVbnR5cGVkLFxuICBMaW5rIGFzIExpbmtVbnR5cGVkLFxuICBNZW1vcnlSb3V0ZXIgYXMgTWVtb3J5Um91dGVyVW50eXBlZCxcbiAgTmF2TGluayBhcyBOYXZMaW5rVW50eXBlZCxcbiAgUHJvbXB0IGFzIFByb21wdFVudHlwZWQsXG4gIFN0YXRpY1JvdXRlciBhcyBTdGF0aWNSb3V0ZXJVbnR5cGVkLFxuICBTd2l0Y2ggYXMgU3dpdGNoVW50eXBlZCxcbiAgbWF0Y2hQYXRoIGFzIG1hdGNoUGF0aFVudHlwZWQsXG4gIHdpdGhSb3V0ZXIgYXMgd2l0aFJvdXRlclVudHlwZWQsXG4gIHVzZUhpc3RvcnkgYXMgdXNlSGlzdG9yeVVudHlwZWQsXG4gIHVzZVBhcmFtcyBhcyB1c2VQYXJhbXNVbnR5cGVkLFxuICB1c2VSb3V0ZU1hdGNoIGFzIHVzZVJvdXRlTWF0Y2hVbnR5cGVkLFxuICB1c2VMb2NhdGlvbiBhcyB1c2VMb2NhdGlvblVudHlwZWQsXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQge1N0YXR1cywgTm90Rm91bmR9IGZyb20gJy4vbW9kdWxlcy9TdGF0dXMnO1xuaW1wb3J0IHtSZWRpcmVjdH0gZnJvbSAnLi9tb2R1bGVzL1JlZGlyZWN0JztcbmltcG9ydCB7Um91dGVyfSBmcm9tICcuL21vZHVsZXMvQnJvd3NlclJvdXRlcic7XG5pbXBvcnQge1JvdXRlfSBmcm9tICcuL21vZHVsZXMvUm91dGUnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJyb3dzZXJSb3V0ZXJUeXBlLFxuICBIYXNoUm91dGVyVHlwZSxcbiAgTGlua1R5cGUsXG4gIE1lbW9yeVJvdXRlclR5cGUsXG4gIE5hdkxpbmtUeXBlLFxuICBQcm9tcHRUeXBlLFxuICBTdGF0aWNSb3V0ZXJUeXBlLFxuICBTd2l0Y2hUeXBlLFxuICBtYXRjaFBhdGhUeXBlLFxuICB3aXRoUm91dGVyVHlwZSxcbiAgUm91dGVySGlzdG9yeVR5cGUsXG4gIE1hdGNoVHlwZSxcbiAgTG9jYXRpb25UeXBlLFxuICBQYXJhbXNUeXBlLFxufSBmcm9tICcuL3R5cGVzLmpzJztcblxuLyoqXG4gKiBDYXN0IGVhY2ggb2YgdGhlc2UgaW1wb3J0cyBmcm9tIHJlYWN0LXJvdXRlci1kb20gdG8gYSBjb3BpZWQtdmVyc2lvbiBvZiB0aGVpclxuICogdHlwZXMuICBUaGlzIGlzIG5lY2Vzc2FyeSBhcyB0aGUgbGliZGVmIGRlZmluZWQgdHlwZXMgd2lsbCBub3QgYmUgYWNjZXNzaWJsZSB0b1xuICogY29uc3VtZXJzIG9mIHRoaXMgcGFja2FnZS5cbiAqL1xuY29uc3QgQnJvd3NlclJvdXRlcjogQnJvd3NlclJvdXRlclR5cGUgPSBCcm93c2VyUm91dGVyVW50eXBlZDtcbmNvbnN0IEhhc2hSb3V0ZXI6IEhhc2hSb3V0ZXJUeXBlID0gSGFzaFJvdXRlclVudHlwZWQ7XG5jb25zdCBMaW5rOiBMaW5rVHlwZSA9IExpbmtVbnR5cGVkO1xuY29uc3QgTWVtb3J5Um91dGVyOiBNZW1vcnlSb3V0ZXJUeXBlID0gTWVtb3J5Um91dGVyVW50eXBlZDtcbmNvbnN0IE5hdkxpbms6IE5hdkxpbmtUeXBlID0gTmF2TGlua1VudHlwZWQ7XG5jb25zdCBQcm9tcHQ6IFByb21wdFR5cGUgPSBQcm9tcHRVbnR5cGVkO1xuY29uc3QgU3RhdGljUm91dGVyOiBTdGF0aWNSb3V0ZXJUeXBlID0gU3RhdGljUm91dGVyVW50eXBlZDtcbmNvbnN0IFN3aXRjaDogU3dpdGNoVHlwZSA9IFN3aXRjaFVudHlwZWQ7XG5jb25zdCBtYXRjaFBhdGg6IG1hdGNoUGF0aFR5cGUgPSBtYXRjaFBhdGhVbnR5cGVkO1xuY29uc3Qgd2l0aFJvdXRlcjogd2l0aFJvdXRlclR5cGUgPSB3aXRoUm91dGVyVW50eXBlZDtcbmNvbnN0IHVzZUhpc3Rvcnk6ICgpID0+IFJvdXRlckhpc3RvcnlUeXBlID0gdXNlSGlzdG9yeVVudHlwZWQ7XG5jb25zdCB1c2VSb3V0ZU1hdGNoOiAoKSA9PiBNYXRjaFR5cGUgPSB1c2VSb3V0ZU1hdGNoVW50eXBlZDtcbmNvbnN0IHVzZUxvY2F0aW9uOiAoKSA9PiBMb2NhdGlvblR5cGUgPSB1c2VMb2NhdGlvblVudHlwZWQ7XG5jb25zdCB1c2VQYXJhbXM6ICgpID0+IFBhcmFtc1R5cGUgPSB1c2VQYXJhbXNVbnR5cGVkO1xuXG5leHBvcnQge1xuICBCcm93c2VyUm91dGVyLFxuICBIYXNoUm91dGVyLFxuICBMaW5rLFxuICBNZW1vcnlSb3V0ZXIsXG4gIE5hdkxpbmssXG4gIFByb21wdCxcbiAgU3RhdGljUm91dGVyLFxuICBTd2l0Y2gsXG4gIG1hdGNoUGF0aCxcbiAgd2l0aFJvdXRlcixcbiAgU3RhdHVzLFxuICBOb3RGb3VuZCxcbiAgUmVkaXJlY3QsXG4gIFJvdXRlcixcbiAgUm91dGUsXG4gIHVzZUhpc3RvcnksXG4gIHVzZVJvdXRlTWF0Y2gsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VQYXJhbXMsXG59O1xuIl19