/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import { Router as DefaultProvider } from 'react-router-dom';
import { createBrowserHistory } from 'history';
import { UniversalEventsToken } from 'fusion-plugin-universal-events';
import { createPlugin, createToken, unescape, memoize, RouteTagsToken } from 'fusion-core';
import { Router as BrowserRouter } from './browser.js';
import { jsx as _jsx } from "react/jsx-runtime";
export const GetStaticContextToken = createToken('GetStaticContext');
export const RouterProviderToken = createToken('RouterProvider');
export const RouterToken = createToken('Router');
const Router = false ? ServerRouter : BrowserRouter;
// Preserve browser history instance across HMR
let browserHistory;
let noMatchingRoute = 'no-matching-route';
const plugin = createPlugin({
  deps: {
    emitter: UniversalEventsToken.optional,
    Provider: RouterProviderToken.optional,
    getStaticContext: GetStaticContextToken.optional,
    RouteTags: RouteTagsToken
  },
  middleware: ({
    RouteTags,
    emitter,
    Provider = DefaultProvider,
    getStaticContext
  }, self) => {
    return async (ctx, next) => {
      const tags = RouteTags.from(ctx);
      const prefix = ctx.prefix || '';

      if (!ctx.element) {
        return next();
      }

      const myAPI = self.from(ctx);

      if (false) {
        let pageData = {
          title: ctx.path,
          page: ctx.path
        };
        const context = getStaticContext ? getStaticContext(ctx) : {
          action: null,
          location: null,

          set status(code) {
            ctx.status = code;
          },

          set url(url) {
            const toUrl = addRoutePrefix(url, prefix);

            if (typeof toUrl === 'string') {
              ctx.redirect(toUrl);
            }
          }

        }; // Expose the history object

        const history = createServerHistory(prefix, context, prefix + ctx.url);
        myAPI.history = history;
        ctx.element = /*#__PURE__*/_jsx(Router, {
          history: history,
          Provider: Provider,
          onRoute: d => {
            pageData = d;
            tags.name = pageData.title;
            tags.page = pageData.page;
            pageData.routeMatched = true;
          },
          basename: prefix,
          context: context,
          children: ctx.element
        });
        return next().then(() => {
          ctx.template.body.push(html`
              <script id="__ROUTER_DATA__" type="application/json">
                ${JSON.stringify(pageData)}
              </script>
            `);

          if (emitter) {
            const scopedEmitter = emitter.from(ctx);

            const emitTiming = type => timing => {
              scopedEmitter.emit(type, {
                title: pageData.routeMatched ? pageData.title : noMatchingRoute,
                page: pageData.page,
                status: ctx.status,
                timing
              });
            };

            scopedEmitter.map(payload => {
              if (payload && typeof payload === 'object') {
                if (pageData.routeMatched) {
                  payload.__url__ = pageData.title;
                  payload.__urlParams__ = pageData.params;
                } else {
                  payload.__url__ = noMatchingRoute;
                  payload.__urlParams__ = {};
                }
              }

              return payload;
            });
            ctx.timing.end.then(timing => {
              emitTiming('pageview:server')(timing);
              ctx.timing.render.then(emitTiming('render:server'));
            });
          }
        });
      } else if (true) {
        // TODO(#3): We should consider adding render/downstream/upstream timings for the browser
        let pageData = {};
        const element = document.getElementById('__ROUTER_DATA__');

        if (element) {
          pageData = JSON.parse(unescape(element.textContent));
          tags.name = pageData.title;
          tags.page = pageData.page;
        }

        emitter && emitter.map(payload => {
          if (payload && typeof payload === 'object') {
            if (pageData.routeMatched) {
              payload.__url__ = pageData.title;
              payload.__urlParams__ = pageData.params;
            } else {
              payload.__url__ = noMatchingRoute;
              payload.__urlParams__ = {};
            }
          }

          return payload;
        }); // preserving browser history across hmr fixes warning "Warning: You cannot change <Router history>"
        // we don't want to preserve the `browserHistory` instance across jsdom tests however, as it will cause
        // routes to match based on the previous location information.

        if (!browserHistory || process.env.NODE_ENV !== "production" && typeof window.jsdom !== 'undefined') {
          browserHistory = createBrowserHistory({
            basename: ctx.prefix
          });
        } // Expose the history object


        myAPI.history = browserHistory;
        ctx.element = /*#__PURE__*/_jsx(Router, {
          history: browserHistory,
          Provider: Provider,
          basename: ctx.prefix,
          onRoute: payload => {
            payload.routeMatched = true;
            pageData = payload;
            tags.name = pageData.title;
            tags.page = pageData.page;
            emitter && emitter.emit('pageview:browser', payload);
          },
          children: ctx.element
        });
        return next();
      }
    };
  },

  provides() {
    return {
      from: memoize(() => {
        const api = {
          history: null
        };
        return api;
      })
    };
  }

});
export default plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,