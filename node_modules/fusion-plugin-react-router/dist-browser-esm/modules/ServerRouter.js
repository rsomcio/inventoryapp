function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import { Router as BaseRouter } from 'react-router-dom';
import { jsx as _jsx } from "react/jsx-runtime";

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */
class ServerRouter extends React.Component {
  getRouterStaticContext() {
    let context = this.props.context;

    if (context && typeof context.setCode === 'function') {
      console.warn('Using context.setCode is deprecated. Use a setter on the status prop instead');
      Object.defineProperty(context, 'status', {
        set: code => {
          context.setCode(code);
        },
        configurable: true
      });
    }

    if (context && typeof context.redirect === 'function') {
      console.warn('Using context.redirect is deprecated. Use a setter on the url prop instead');
      Object.defineProperty(context, 'url', {
        set: url => {
          context.redirect(url);
        },
        configurable: true
      });
    }

    return context || {};
  }

  getChildContext() {
    return {
      router: {
        staticContext: this.getRouterStaticContext()
      },
      onRoute: routeData => this.props.onRoute && this.props.onRoute(routeData)
    };
  }

  render() {
    const {
      Provider,
      history,
      basename,
      children
    } = this.props;
    if (!Provider) throw new Error('Missing Provider for Server Router');
    return (
      /*#__PURE__*/
      // $FlowFixMe
      _jsx(Provider, {
        basename: basename,
        history: history,
        staticContext: this.getRouterStaticContext(),
        children: children
      })
    );
  }

}

_defineProperty(ServerRouter, "defaultProps", {
  basename: '',
  context: {},
  Provider: BaseRouter,
  onRoute: () => {}
});

ServerRouter.childContextTypes = {
  router: () => {},
  onRoute: () => {}
};
const ServerRouterTyped = ServerRouter;
export { ServerRouterTyped as ServerRouter };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL1NlcnZlclJvdXRlci5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlJvdXRlciIsIkJhc2VSb3V0ZXIiLCJTZXJ2ZXJSb3V0ZXIiLCJDb21wb25lbnQiLCJnZXRSb3V0ZXJTdGF0aWNDb250ZXh0IiwiY29udGV4dCIsInByb3BzIiwic2V0Q29kZSIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJzZXQiLCJjb2RlIiwiY29uZmlndXJhYmxlIiwicmVkaXJlY3QiLCJ1cmwiLCJnZXRDaGlsZENvbnRleHQiLCJyb3V0ZXIiLCJzdGF0aWNDb250ZXh0Iiwib25Sb3V0ZSIsInJvdXRlRGF0YSIsInJlbmRlciIsIlByb3ZpZGVyIiwiaGlzdG9yeSIsImJhc2VuYW1lIiwiY2hpbGRyZW4iLCJFcnJvciIsImNoaWxkQ29udGV4dFR5cGVzIiwiU2VydmVyUm91dGVyVHlwZWQiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxPQUFPLEtBQUtBLEtBQVosTUFBdUIsT0FBdkI7QUFFQSxTQUFRQyxNQUFNLElBQUlDLFVBQWxCLFFBQW1DLGtCQUFuQzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsWUFBTixTQUEyQkgsS0FBSyxDQUFDSSxTQUFqQyxDQUFzRDtBQVFwREMsRUFBQUEsc0JBQXNCLEdBQUc7QUFDdkIsUUFBSUMsT0FBTyxHQUFHLEtBQUtDLEtBQUwsQ0FBV0QsT0FBekI7O0FBQ0EsUUFBSUEsT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ0UsT0FBZixLQUEyQixVQUExQyxFQUFzRDtBQUNwREMsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0UsOEVBREY7QUFHQUMsTUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCTixPQUF0QixFQUErQixRQUEvQixFQUF5QztBQUN2Q08sUUFBQUEsR0FBRyxFQUFHQyxJQUFELElBQVU7QUFDYlIsVUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWdCTSxJQUFoQjtBQUNELFNBSHNDO0FBSXZDQyxRQUFBQSxZQUFZLEVBQUU7QUFKeUIsT0FBekM7QUFNRDs7QUFDRCxRQUFJVCxPQUFPLElBQUksT0FBT0EsT0FBTyxDQUFDVSxRQUFmLEtBQTRCLFVBQTNDLEVBQXVEO0FBQ3JEUCxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSw0RUFERjtBQUdBQyxNQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JOLE9BQXRCLEVBQStCLEtBQS9CLEVBQXNDO0FBQ3BDTyxRQUFBQSxHQUFHLEVBQUdJLEdBQUQsSUFBUztBQUNaWCxVQUFBQSxPQUFPLENBQUNVLFFBQVIsQ0FBaUJDLEdBQWpCO0FBQ0QsU0FIbUM7QUFJcENGLFFBQUFBLFlBQVksRUFBRTtBQUpzQixPQUF0QztBQU1EOztBQUNELFdBQU9ULE9BQU8sSUFBSSxFQUFsQjtBQUNEOztBQUVEWSxFQUFBQSxlQUFlLEdBQUc7QUFDaEIsV0FBTztBQUNMQyxNQUFBQSxNQUFNLEVBQUU7QUFDTkMsUUFBQUEsYUFBYSxFQUFFLEtBQUtmLHNCQUFMO0FBRFQsT0FESDtBQUlMZ0IsTUFBQUEsT0FBTyxFQUFHQyxTQUFELElBQ1AsS0FBS2YsS0FBTCxDQUFXYyxPQUFYLElBQXNCLEtBQUtkLEtBQUwsQ0FBV2MsT0FBWCxDQUFtQkMsU0FBbkI7QUFMbkIsS0FBUDtBQU9EOztBQUVEQyxFQUFBQSxNQUFNLEdBQUc7QUFDUCxVQUFNO0FBQUNDLE1BQUFBLFFBQUQ7QUFBV0MsTUFBQUEsT0FBWDtBQUFvQkMsTUFBQUEsUUFBcEI7QUFBOEJDLE1BQUFBO0FBQTlCLFFBQTBDLEtBQUtwQixLQUFyRDtBQUNBLFFBQUksQ0FBQ2lCLFFBQUwsRUFBZSxNQUFNLElBQUlJLEtBQUosQ0FBVSxvQ0FBVixDQUFOO0FBQ2Y7QUFBQTtBQUNFO0FBQ0EsV0FBQyxRQUFEO0FBQ0UsUUFBQSxRQUFRLEVBQUVGLFFBRFo7QUFFRSxRQUFBLE9BQU8sRUFBRUQsT0FGWDtBQUdFLFFBQUEsYUFBYSxFQUFFLEtBQUtwQixzQkFBTCxFQUhqQjtBQUFBLGtCQUtHc0I7QUFMSDtBQUZGO0FBVUQ7O0FBMURtRDs7Z0JBQWhEeEIsWSxrQkFDa0I7QUFDcEJ1QixFQUFBQSxRQUFRLEVBQUUsRUFEVTtBQUVwQnBCLEVBQUFBLE9BQU8sRUFBRSxFQUZXO0FBR3BCa0IsRUFBQUEsUUFBUSxFQUFFdEIsVUFIVTtBQUlwQm1CLEVBQUFBLE9BQU8sRUFBRSxNQUFNLENBQUU7QUFKRyxDOztBQTREeEJsQixZQUFZLENBQUMwQixpQkFBYixHQUFpQztBQUMvQlYsRUFBQUEsTUFBTSxFQUFFLE1BQU0sQ0FBRSxDQURlO0FBRS9CRSxFQUFBQSxPQUFPLEVBQUUsTUFBTSxDQUFFO0FBRmMsQ0FBakM7QUFLQSxNQUFNUyxpQkFBNkIsR0FBRzNCLFlBQXRDO0FBQ0EsU0FBUTJCLGlCQUFpQixJQUFJM0IsWUFBN0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7Um91dGVyIGFzIEJhc2VSb3V0ZXJ9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgdHlwZSB7Um91dGVyUHJvcHNUeXBlIGFzIFByb3BzVHlwZSwgUm91dGVyVHlwZX0gZnJvbSAnLi4vdHlwZXMuanMnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cbmNsYXNzIFNlcnZlclJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wc1R5cGU+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBiYXNlbmFtZTogJycsXG4gICAgY29udGV4dDoge30sXG4gICAgUHJvdmlkZXI6IEJhc2VSb3V0ZXIsXG4gICAgb25Sb3V0ZTogKCkgPT4ge30sXG4gIH07XG5cbiAgZ2V0Um91dGVyU3RhdGljQ29udGV4dCgpIHtcbiAgICBsZXQgY29udGV4dCA9IHRoaXMucHJvcHMuY29udGV4dDtcbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5zZXRDb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdVc2luZyBjb250ZXh0LnNldENvZGUgaXMgZGVwcmVjYXRlZC4gVXNlIGEgc2V0dGVyIG9uIHRoZSBzdGF0dXMgcHJvcCBpbnN0ZWFkJ1xuICAgICAgKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250ZXh0LCAnc3RhdHVzJywge1xuICAgICAgICBzZXQ6IChjb2RlKSA9PiB7XG4gICAgICAgICAgY29udGV4dC5zZXRDb2RlKGNvZGUpO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQucmVkaXJlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1VzaW5nIGNvbnRleHQucmVkaXJlY3QgaXMgZGVwcmVjYXRlZC4gVXNlIGEgc2V0dGVyIG9uIHRoZSB1cmwgcHJvcCBpbnN0ZWFkJ1xuICAgICAgKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250ZXh0LCAndXJsJywge1xuICAgICAgICBzZXQ6ICh1cmwpID0+IHtcbiAgICAgICAgICBjb250ZXh0LnJlZGlyZWN0KHVybCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dCB8fCB7fTtcbiAgfVxuXG4gIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiB7XG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMuZ2V0Um91dGVyU3RhdGljQ29udGV4dCgpLFxuICAgICAgfSxcbiAgICAgIG9uUm91dGU6IChyb3V0ZURhdGE6IGFueSkgPT5cbiAgICAgICAgdGhpcy5wcm9wcy5vblJvdXRlICYmIHRoaXMucHJvcHMub25Sb3V0ZShyb3V0ZURhdGEpLFxuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1Byb3ZpZGVyLCBoaXN0b3J5LCBiYXNlbmFtZSwgY2hpbGRyZW59ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIVByb3ZpZGVyKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgUHJvdmlkZXIgZm9yIFNlcnZlciBSb3V0ZXInKTtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgPFByb3ZpZGVyXG4gICAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgICAgaGlzdG9yeT17aGlzdG9yeX1cbiAgICAgICAgc3RhdGljQ29udGV4dD17dGhpcy5nZXRSb3V0ZXJTdGF0aWNDb250ZXh0KCl9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5TZXJ2ZXJSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogKCkgPT4ge30sXG4gIG9uUm91dGU6ICgpID0+IHt9LFxufTtcblxuY29uc3QgU2VydmVyUm91dGVyVHlwZWQ6IFJvdXRlclR5cGUgPSBTZXJ2ZXJSb3V0ZXI7XG5leHBvcnQge1NlcnZlclJvdXRlclR5cGVkIGFzIFNlcnZlclJvdXRlcn07XG4iXX0=