function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-disable import/no-extraneous-dependencies */
import * as React from 'react';
import PropTypes from 'prop-types';
import { Redirect as RedirectComponent } from 'react-router-dom'; // `react-router` installed by `react-router-dom`
// $FlowFixMe

import { __RouterContext as RouterContext } from 'react-router';
import { jsx as _jsx } from "react/jsx-runtime";
export class Redirect extends React.Component {
  render() {
    return /*#__PURE__*/_jsx(RouterContext.Consumer, {
      children: context => {
        const staticContext = this.context.router && this.context.router.staticContext;

        if (false && staticContext) {
          staticContext.status = parseInt(this.props.code, 10);
        }

        const {
          children,
          code,
          ...rest
        } = this.props;
        return /*#__PURE__*/_jsx(RedirectComponent, { ...rest
        });
      }
    });
  }

}

_defineProperty(Redirect, "defaultProps", {
  push: false,
  code: 307
});

Redirect.contextTypes = {
  router: PropTypes.shape({
    staticContext: PropTypes.object
  })
}; // Sanity type checking

Redirect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL1JlZGlyZWN0LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHJvcFR5cGVzIiwiUmVkaXJlY3QiLCJSZWRpcmVjdENvbXBvbmVudCIsIl9fUm91dGVyQ29udGV4dCIsIlJvdXRlckNvbnRleHQiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJjb250ZXh0Iiwic3RhdGljQ29udGV4dCIsInJvdXRlciIsInN0YXR1cyIsInBhcnNlSW50IiwicHJvcHMiLCJjb2RlIiwiY2hpbGRyZW4iLCJyZXN0IiwicHVzaCIsImNvbnRleHRUeXBlcyIsInNoYXBlIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVFDLFFBQVEsSUFBSUMsaUJBQXBCLFFBQTRDLGtCQUE1QyxDLENBRUE7QUFDQTs7QUFDQSxTQUFRQyxlQUFlLElBQUlDLGFBQTNCLFFBQStDLGNBQS9DOztBQXdCQSxPQUFPLE1BQU1ILFFBQU4sU0FBdUJGLEtBQUssQ0FBQ00sU0FBN0IsQ0FBa0Q7QUFRdkRDLEVBQUFBLE1BQU0sR0FBRztBQUNQLHdCQUNFLEtBQUMsYUFBRCxDQUFlLFFBQWY7QUFBQSxnQkFDSUMsT0FBRCxJQUFhO0FBQ1osY0FBTUMsYUFBYSxHQUNqQixLQUFLRCxPQUFMLENBQWFFLE1BQWIsSUFBdUIsS0FBS0YsT0FBTCxDQUFhRSxNQUFiLENBQW9CRCxhQUQ3Qzs7QUFHQSxZQUFJLFNBQVlBLGFBQWhCLEVBQStCO0FBQzdCQSxVQUFBQSxhQUFhLENBQUNFLE1BQWQsR0FBdUJDLFFBQVEsQ0FBQyxLQUFLQyxLQUFMLENBQVdDLElBQVosRUFBa0IsRUFBbEIsQ0FBL0I7QUFDRDs7QUFFRCxjQUFNO0FBQUNDLFVBQUFBLFFBQUQ7QUFBV0QsVUFBQUEsSUFBWDtBQUFpQixhQUFHRTtBQUFwQixZQUE0QixLQUFLSCxLQUF2QztBQUNBLDRCQUFPLEtBQUMsaUJBQUQsT0FBdUJHO0FBQXZCLFVBQVA7QUFDRDtBQVhILE1BREY7QUFlRDs7QUF4QnNEOztnQkFBNUNkLFEsa0JBR1c7QUFDcEJlLEVBQUFBLElBQUksRUFBRSxLQURjO0FBRXBCSCxFQUFBQSxJQUFJLEVBQUU7QUFGYyxDOztBQXdCeEJaLFFBQVEsQ0FBQ2dCLFlBQVQsR0FBd0I7QUFDdEJSLEVBQUFBLE1BQU0sRUFBRVQsU0FBUyxDQUFDa0IsS0FBVixDQUFnQjtBQUN0QlYsSUFBQUEsYUFBYSxFQUFFUixTQUFTLENBQUNtQjtBQURILEdBQWhCO0FBRGMsQ0FBeEIsQyxDQU1BOztBQUNDbEIsUUFBRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtSZWRpcmVjdCBhcyBSZWRpcmVjdENvbXBvbmVudH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbi8vIGByZWFjdC1yb3V0ZXJgIGluc3RhbGxlZCBieSBgcmVhY3Qtcm91dGVyLWRvbWBcbi8vICRGbG93Rml4TWVcbmltcG9ydCB7X19Sb3V0ZXJDb250ZXh0IGFzIFJvdXRlckNvbnRleHR9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmltcG9ydCB0eXBlIHtcbiAgTG9jYXRpb25TaGFwZVR5cGUsXG4gIFJlZGlyZWN0VHlwZSxcbiAgU3RhdGljQ29udGV4dFR5cGUsXG59IGZyb20gJy4uL3R5cGVzLmpzJztcblxudHlwZSBQcm9wc1R5cGUgPSB7fFxuICB0bzogc3RyaW5nIHwgTG9jYXRpb25TaGFwZVR5cGUsXG4gIHB1c2g/OiBib29sZWFuLFxuICBmcm9tPzogc3RyaW5nLFxuICBleGFjdD86IGJvb2xlYW4sXG4gIHN0cmljdD86IGJvb2xlYW4sXG4gIGNvZGU/OiBudW1iZXIgfCBzdHJpbmcsXG4gIGNoaWxkcmVuPzogUmVhY3QuTm9kZSxcbnx9O1xuXG50eXBlIENvbnRleHRUeXBlID0ge1xuICByb3V0ZXI/OiB7XG4gICAgc3RhdGljQ29udGV4dD86IFN0YXRpY0NvbnRleHRUeXBlLFxuICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIFJlZGlyZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzVHlwZT4ge1xuICBjb250ZXh0OiBDb250ZXh0VHlwZTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHB1c2g6IGZhbHNlLFxuICAgIGNvZGU6IDMwNyxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7KGNvbnRleHQpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0aWNDb250ZXh0ID1cbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgICAgICAgaWYgKF9fTk9ERV9fICYmIHN0YXRpY0NvbnRleHQpIHtcbiAgICAgICAgICAgIHN0YXRpY0NvbnRleHQuc3RhdHVzID0gcGFyc2VJbnQodGhpcy5wcm9wcy5jb2RlLCAxMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qge2NoaWxkcmVuLCBjb2RlLCAuLi5yZXN0fSA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdENvbXBvbmVudCB7Li4ucmVzdH0gLz47XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICB9KSxcbn07XG5cbi8vIFNhbml0eSB0eXBlIGNoZWNraW5nXG4oUmVkaXJlY3Q6IFJlZGlyZWN0VHlwZSk7XG4iXX0=