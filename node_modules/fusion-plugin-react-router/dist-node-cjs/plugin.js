"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RouterToken = exports.RouterProviderToken = exports.GetStaticContextToken = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _fusionPluginUniversalEvents = require("fusion-plugin-universal-events");

var _fusionCore = require("fusion-core");

var _server = require("./server.js");

var _ServerHistory = require("./modules/ServerHistory.js");

var _utils = require("./modules/utils.js");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const GetStaticContextToken = (0, _fusionCore.createToken)('GetStaticContext');
exports.GetStaticContextToken = GetStaticContextToken;
const RouterProviderToken = (0, _fusionCore.createToken)('RouterProvider');
exports.RouterProviderToken = RouterProviderToken;
const RouterToken = (0, _fusionCore.createToken)('Router');
exports.RouterToken = RouterToken;
const Router = true ? _server.Router : BrowserRouter;
// Preserve browser history instance across HMR
let browserHistory;
let noMatchingRoute = 'no-matching-route';
const plugin = (0, _fusionCore.createPlugin)({
  deps: {
    emitter: _fusionPluginUniversalEvents.UniversalEventsToken.optional,
    Provider: RouterProviderToken.optional,
    getStaticContext: GetStaticContextToken.optional,
    RouteTags: _fusionCore.RouteTagsToken
  },
  middleware: ({
    RouteTags,
    emitter,
    Provider = _reactRouterDom.Router,
    getStaticContext
  }, self) => {
    return async (ctx, next) => {
      const tags = RouteTags.from(ctx);
      const prefix = ctx.prefix || '';

      if (!ctx.element) {
        return next();
      }

      const myAPI = self.from(ctx);

      if (true) {
        let pageData = {
          title: ctx.path,
          page: ctx.path
        };
        const context = getStaticContext ? getStaticContext(ctx) : {
          action: null,
          location: null,

          set status(code) {
            ctx.status = code;
          },

          set url(url) {
            const toUrl = (0, _utils.addRoutePrefix)(url, prefix);

            if (typeof toUrl === 'string') {
              ctx.redirect(toUrl);
            }
          }

        }; // Expose the history object

        const history = (0, _ServerHistory.createServerHistory)(prefix, context, prefix + ctx.url);
        myAPI.history = history;
        ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(Router, {
          history: history,
          Provider: Provider,
          onRoute: d => {
            pageData = d;
            tags.name = pageData.title;
            tags.page = pageData.page;
            pageData.routeMatched = true;
          },
          basename: prefix,
          context: context,
          children: ctx.element
        });
        return next().then(() => {
          ctx.template.body.push((0, _fusionCore.html)`
              <script id="__ROUTER_DATA__" type="application/json">
                ${JSON.stringify(pageData)}
              </script>
            `);

          if (emitter) {
            const scopedEmitter = emitter.from(ctx);

            const emitTiming = type => timing => {
              scopedEmitter.emit(type, {
                title: pageData.routeMatched ? pageData.title : noMatchingRoute,
                page: pageData.page,
                status: ctx.status,
                timing
              });
            };

            scopedEmitter.map(payload => {
              if (payload && typeof payload === 'object') {
                if (pageData.routeMatched) {
                  payload.__url__ = pageData.title;
                  payload.__urlParams__ = pageData.params;
                } else {
                  payload.__url__ = noMatchingRoute;
                  payload.__urlParams__ = {};
                }
              }

              return payload;
            });
            ctx.timing.end.then(timing => {
              emitTiming('pageview:server')(timing);
              ctx.timing.render.then(emitTiming('render:server'));
            });
          }
        });
      } else if (false) {
        // TODO(#3): We should consider adding render/downstream/upstream timings for the browser
        let pageData = {};
        const element = document.getElementById('__ROUTER_DATA__');

        if (element) {
          pageData = JSON.parse(unescape(element.textContent));
          tags.name = pageData.title;
          tags.page = pageData.page;
        }

        emitter && emitter.map(payload => {
          if (payload && typeof payload === 'object') {
            if (pageData.routeMatched) {
              payload.__url__ = pageData.title;
              payload.__urlParams__ = pageData.params;
            } else {
              payload.__url__ = noMatchingRoute;
              payload.__urlParams__ = {};
            }
          }

          return payload;
        }); // preserving browser history across hmr fixes warning "Warning: You cannot change <Router history>"
        // we don't want to preserve the `browserHistory` instance across jsdom tests however, as it will cause
        // routes to match based on the previous location information.

        if (!browserHistory || process.env.NODE_ENV !== "production" && typeof window.jsdom !== 'undefined') {
          browserHistory = createBrowserHistory({
            basename: ctx.prefix
          });
        } // Expose the history object


        myAPI.history = browserHistory;
        ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(Router, {
          history: browserHistory,
          Provider: Provider,
          basename: ctx.prefix,
          onRoute: payload => {
            payload.routeMatched = true;
            pageData = payload;
            tags.name = pageData.title;
            tags.page = pageData.page;
            emitter && emitter.emit('pageview:browser', payload);
          },
          children: ctx.element
        });
        return next();
      }
    };
  },

  provides() {
    return {
      from: (0, _fusionCore.memoize)(() => {
        const api = {
          history: null
        };
        return api;
      })
    };
  }

});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,