"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RouterToken = exports.RouterProviderToken = exports.GetStaticContextToken = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _history = require("history");

var _fusionPluginUniversalEvents = require("fusion-plugin-universal-events");

var _fusionCore = require("fusion-core");

var _browser = require("./browser.js");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const GetStaticContextToken = (0, _fusionCore.createToken)('GetStaticContext');
exports.GetStaticContextToken = GetStaticContextToken;
const RouterProviderToken = (0, _fusionCore.createToken)('RouterProvider');
exports.RouterProviderToken = RouterProviderToken;
const RouterToken = (0, _fusionCore.createToken)('Router');
exports.RouterToken = RouterToken;
const Router = false ? ServerRouter : _browser.Router;
// Preserve browser history instance across HMR
let browserHistory;
let noMatchingRoute = 'no-matching-route';
const plugin = (0, _fusionCore.createPlugin)({
  deps: {
    emitter: _fusionPluginUniversalEvents.UniversalEventsToken.optional,
    Provider: RouterProviderToken.optional,
    getStaticContext: GetStaticContextToken.optional,
    RouteTags: _fusionCore.RouteTagsToken
  },
  middleware: ({
    RouteTags,
    emitter,
    Provider = _reactRouterDom.Router,
    getStaticContext
  }, self) => {
    return async (ctx, next) => {
      const tags = RouteTags.from(ctx);
      const prefix = ctx.prefix || '';

      if (!ctx.element) {
        return next();
      }

      const myAPI = self.from(ctx);

      if (false) {
        let pageData = {
          title: ctx.path,
          page: ctx.path
        };
        const context = getStaticContext ? getStaticContext(ctx) : {
          action: null,
          location: null,

          set status(code) {
            ctx.status = code;
          },

          set url(url) {
            const toUrl = addRoutePrefix(url, prefix);

            if (typeof toUrl === 'string') {
              ctx.redirect(toUrl);
            }
          }

        }; // Expose the history object

        const history = createServerHistory(prefix, context, prefix + ctx.url);
        myAPI.history = history;
        ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(Router, {
          history: history,
          Provider: Provider,
          onRoute: d => {
            pageData = d;
            tags.name = pageData.title;
            tags.page = pageData.page;
            pageData.routeMatched = true;
          },
          basename: prefix,
          context: context,
          children: ctx.element
        });
        return next().then(() => {
          ctx.template.body.push(html`
              <script id="__ROUTER_DATA__" type="application/json">
                ${JSON.stringify(pageData)}
              </script>
            `);

          if (emitter) {
            const scopedEmitter = emitter.from(ctx);

            const emitTiming = type => timing => {
              scopedEmitter.emit(type, {
                title: pageData.routeMatched ? pageData.title : noMatchingRoute,
                page: pageData.page,
                status: ctx.status,
                timing
              });
            };

            scopedEmitter.map(payload => {
              if (payload && typeof payload === 'object') {
                if (pageData.routeMatched) {
                  payload.__url__ = pageData.title;
                  payload.__urlParams__ = pageData.params;
                } else {
                  payload.__url__ = noMatchingRoute;
                  payload.__urlParams__ = {};
                }
              }

              return payload;
            });
            ctx.timing.end.then(timing => {
              emitTiming('pageview:server')(timing);
              ctx.timing.render.then(emitTiming('render:server'));
            });
          }
        });
      } else if (true) {
        // TODO(#3): We should consider adding render/downstream/upstream timings for the browser
        let pageData = {};
        const element = document.getElementById('__ROUTER_DATA__');

        if (element) {
          pageData = JSON.parse((0, _fusionCore.unescape)(element.textContent));
          tags.name = pageData.title;
          tags.page = pageData.page;
        }

        emitter && emitter.map(payload => {
          if (payload && typeof payload === 'object') {
            if (pageData.routeMatched) {
              payload.__url__ = pageData.title;
              payload.__urlParams__ = pageData.params;
            } else {
              payload.__url__ = noMatchingRoute;
              payload.__urlParams__ = {};
            }
          }

          return payload;
        }); // preserving browser history across hmr fixes warning "Warning: You cannot change <Router history>"
        // we don't want to preserve the `browserHistory` instance across jsdom tests however, as it will cause
        // routes to match based on the previous location information.

        if (!browserHistory || process.env.NODE_ENV !== "production" && typeof window.jsdom !== 'undefined') {
          browserHistory = (0, _history.createBrowserHistory)({
            basename: ctx.prefix
          });
        } // Expose the history object


        myAPI.history = browserHistory;
        ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(Router, {
          history: browserHistory,
          Provider: Provider,
          basename: ctx.prefix,
          onRoute: payload => {
            payload.routeMatched = true;
            pageData = payload;
            tags.name = pageData.title;
            tags.page = pageData.page;
            emitter && emitter.emit('pageview:browser', payload);
          },
          children: ctx.element
        });
        return next();
      }
    };
  },

  provides() {
    return {
      from: (0, _fusionCore.memoize)(() => {
        const api = {
          history: null
        };
        return api;
      })
    };
  }

});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW4uanMiXSwibmFtZXMiOlsiR2V0U3RhdGljQ29udGV4dFRva2VuIiwiUm91dGVyUHJvdmlkZXJUb2tlbiIsIlJvdXRlclRva2VuIiwiUm91dGVyIiwiU2VydmVyUm91dGVyIiwiQnJvd3NlclJvdXRlciIsImJyb3dzZXJIaXN0b3J5Iiwibm9NYXRjaGluZ1JvdXRlIiwicGx1Z2luIiwiZGVwcyIsImVtaXR0ZXIiLCJVbml2ZXJzYWxFdmVudHNUb2tlbiIsIm9wdGlvbmFsIiwiUHJvdmlkZXIiLCJnZXRTdGF0aWNDb250ZXh0IiwiUm91dGVUYWdzIiwiUm91dGVUYWdzVG9rZW4iLCJtaWRkbGV3YXJlIiwiRGVmYXVsdFByb3ZpZGVyIiwic2VsZiIsImN0eCIsIm5leHQiLCJ0YWdzIiwiZnJvbSIsInByZWZpeCIsImVsZW1lbnQiLCJteUFQSSIsInBhZ2VEYXRhIiwidGl0bGUiLCJwYXRoIiwicGFnZSIsImNvbnRleHQiLCJhY3Rpb24iLCJsb2NhdGlvbiIsInN0YXR1cyIsImNvZGUiLCJ1cmwiLCJ0b1VybCIsImFkZFJvdXRlUHJlZml4IiwicmVkaXJlY3QiLCJoaXN0b3J5IiwiY3JlYXRlU2VydmVySGlzdG9yeSIsImQiLCJuYW1lIiwicm91dGVNYXRjaGVkIiwidGhlbiIsInRlbXBsYXRlIiwiYm9keSIsInB1c2giLCJodG1sIiwiSlNPTiIsInN0cmluZ2lmeSIsInNjb3BlZEVtaXR0ZXIiLCJlbWl0VGltaW5nIiwidHlwZSIsInRpbWluZyIsImVtaXQiLCJtYXAiLCJwYXlsb2FkIiwiX191cmxfXyIsIl9fdXJsUGFyYW1zX18iLCJwYXJhbXMiLCJlbmQiLCJyZW5kZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicGFyc2UiLCJ0ZXh0Q29udGVudCIsIndpbmRvdyIsImpzZG9tIiwiYmFzZW5hbWUiLCJwcm92aWRlcyIsImFwaSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQVdB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dEMsR0FBRyxDQUFDSztBQVpQLFVBREY7QUFnQkEsZUFBT0osSUFBSSxFQUFYO0FBQ0Q7QUFDRixLQXRJRDtBQXVJRCxHQWxKMkU7O0FBbUo1RWtELEVBQUFBLFFBQVEsR0FBRztBQUNULFdBQU87QUFDTGhELE1BQUFBLElBQUksRUFBRSx5QkFBUSxNQUFNO0FBQ2xCLGNBQU1pRCxHQUFpQyxHQUFJO0FBQ3pDaEMsVUFBQUEsT0FBTyxFQUFFO0FBRGdDLFNBQTNDO0FBR0EsZUFBT2dDLEdBQVA7QUFDRCxPQUxLO0FBREQsS0FBUDtBQVFEOztBQTVKMkUsQ0FBYixDQUFqRTtlQStKZWhFLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1JvdXRlciBhcyBEZWZhdWx0UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHtjcmVhdGVCcm93c2VySGlzdG9yeX0gZnJvbSAnaGlzdG9yeSc7XG5cbmltcG9ydCB7VW5pdmVyc2FsRXZlbnRzVG9rZW59IGZyb20gJ2Z1c2lvbi1wbHVnaW4tdW5pdmVyc2FsLWV2ZW50cyc7XG5pbXBvcnQge1xuICBjcmVhdGVQbHVnaW4sXG4gIGNyZWF0ZVRva2VuLFxuICBodG1sLFxuICB1bmVzY2FwZSxcbiAgbWVtb2l6ZSxcbiAgUm91dGVUYWdzVG9rZW4sXG59IGZyb20gJ2Z1c2lvbi1jb3JlJztcbmltcG9ydCB0eXBlIHtUb2tlbiwgQ29udGV4dCwgRnVzaW9uUGx1Z2lufSBmcm9tICdmdXNpb24tY29yZSc7XG5cbmltcG9ydCB7Um91dGVyIGFzIFNlcnZlclJvdXRlcn0gZnJvbSAnLi9zZXJ2ZXIuanMnO1xuaW1wb3J0IHtSb3V0ZXIgYXMgQnJvd3NlclJvdXRlcn0gZnJvbSAnLi9icm93c2VyLmpzJztcbmltcG9ydCB7Y3JlYXRlU2VydmVySGlzdG9yeX0gZnJvbSAnLi9tb2R1bGVzL1NlcnZlckhpc3RvcnkuanMnO1xuXG5pbXBvcnQge2FkZFJvdXRlUHJlZml4fSBmcm9tICcuL21vZHVsZXMvdXRpbHMuanMnO1xuaW1wb3J0IHR5cGUge1JvdXRlckhpc3RvcnlUeXBlLCBTdGF0aWNDb250ZXh0VHlwZX0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbnR5cGUgUHJvdmlkZXJQcm9wc1R5cGUgPSB7XG4gIGhpc3Rvcnk6IFJvdXRlckhpc3RvcnlUeXBlLFxuICBjaGlsZHJlbj86IFJlYWN0Lk5vZGUsXG59O1xuXG50eXBlIEhpc3RvcnlXcmFwcGVyVHlwZSA9IHtcbiAgZnJvbTogKGN0eDogQ29udGV4dCkgPT4ge1xuICAgIGhpc3Rvcnk6IFJvdXRlckhpc3RvcnlUeXBlLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEdldFN0YXRpY0NvbnRleHRUb2tlbiA9XG4gIGNyZWF0ZVRva2VuPChjdHg6IENvbnRleHQpID0+IFN0YXRpY0NvbnRleHRUeXBlPignR2V0U3RhdGljQ29udGV4dCcpO1xuXG5leHBvcnQgY29uc3QgUm91dGVyUHJvdmlkZXJUb2tlbjogVG9rZW48XG4gIFJlYWN0LkNvbXBvbmVudFR5cGU8UHJvdmlkZXJQcm9wc1R5cGU+XG4+ID0gY3JlYXRlVG9rZW4oJ1JvdXRlclByb3ZpZGVyJyk7XG5cbmV4cG9ydCBjb25zdCBSb3V0ZXJUb2tlbjogVG9rZW48SGlzdG9yeVdyYXBwZXJUeXBlPiA9IGNyZWF0ZVRva2VuKCdSb3V0ZXInKTtcblxuY29uc3QgUm91dGVyID0gX19OT0RFX18gPyBTZXJ2ZXJSb3V0ZXIgOiBCcm93c2VyUm91dGVyO1xuXG50eXBlIFBsdWdpbkRlcHNUeXBlID0ge1xuICBnZXRTdGF0aWNDb250ZXh0OiB0eXBlb2YgR2V0U3RhdGljQ29udGV4dFRva2VuLm9wdGlvbmFsLFxuICBlbWl0dGVyOiB0eXBlb2YgVW5pdmVyc2FsRXZlbnRzVG9rZW4ub3B0aW9uYWwsXG4gIFByb3ZpZGVyOiB0eXBlb2YgUm91dGVyUHJvdmlkZXJUb2tlbi5vcHRpb25hbCxcbiAgUm91dGVUYWdzOiB0eXBlb2YgUm91dGVUYWdzVG9rZW4sXG59O1xuXG4vLyBQcmVzZXJ2ZSBicm93c2VyIGhpc3RvcnkgaW5zdGFuY2UgYWNyb3NzIEhNUlxubGV0IGJyb3dzZXJIaXN0b3J5O1xubGV0IG5vTWF0Y2hpbmdSb3V0ZSA9ICduby1tYXRjaGluZy1yb3V0ZSc7XG5cbmNvbnN0IHBsdWdpbjogRnVzaW9uUGx1Z2luPFBsdWdpbkRlcHNUeXBlLCBIaXN0b3J5V3JhcHBlclR5cGU+ID0gY3JlYXRlUGx1Z2luKHtcbiAgZGVwczoge1xuICAgIGVtaXR0ZXI6IFVuaXZlcnNhbEV2ZW50c1Rva2VuLm9wdGlvbmFsLFxuICAgIFByb3ZpZGVyOiBSb3V0ZXJQcm92aWRlclRva2VuLm9wdGlvbmFsLFxuICAgIGdldFN0YXRpY0NvbnRleHQ6IEdldFN0YXRpY0NvbnRleHRUb2tlbi5vcHRpb25hbCxcbiAgICBSb3V0ZVRhZ3M6IFJvdXRlVGFnc1Rva2VuLFxuICB9LFxuICBtaWRkbGV3YXJlOiAoXG4gICAge1JvdXRlVGFncywgZW1pdHRlciwgUHJvdmlkZXIgPSBEZWZhdWx0UHJvdmlkZXIsIGdldFN0YXRpY0NvbnRleHR9LFxuICAgIHNlbGZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgIGNvbnN0IHRhZ3MgPSBSb3V0ZVRhZ3MuZnJvbShjdHgpO1xuICAgICAgY29uc3QgcHJlZml4ID0gY3R4LnByZWZpeCB8fCAnJztcbiAgICAgIGlmICghY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG15QVBJID0gc2VsZi5mcm9tKGN0eCk7XG4gICAgICBpZiAoX19OT0RFX18pIHtcbiAgICAgICAgbGV0IHBhZ2VEYXRhID0ge1xuICAgICAgICAgIHRpdGxlOiBjdHgucGF0aCxcbiAgICAgICAgICBwYWdlOiBjdHgucGF0aCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGdldFN0YXRpY0NvbnRleHRcbiAgICAgICAgICA/IGdldFN0YXRpY0NvbnRleHQoY3R4KVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBhY3Rpb246IG51bGwsXG4gICAgICAgICAgICAgIGxvY2F0aW9uOiBudWxsLFxuICAgICAgICAgICAgICBzZXQgc3RhdHVzKGNvZGU6IG51bWJlcikge1xuICAgICAgICAgICAgICAgIGN0eC5zdGF0dXMgPSBjb2RlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzZXQgdXJsKHVybDogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9VcmwgPSBhZGRSb3V0ZVByZWZpeCh1cmwsIHByZWZpeCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b1VybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIGN0eC5yZWRpcmVjdCh0b1VybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgLy8gRXhwb3NlIHRoZSBoaXN0b3J5IG9iamVjdFxuICAgICAgICBjb25zdCBoaXN0b3J5ID0gY3JlYXRlU2VydmVySGlzdG9yeShwcmVmaXgsIGNvbnRleHQsIHByZWZpeCArIGN0eC51cmwpO1xuICAgICAgICBteUFQSS5oaXN0b3J5ID0gaGlzdG9yeTtcbiAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgPFJvdXRlclxuICAgICAgICAgICAgaGlzdG9yeT17aGlzdG9yeX1cbiAgICAgICAgICAgIFByb3ZpZGVyPXtQcm92aWRlcn1cbiAgICAgICAgICAgIG9uUm91dGU9eyhkKSA9PiB7XG4gICAgICAgICAgICAgIHBhZ2VEYXRhID0gZDtcbiAgICAgICAgICAgICAgdGFncy5uYW1lID0gcGFnZURhdGEudGl0bGU7XG4gICAgICAgICAgICAgIHRhZ3MucGFnZSA9IHBhZ2VEYXRhLnBhZ2U7XG4gICAgICAgICAgICAgIHBhZ2VEYXRhLnJvdXRlTWF0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgYmFzZW5hbWU9e3ByZWZpeH1cbiAgICAgICAgICAgIGNvbnRleHQ9e2NvbnRleHR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2N0eC5lbGVtZW50fVxuICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbmV4dCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGN0eC50ZW1wbGF0ZS5ib2R5LnB1c2goXG4gICAgICAgICAgICBodG1sYFxuICAgICAgICAgICAgICA8c2NyaXB0IGlkPVwiX19ST1VURVJfREFUQV9fXCIgdHlwZT1cImFwcGxpY2F0aW9uL2pzb25cIj5cbiAgICAgICAgICAgICAgICAke0pTT04uc3RyaW5naWZ5KHBhZ2VEYXRhKX1cbiAgICAgICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgICBgXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChlbWl0dGVyKSB7XG4gICAgICAgICAgICBjb25zdCBzY29wZWRFbWl0dGVyID0gZW1pdHRlci5mcm9tKGN0eCk7XG4gICAgICAgICAgICBjb25zdCBlbWl0VGltaW5nID0gKHR5cGUpID0+ICh0aW1pbmcpID0+IHtcbiAgICAgICAgICAgICAgc2NvcGVkRW1pdHRlci5lbWl0KHR5cGUsIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogcGFnZURhdGEucm91dGVNYXRjaGVkID8gcGFnZURhdGEudGl0bGUgOiBub01hdGNoaW5nUm91dGUsXG4gICAgICAgICAgICAgICAgcGFnZTogcGFnZURhdGEucGFnZSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGN0eC5zdGF0dXMsXG4gICAgICAgICAgICAgICAgdGltaW5nLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY29wZWRFbWl0dGVyLm1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICBpZiAocGF5bG9hZCAmJiB0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFnZURhdGEucm91dGVNYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgICBwYXlsb2FkLl9fdXJsX18gPSBwYWdlRGF0YS50aXRsZTtcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQuX191cmxQYXJhbXNfXyA9IHBhZ2VEYXRhLnBhcmFtcztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGF5bG9hZC5fX3VybF9fID0gbm9NYXRjaGluZ1JvdXRlO1xuICAgICAgICAgICAgICAgICAgcGF5bG9hZC5fX3VybFBhcmFtc19fID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHgudGltaW5nLmVuZC50aGVuKCh0aW1pbmcpID0+IHtcbiAgICAgICAgICAgICAgZW1pdFRpbWluZygncGFnZXZpZXc6c2VydmVyJykodGltaW5nKTtcbiAgICAgICAgICAgICAgY3R4LnRpbWluZy5yZW5kZXIudGhlbihlbWl0VGltaW5nKCdyZW5kZXI6c2VydmVyJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoX19CUk9XU0VSX18pIHtcbiAgICAgICAgLy8gVE9ETygjMyk6IFdlIHNob3VsZCBjb25zaWRlciBhZGRpbmcgcmVuZGVyL2Rvd25zdHJlYW0vdXBzdHJlYW0gdGltaW5ncyBmb3IgdGhlIGJyb3dzZXJcbiAgICAgICAgbGV0IHBhZ2VEYXRhID0ge307XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX19ST1VURVJfREFUQV9fJyk7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgcGFnZURhdGEgPSBKU09OLnBhcnNlKHVuZXNjYXBlKGVsZW1lbnQudGV4dENvbnRlbnQpKTtcbiAgICAgICAgICB0YWdzLm5hbWUgPSBwYWdlRGF0YS50aXRsZTtcbiAgICAgICAgICB0YWdzLnBhZ2UgPSBwYWdlRGF0YS5wYWdlO1xuICAgICAgICB9XG4gICAgICAgIGVtaXR0ZXIgJiZcbiAgICAgICAgICBlbWl0dGVyLm1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBheWxvYWQgJiYgdHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGlmIChwYWdlRGF0YS5yb3V0ZU1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLl9fdXJsX18gPSBwYWdlRGF0YS50aXRsZTtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLl9fdXJsUGFyYW1zX18gPSBwYWdlRGF0YS5wYXJhbXM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5fX3VybF9fID0gbm9NYXRjaGluZ1JvdXRlO1xuICAgICAgICAgICAgICAgIHBheWxvYWQuX191cmxQYXJhbXNfXyA9IHt9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gcHJlc2VydmluZyBicm93c2VyIGhpc3RvcnkgYWNyb3NzIGhtciBmaXhlcyB3YXJuaW5nIFwiV2FybmluZzogWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiXG4gICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gcHJlc2VydmUgdGhlIGBicm93c2VySGlzdG9yeWAgaW5zdGFuY2UgYWNyb3NzIGpzZG9tIHRlc3RzIGhvd2V2ZXIsIGFzIGl0IHdpbGwgY2F1c2VcbiAgICAgICAgLy8gcm91dGVzIHRvIG1hdGNoIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBsb2NhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFicm93c2VySGlzdG9yeSB8fFxuICAgICAgICAgIChfX0RFVl9fICYmIHR5cGVvZiB3aW5kb3cuanNkb20gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICApIHtcbiAgICAgICAgICBicm93c2VySGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtiYXNlbmFtZTogY3R4LnByZWZpeH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4cG9zZSB0aGUgaGlzdG9yeSBvYmplY3RcbiAgICAgICAgbXlBUEkuaGlzdG9yeSA9IGJyb3dzZXJIaXN0b3J5O1xuICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICA8Um91dGVyXG4gICAgICAgICAgICBoaXN0b3J5PXticm93c2VySGlzdG9yeX1cbiAgICAgICAgICAgIFByb3ZpZGVyPXtQcm92aWRlcn1cbiAgICAgICAgICAgIGJhc2VuYW1lPXtjdHgucHJlZml4fVxuICAgICAgICAgICAgb25Sb3V0ZT17KHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgcGF5bG9hZC5yb3V0ZU1hdGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBwYWdlRGF0YSA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgIHRhZ3MubmFtZSA9IHBhZ2VEYXRhLnRpdGxlO1xuICAgICAgICAgICAgICB0YWdzLnBhZ2UgPSBwYWdlRGF0YS5wYWdlO1xuICAgICAgICAgICAgICBlbWl0dGVyICYmIGVtaXR0ZXIuZW1pdCgncGFnZXZpZXc6YnJvd3NlcicsIHBheWxvYWQpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y3R4LmVsZW1lbnR9XG4gICAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgcHJvdmlkZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb206IG1lbW9pemUoKCkgPT4ge1xuICAgICAgICBjb25zdCBhcGk6IHtoaXN0b3J5OiBSb3V0ZXJIaXN0b3J5VHlwZX0gPSAoe1xuICAgICAgICAgIGhpc3Rvcnk6IG51bGwsXG4gICAgICAgIH06IGFueSk7XG4gICAgICAgIHJldHVybiBhcGk7XG4gICAgICB9KSxcbiAgICB9O1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBsdWdpbjtcbiJdfQ==