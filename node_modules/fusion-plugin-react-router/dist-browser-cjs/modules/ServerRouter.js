"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerRouter = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */
class ServerRouter extends React.Component {
  getRouterStaticContext() {
    let context = this.props.context;

    if (context && typeof context.setCode === 'function') {
      console.warn('Using context.setCode is deprecated. Use a setter on the status prop instead');
      Object.defineProperty(context, 'status', {
        set: code => {
          context.setCode(code);
        },
        configurable: true
      });
    }

    if (context && typeof context.redirect === 'function') {
      console.warn('Using context.redirect is deprecated. Use a setter on the url prop instead');
      Object.defineProperty(context, 'url', {
        set: url => {
          context.redirect(url);
        },
        configurable: true
      });
    }

    return context || {};
  }

  getChildContext() {
    return {
      router: {
        staticContext: this.getRouterStaticContext()
      },
      onRoute: routeData => this.props.onRoute && this.props.onRoute(routeData)
    };
  }

  render() {
    const {
      Provider,
      history,
      basename,
      children
    } = this.props;
    if (!Provider) throw new Error('Missing Provider for Server Router');
    return (
      /*#__PURE__*/
      // $FlowFixMe
      (0, _jsxRuntime.jsx)(Provider, {
        basename: basename,
        history: history,
        staticContext: this.getRouterStaticContext(),
        children: children
      })
    );
  }

}

_defineProperty(ServerRouter, "defaultProps", {
  basename: '',
  context: {},
  Provider: _reactRouterDom.Router,
  onRoute: () => {}
});

ServerRouter.childContextTypes = {
  router: () => {},
  onRoute: () => {}
};
const ServerRouterTyped = ServerRouter;
exports.ServerRouter = ServerRouterTyped;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL1NlcnZlclJvdXRlci5qcyJdLCJuYW1lcyI6WyJTZXJ2ZXJSb3V0ZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImdldFJvdXRlclN0YXRpY0NvbnRleHQiLCJjb250ZXh0IiwicHJvcHMiLCJzZXRDb2RlIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInNldCIsImNvZGUiLCJjb25maWd1cmFibGUiLCJyZWRpcmVjdCIsInVybCIsImdldENoaWxkQ29udGV4dCIsInJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJvblJvdXRlIiwicm91dGVEYXRhIiwicmVuZGVyIiwiUHJvdmlkZXIiLCJoaXN0b3J5IiwiYmFzZW5hbWUiLCJjaGlsZHJlbiIsIkVycm9yIiwiQmFzZVJvdXRlciIsImNoaWxkQ29udGV4dFR5cGVzIiwiU2VydmVyUm91dGVyVHlwZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFRQTs7QUFFQTs7Ozs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFlBQU4sU0FBMkJDLEtBQUssQ0FBQ0MsU0FBakMsQ0FBc0Q7QUFRcERDLEVBQUFBLHNCQUFzQixHQUFHO0FBQ3ZCLFFBQUlDLE9BQU8sR0FBRyxLQUFLQyxLQUFMLENBQVdELE9BQXpCOztBQUNBLFFBQUlBLE9BQU8sSUFBSSxPQUFPQSxPQUFPLENBQUNFLE9BQWYsS0FBMkIsVUFBMUMsRUFBc0Q7QUFDcERDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLDhFQURGO0FBR0FDLE1BQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQk4sT0FBdEIsRUFBK0IsUUFBL0IsRUFBeUM7QUFDdkNPLFFBQUFBLEdBQUcsRUFBR0MsSUFBRCxJQUFVO0FBQ2JSLFVBQUFBLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQk0sSUFBaEI7QUFDRCxTQUhzQztBQUl2Q0MsUUFBQUEsWUFBWSxFQUFFO0FBSnlCLE9BQXpDO0FBTUQ7O0FBQ0QsUUFBSVQsT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ1UsUUFBZixLQUE0QixVQUEzQyxFQUF1RDtBQUNyRFAsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0UsNEVBREY7QUFHQUMsTUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCTixPQUF0QixFQUErQixLQUEvQixFQUFzQztBQUNwQ08sUUFBQUEsR0FBRyxFQUFHSSxHQUFELElBQVM7QUFDWlgsVUFBQUEsT0FBTyxDQUFDVSxRQUFSLENBQWlCQyxHQUFqQjtBQUNELFNBSG1DO0FBSXBDRixRQUFBQSxZQUFZLEVBQUU7QUFKc0IsT0FBdEM7QUFNRDs7QUFDRCxXQUFPVCxPQUFPLElBQUksRUFBbEI7QUFDRDs7QUFFRFksRUFBQUEsZUFBZSxHQUFHO0FBQ2hCLFdBQU87QUFDTEMsTUFBQUEsTUFBTSxFQUFFO0FBQ05DLFFBQUFBLGFBQWEsRUFBRSxLQUFLZixzQkFBTDtBQURULE9BREg7QUFJTGdCLE1BQUFBLE9BQU8sRUFBR0MsU0FBRCxJQUNQLEtBQUtmLEtBQUwsQ0FBV2MsT0FBWCxJQUFzQixLQUFLZCxLQUFMLENBQVdjLE9BQVgsQ0FBbUJDLFNBQW5CO0FBTG5CLEtBQVA7QUFPRDs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsVUFBTTtBQUFDQyxNQUFBQSxRQUFEO0FBQVdDLE1BQUFBLE9BQVg7QUFBb0JDLE1BQUFBLFFBQXBCO0FBQThCQyxNQUFBQTtBQUE5QixRQUEwQyxLQUFLcEIsS0FBckQ7QUFDQSxRQUFJLENBQUNpQixRQUFMLEVBQWUsTUFBTSxJQUFJSSxLQUFKLENBQVUsb0NBQVYsQ0FBTjtBQUNmO0FBQUE7QUFDRTtBQUNBLDJCQUFDLFFBQUQ7QUFDRSxRQUFBLFFBQVEsRUFBRUYsUUFEWjtBQUVFLFFBQUEsT0FBTyxFQUFFRCxPQUZYO0FBR0UsUUFBQSxhQUFhLEVBQUUsS0FBS3BCLHNCQUFMLEVBSGpCO0FBQUEsa0JBS0dzQjtBQUxIO0FBRkY7QUFVRDs7QUExRG1EOztnQkFBaER6QixZLGtCQUNrQjtBQUNwQndCLEVBQUFBLFFBQVEsRUFBRSxFQURVO0FBRXBCcEIsRUFBQUEsT0FBTyxFQUFFLEVBRlc7QUFHcEJrQixFQUFBQSxRQUFRLEVBQUVLLHNCQUhVO0FBSXBCUixFQUFBQSxPQUFPLEVBQUUsTUFBTSxDQUFFO0FBSkcsQzs7QUE0RHhCbkIsWUFBWSxDQUFDNEIsaUJBQWIsR0FBaUM7QUFDL0JYLEVBQUFBLE1BQU0sRUFBRSxNQUFNLENBQUUsQ0FEZTtBQUUvQkUsRUFBQUEsT0FBTyxFQUFFLE1BQU0sQ0FBRTtBQUZjLENBQWpDO0FBS0EsTUFBTVUsaUJBQTZCLEdBQUc3QixZQUF0QyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtSb3V0ZXIgYXMgQmFzZVJvdXRlcn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCB0eXBlIHtSb3V0ZXJQcm9wc1R5cGUgYXMgUHJvcHNUeXBlLCBSb3V0ZXJUeXBlfSBmcm9tICcuLi90eXBlcy5qcyc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuY2xhc3MgU2VydmVyUm91dGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzVHlwZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGJhc2VuYW1lOiAnJyxcbiAgICBjb250ZXh0OiB7fSxcbiAgICBQcm92aWRlcjogQmFzZVJvdXRlcixcbiAgICBvblJvdXRlOiAoKSA9PiB7fSxcbiAgfTtcblxuICBnZXRSb3V0ZXJTdGF0aWNDb250ZXh0KCkge1xuICAgIGxldCBjb250ZXh0ID0gdGhpcy5wcm9wcy5jb250ZXh0O1xuICAgIGlmIChjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LnNldENvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1VzaW5nIGNvbnRleHQuc2V0Q29kZSBpcyBkZXByZWNhdGVkLiBVc2UgYSBzZXR0ZXIgb24gdGhlIHN0YXR1cyBwcm9wIGluc3RlYWQnXG4gICAgICApO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHQsICdzdGF0dXMnLCB7XG4gICAgICAgIHNldDogKGNvZGUpID0+IHtcbiAgICAgICAgICBjb250ZXh0LnNldENvZGUoY29kZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5yZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnVXNpbmcgY29udGV4dC5yZWRpcmVjdCBpcyBkZXByZWNhdGVkLiBVc2UgYSBzZXR0ZXIgb24gdGhlIHVybCBwcm9wIGluc3RlYWQnXG4gICAgICApO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHQsICd1cmwnLCB7XG4gICAgICAgIHNldDogKHVybCkgPT4ge1xuICAgICAgICAgIGNvbnRleHQucmVkaXJlY3QodXJsKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0IHx8IHt9O1xuICB9XG5cbiAgZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5nZXRSb3V0ZXJTdGF0aWNDb250ZXh0KCksXG4gICAgICB9LFxuICAgICAgb25Sb3V0ZTogKHJvdXRlRGF0YTogYW55KSA9PlxuICAgICAgICB0aGlzLnByb3BzLm9uUm91dGUgJiYgdGhpcy5wcm9wcy5vblJvdXRlKHJvdXRlRGF0YSksXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7UHJvdmlkZXIsIGhpc3RvcnksIGJhc2VuYW1lLCBjaGlsZHJlbn0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghUHJvdmlkZXIpIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBQcm92aWRlciBmb3IgU2VydmVyIFJvdXRlcicpO1xuICAgIHJldHVybiAoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICA8UHJvdmlkZXJcbiAgICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgICBoaXN0b3J5PXtoaXN0b3J5fVxuICAgICAgICBzdGF0aWNDb250ZXh0PXt0aGlzLmdldFJvdXRlclN0YXRpY0NvbnRleHQoKX1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9Qcm92aWRlcj5cbiAgICApO1xuICB9XG59XG5cblNlcnZlclJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiAoKSA9PiB7fSxcbiAgb25Sb3V0ZTogKCkgPT4ge30sXG59O1xuXG5jb25zdCBTZXJ2ZXJSb3V0ZXJUeXBlZDogUm91dGVyVHlwZSA9IFNlcnZlclJvdXRlcjtcbmV4cG9ydCB7U2VydmVyUm91dGVyVHlwZWQgYXMgU2VydmVyUm91dGVyfTtcbiJdfQ==