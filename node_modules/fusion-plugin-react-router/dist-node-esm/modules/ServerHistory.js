/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
// $FlowFixMe
import { createPath, createLocation as defaultCreateLocation } from 'history';
import { addRoutePrefix, removeRoutePrefix } from './utils.js';

const createLocation = (path, prefix) => {
  const unprefixed = removeRoutePrefix(path, prefix);

  try {
    return defaultCreateLocation(unprefixed);
  } catch (e) {
    if (e instanceof URIError) {
      return defaultCreateLocation(typeof unprefixed === 'string' ? encodeURI(unprefixed) : { ...unprefixed,
        pathname: encodeURI(unprefixed.pathname)
      });
    } else {
      throw e;
    }
  }
};

const createPrefixedURL = (location, prefix) => {
  const prefixed = addRoutePrefix(location, prefix);

  if (typeof prefixed === 'string') {
    return prefixed;
  } else {
    return createPath(prefixed);
  }
};

const staticHandler = methodName => () => {
  throw new Error(`You cannot ${methodName} with server side <Router>`);
};

const noop = () => {};

export function createServerHistory(basename, context, location) {
  function createHref(location) {
    return createPrefixedURL(location, basename);
  }

  function push(path) {
    context.action = 'PUSH';
    context.location = createLocation(path, basename);
    const url = createPath(context.location);

    if (typeof url === 'string') {
      context.url = url;
    }
  }

  function replace(path) {
    context.action = 'REPLACE';
    context.location = createLocation(path, basename);
    const url = createPath(context.location);

    if (typeof url === 'string') {
      context.url = url;
    }
  }

  const history = {
    length: 0,
    createHref,
    action: 'POP',
    location: createLocation(location, basename),
    push,
    replace,
    go: staticHandler('go'),
    goBack: staticHandler('back'),
    goForward: staticHandler('forward'),
    listen: () => noop
  };
  return history;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL1NlcnZlckhpc3RvcnkuanMiXSwibmFtZXMiOlsiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiZGVmYXVsdENyZWF0ZUxvY2F0aW9uIiwiYWRkUm91dGVQcmVmaXgiLCJyZW1vdmVSb3V0ZVByZWZpeCIsInBhdGgiLCJwcmVmaXgiLCJ1bnByZWZpeGVkIiwiZSIsIlVSSUVycm9yIiwiZW5jb2RlVVJJIiwicGF0aG5hbWUiLCJjcmVhdGVQcmVmaXhlZFVSTCIsImxvY2F0aW9uIiwicHJlZml4ZWQiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIkVycm9yIiwibm9vcCIsImNyZWF0ZVNlcnZlckhpc3RvcnkiLCJiYXNlbmFtZSIsImNvbnRleHQiLCJjcmVhdGVIcmVmIiwicHVzaCIsImFjdGlvbiIsInVybCIsInJlcGxhY2UiLCJoaXN0b3J5IiwibGVuZ3RoIiwiZ28iLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSxTQUFRQSxVQUFSLEVBQW9CQyxjQUFjLElBQUlDLHFCQUF0QyxRQUFrRSxTQUFsRTtBQUVBLFNBQVFDLGNBQVIsRUFBd0JDLGlCQUF4QixRQUFnRCxZQUFoRDs7QUFPQSxNQUFNSCxjQUFjLEdBQUcsQ0FDckJJLElBRHFCLEVBRXJCQyxNQUZxQixLQUdKO0FBQ2pCLFFBQU1DLFVBQVUsR0FBR0gsaUJBQWlCLENBQUNDLElBQUQsRUFBT0MsTUFBUCxDQUFwQzs7QUFDQSxNQUFJO0FBQ0YsV0FBT0oscUJBQXFCLENBQUNLLFVBQUQsQ0FBNUI7QUFDRCxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsUUFBSUEsQ0FBQyxZQUFZQyxRQUFqQixFQUEyQjtBQUN6QixhQUFPUCxxQkFBcUIsQ0FDMUIsT0FBT0ssVUFBUCxLQUFzQixRQUF0QixHQUNJRyxTQUFTLENBQUNILFVBQUQsQ0FEYixHQUVJLEVBQ0UsR0FBR0EsVUFETDtBQUVFSSxRQUFBQSxRQUFRLEVBQUVELFNBQVMsQ0FBQ0gsVUFBVSxDQUFDSSxRQUFaO0FBRnJCLE9BSHNCLENBQTVCO0FBUUQsS0FURCxNQVNPO0FBQ0wsWUFBTUgsQ0FBTjtBQUNEO0FBQ0Y7QUFDRixDQXJCRDs7QUF1QkEsTUFBTUksaUJBQWlCLEdBQUcsQ0FDeEJDLFFBRHdCLEVBRXhCUCxNQUZ3QixLQUdFO0FBQzFCLFFBQU1RLFFBQVEsR0FBR1gsY0FBYyxDQUFDVSxRQUFELEVBQVdQLE1BQVgsQ0FBL0I7O0FBQ0EsTUFBSSxPQUFPUSxRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDLFdBQU9BLFFBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPZCxVQUFVLENBQUNjLFFBQUQsQ0FBakI7QUFDRDtBQUNGLENBVkQ7O0FBWUEsTUFBTUMsYUFBYSxHQUFJQyxVQUFELElBQWdCLE1BQU07QUFDMUMsUUFBTSxJQUFJQyxLQUFKLENBQVcsY0FBYUQsVUFBVyw0QkFBbkMsQ0FBTjtBQUNELENBRkQ7O0FBSUEsTUFBTUUsSUFBSSxHQUFHLE1BQU0sQ0FBRSxDQUFyQjs7QUFFQSxPQUFPLFNBQVNDLG1CQUFULENBQ0xDLFFBREssRUFFTEMsT0FGSyxFQUdMUixRQUhLLEVBSWM7QUFDbkIsV0FBU1MsVUFBVCxDQUFvQlQsUUFBcEIsRUFBNEU7QUFDMUUsV0FBT0QsaUJBQWlCLENBQUNDLFFBQUQsRUFBV08sUUFBWCxDQUF4QjtBQUNEOztBQUNELFdBQVNHLElBQVQsQ0FBY2xCLElBQWQsRUFBNEI7QUFDMUJnQixJQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUIsTUFBakI7QUFDQUgsSUFBQUEsT0FBTyxDQUFDUixRQUFSLEdBQW1CWixjQUFjLENBQUNJLElBQUQsRUFBT2UsUUFBUCxDQUFqQztBQUNBLFVBQU1LLEdBQUcsR0FBR3pCLFVBQVUsQ0FBQ3FCLE9BQU8sQ0FBQ1IsUUFBVCxDQUF0Qjs7QUFDQSxRQUFJLE9BQU9ZLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQkosTUFBQUEsT0FBTyxDQUFDSSxHQUFSLEdBQWNBLEdBQWQ7QUFDRDtBQUNGOztBQUVELFdBQVNDLE9BQVQsQ0FBaUJyQixJQUFqQixFQUErQjtBQUM3QmdCLElBQUFBLE9BQU8sQ0FBQ0csTUFBUixHQUFpQixTQUFqQjtBQUNBSCxJQUFBQSxPQUFPLENBQUNSLFFBQVIsR0FBbUJaLGNBQWMsQ0FBQ0ksSUFBRCxFQUFPZSxRQUFQLENBQWpDO0FBQ0EsVUFBTUssR0FBRyxHQUFHekIsVUFBVSxDQUFDcUIsT0FBTyxDQUFDUixRQUFULENBQXRCOztBQUNBLFFBQUksT0FBT1ksR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCSixNQUFBQSxPQUFPLENBQUNJLEdBQVIsR0FBY0EsR0FBZDtBQUNEO0FBQ0Y7O0FBQ0QsUUFBTUUsT0FBTyxHQUFHO0FBQ2RDLElBQUFBLE1BQU0sRUFBRSxDQURNO0FBRWROLElBQUFBLFVBRmM7QUFHZEUsSUFBQUEsTUFBTSxFQUFFLEtBSE07QUFJZFgsSUFBQUEsUUFBUSxFQUFFWixjQUFjLENBQUNZLFFBQUQsRUFBV08sUUFBWCxDQUpWO0FBS2RHLElBQUFBLElBTGM7QUFNZEcsSUFBQUEsT0FOYztBQU9kRyxJQUFBQSxFQUFFLEVBQUVkLGFBQWEsQ0FBQyxJQUFELENBUEg7QUFRZGUsSUFBQUEsTUFBTSxFQUFFZixhQUFhLENBQUMsTUFBRCxDQVJQO0FBU2RnQixJQUFBQSxTQUFTLEVBQUVoQixhQUFhLENBQUMsU0FBRCxDQVRWO0FBVWRpQixJQUFBQSxNQUFNLEVBQUUsTUFBTWQ7QUFWQSxHQUFoQjtBQVlBLFNBQVFTLE9BQVI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vICRGbG93Rml4TWVcbmltcG9ydCB7Y3JlYXRlUGF0aCwgY3JlYXRlTG9jYXRpb24gYXMgZGVmYXVsdENyZWF0ZUxvY2F0aW9ufSBmcm9tICdoaXN0b3J5JztcblxuaW1wb3J0IHthZGRSb3V0ZVByZWZpeCwgcmVtb3ZlUm91dGVQcmVmaXh9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHR5cGUge1xuICBSb3V0ZXJIaXN0b3J5VHlwZSxcbiAgTG9jYXRpb25UeXBlLFxuICBTdGF0aWNDb250ZXh0VHlwZSxcbn0gZnJvbSAnLi4vdHlwZXMuanMnO1xuXG5jb25zdCBjcmVhdGVMb2NhdGlvbiA9IChcbiAgcGF0aDogc3RyaW5nIHwgTG9jYXRpb25UeXBlLFxuICBwcmVmaXg6IHN0cmluZ1xuKTogTG9jYXRpb25UeXBlID0+IHtcbiAgY29uc3QgdW5wcmVmaXhlZCA9IHJlbW92ZVJvdXRlUHJlZml4KHBhdGgsIHByZWZpeCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlZmF1bHRDcmVhdGVMb2NhdGlvbih1bnByZWZpeGVkKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0Q3JlYXRlTG9jYXRpb24oXG4gICAgICAgIHR5cGVvZiB1bnByZWZpeGVkID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gZW5jb2RlVVJJKHVucHJlZml4ZWQpXG4gICAgICAgICAgOiB7XG4gICAgICAgICAgICAgIC4uLnVucHJlZml4ZWQsXG4gICAgICAgICAgICAgIHBhdGhuYW1lOiBlbmNvZGVVUkkodW5wcmVmaXhlZC5wYXRobmFtZSksXG4gICAgICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgY3JlYXRlUHJlZml4ZWRVUkwgPSAoXG4gIGxvY2F0aW9uOiBzdHJpbmcgfCBMb2NhdGlvblR5cGUsXG4gIHByZWZpeDogc3RyaW5nXG4pOiBzdHJpbmcgfCBMb2NhdGlvblR5cGUgPT4ge1xuICBjb25zdCBwcmVmaXhlZCA9IGFkZFJvdXRlUHJlZml4KGxvY2F0aW9uLCBwcmVmaXgpO1xuICBpZiAodHlwZW9mIHByZWZpeGVkID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwcmVmaXhlZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlUGF0aChwcmVmaXhlZCk7XG4gIH1cbn07XG5cbmNvbnN0IHN0YXRpY0hhbmRsZXIgPSAobWV0aG9kTmFtZSkgPT4gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBjYW5ub3QgJHttZXRob2ROYW1lfSB3aXRoIHNlcnZlciBzaWRlIDxSb3V0ZXI+YCk7XG59O1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXJ2ZXJIaXN0b3J5KFxuICBiYXNlbmFtZTogc3RyaW5nLFxuICBjb250ZXh0OiBTdGF0aWNDb250ZXh0VHlwZSxcbiAgbG9jYXRpb246IHN0cmluZyB8IExvY2F0aW9uVHlwZVxuKTogUm91dGVySGlzdG9yeVR5cGUge1xuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uOiBzdHJpbmcgfCBMb2NhdGlvblR5cGUpOiBzdHJpbmcgfCBMb2NhdGlvblR5cGUge1xuICAgIHJldHVybiBjcmVhdGVQcmVmaXhlZFVSTChsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICB9XG4gIGZ1bmN0aW9uIHB1c2gocGF0aDogc3RyaW5nKSB7XG4gICAgY29udGV4dC5hY3Rpb24gPSAnUFVTSCc7XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIGJhc2VuYW1lKTtcbiAgICBjb25zdCB1cmwgPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pO1xuICAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29udGV4dC51cmwgPSB1cmw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoOiBzdHJpbmcpIHtcbiAgICBjb250ZXh0LmFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgYmFzZW5hbWUpO1xuICAgIGNvbnN0IHVybCA9IGNyZWF0ZVBhdGgoY29udGV4dC5sb2NhdGlvbik7XG4gICAgaWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb250ZXh0LnVybCA9IHVybDtcbiAgICB9XG4gIH1cbiAgY29uc3QgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IDAsXG4gICAgY3JlYXRlSHJlZixcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgYmFzZW5hbWUpLFxuICAgIHB1c2gsXG4gICAgcmVwbGFjZSxcbiAgICBnbzogc3RhdGljSGFuZGxlcignZ28nKSxcbiAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoJ2JhY2snKSxcbiAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoJ2ZvcndhcmQnKSxcbiAgICBsaXN0ZW46ICgpID0+IG5vb3AsXG4gIH07XG4gIHJldHVybiAoaGlzdG9yeTogYW55KTtcbn1cbiJdfQ==