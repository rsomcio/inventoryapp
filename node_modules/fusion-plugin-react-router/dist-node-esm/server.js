/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import { BrowserRouter as BrowserRouterUntyped, HashRouter as HashRouterUntyped, Link as LinkUntyped, MemoryRouter as MemoryRouterUntyped, NavLink as NavLinkUntyped, Prompt as PromptUntyped, Router as _Router, Switch as SwitchUntyped, matchPath as matchPathUntyped, withRouter as withRouterUntyped, useHistory as useHistoryUntyped, useParams as useParamsUntyped, useRouteMatch as useRouteMatchUntyped, useLocation as useLocationUntyped } from 'react-router-dom';
import { Status, NotFound } from './modules/Status';
import { Redirect } from './modules/Redirect';
import { ServerRouter as Router } from './modules/ServerRouter';
import { Route } from './modules/Route';

/**
 * Cast each of these imports from react-router-dom to a copied-version of their
 * types.  This is necessary as the libdef defined types will not be accessible to
 * consumers of this package.
 */
const BrowserRouter = BrowserRouterUntyped;
const HashRouter = HashRouterUntyped;
const Link = LinkUntyped;
const MemoryRouter = MemoryRouterUntyped;
const NavLink = NavLinkUntyped;
const Prompt = PromptUntyped;
const Switch = SwitchUntyped;
const matchPath = matchPathUntyped;
const withRouter = withRouterUntyped;
const useHistory = useHistoryUntyped;
const useRouteMatch = useRouteMatchUntyped;
const useLocation = useLocationUntyped;
const useParams = useParamsUntyped;
export { BrowserRouter, HashRouter, Link, MemoryRouter, NavLink, Prompt, _Router, Switch, matchPath, withRouter, Status, NotFound, Redirect, Router, Route, useHistory, useRouteMatch, useLocation, useParams };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXIuanMiXSwibmFtZXMiOlsiQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXJVbnR5cGVkIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJVbnR5cGVkIiwiTGluayIsIkxpbmtVbnR5cGVkIiwiTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyVW50eXBlZCIsIk5hdkxpbmsiLCJOYXZMaW5rVW50eXBlZCIsIlByb21wdCIsIlByb21wdFVudHlwZWQiLCJSb3V0ZXIiLCJfUm91dGVyIiwiU3dpdGNoIiwiU3dpdGNoVW50eXBlZCIsIm1hdGNoUGF0aCIsIm1hdGNoUGF0aFVudHlwZWQiLCJ3aXRoUm91dGVyIiwid2l0aFJvdXRlclVudHlwZWQiLCJ1c2VIaXN0b3J5IiwidXNlSGlzdG9yeVVudHlwZWQiLCJ1c2VQYXJhbXMiLCJ1c2VQYXJhbXNVbnR5cGVkIiwidXNlUm91dGVNYXRjaCIsInVzZVJvdXRlTWF0Y2hVbnR5cGVkIiwidXNlTG9jYXRpb24iLCJ1c2VMb2NhdGlvblVudHlwZWQiLCJTdGF0dXMiLCJOb3RGb3VuZCIsIlJlZGlyZWN0IiwiU2VydmVyUm91dGVyIiwiUm91dGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsU0FDRUEsYUFBYSxJQUFJQyxvQkFEbkIsRUFFRUMsVUFBVSxJQUFJQyxpQkFGaEIsRUFHRUMsSUFBSSxJQUFJQyxXQUhWLEVBSUVDLFlBQVksSUFBSUMsbUJBSmxCLEVBS0VDLE9BQU8sSUFBSUMsY0FMYixFQU1FQyxNQUFNLElBQUlDLGFBTlosRUFPRUMsTUFBTSxJQUFJQyxPQVBaLEVBUUVDLE1BQU0sSUFBSUMsYUFSWixFQVNFQyxTQUFTLElBQUlDLGdCQVRmLEVBVUVDLFVBQVUsSUFBSUMsaUJBVmhCLEVBV0VDLFVBQVUsSUFBSUMsaUJBWGhCLEVBWUVDLFNBQVMsSUFBSUMsZ0JBWmYsRUFhRUMsYUFBYSxJQUFJQyxvQkFibkIsRUFjRUMsV0FBVyxJQUFJQyxrQkFkakIsUUFlTyxrQkFmUDtBQWlCQSxTQUFRQyxNQUFSLEVBQWdCQyxRQUFoQixRQUErQixrQkFBL0I7QUFDQSxTQUFRQyxRQUFSLFFBQXVCLG9CQUF2QjtBQUNBLFNBQVFDLFlBQVksSUFBSW5CLE1BQXhCLFFBQXFDLHdCQUFyQztBQUNBLFNBQVFvQixLQUFSLFFBQW9CLGlCQUFwQjs7QUFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1oQyxhQUFnQyxHQUFHQyxvQkFBekM7QUFDQSxNQUFNQyxVQUEwQixHQUFHQyxpQkFBbkM7QUFDQSxNQUFNQyxJQUFjLEdBQUdDLFdBQXZCO0FBQ0EsTUFBTUMsWUFBOEIsR0FBR0MsbUJBQXZDO0FBQ0EsTUFBTUMsT0FBb0IsR0FBR0MsY0FBN0I7QUFDQSxNQUFNQyxNQUFrQixHQUFHQyxhQUEzQjtBQUNBLE1BQU1HLE1BQWtCLEdBQUdDLGFBQTNCO0FBQ0EsTUFBTUMsU0FBd0IsR0FBR0MsZ0JBQWpDO0FBQ0EsTUFBTUMsVUFBMEIsR0FBR0MsaUJBQW5DO0FBQ0EsTUFBTUMsVUFBbUMsR0FBR0MsaUJBQTVDO0FBQ0EsTUFBTUcsYUFBOEIsR0FBR0Msb0JBQXZDO0FBQ0EsTUFBTUMsV0FBK0IsR0FBR0Msa0JBQXhDO0FBQ0EsTUFBTUwsU0FBMkIsR0FBR0MsZ0JBQXBDO0FBRUEsU0FDRXZCLGFBREYsRUFFRUUsVUFGRixFQUdFRSxJQUhGLEVBSUVFLFlBSkYsRUFLRUUsT0FMRixFQU1FRSxNQU5GLEVBT0VHLE9BUEYsRUFRRUMsTUFSRixFQVNFRSxTQVRGLEVBVUVFLFVBVkYsRUFXRVUsTUFYRixFQVlFQyxRQVpGLEVBYUVDLFFBYkYsRUFjRWxCLE1BZEYsRUFlRW9CLEtBZkYsRUFnQkVaLFVBaEJGLEVBaUJFSSxhQWpCRixFQWtCRUUsV0FsQkYsRUFtQkVKLFNBbkJGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHtcbiAgQnJvd3NlclJvdXRlciBhcyBCcm93c2VyUm91dGVyVW50eXBlZCxcbiAgSGFzaFJvdXRlciBhcyBIYXNoUm91dGVyVW50eXBlZCxcbiAgTGluayBhcyBMaW5rVW50eXBlZCxcbiAgTWVtb3J5Um91dGVyIGFzIE1lbW9yeVJvdXRlclVudHlwZWQsXG4gIE5hdkxpbmsgYXMgTmF2TGlua1VudHlwZWQsXG4gIFByb21wdCBhcyBQcm9tcHRVbnR5cGVkLFxuICBSb3V0ZXIgYXMgX1JvdXRlcixcbiAgU3dpdGNoIGFzIFN3aXRjaFVudHlwZWQsXG4gIG1hdGNoUGF0aCBhcyBtYXRjaFBhdGhVbnR5cGVkLFxuICB3aXRoUm91dGVyIGFzIHdpdGhSb3V0ZXJVbnR5cGVkLFxuICB1c2VIaXN0b3J5IGFzIHVzZUhpc3RvcnlVbnR5cGVkLFxuICB1c2VQYXJhbXMgYXMgdXNlUGFyYW1zVW50eXBlZCxcbiAgdXNlUm91dGVNYXRjaCBhcyB1c2VSb3V0ZU1hdGNoVW50eXBlZCxcbiAgdXNlTG9jYXRpb24gYXMgdXNlTG9jYXRpb25VbnR5cGVkLFxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW1wb3J0IHtTdGF0dXMsIE5vdEZvdW5kfSBmcm9tICcuL21vZHVsZXMvU3RhdHVzJztcbmltcG9ydCB7UmVkaXJlY3R9IGZyb20gJy4vbW9kdWxlcy9SZWRpcmVjdCc7XG5pbXBvcnQge1NlcnZlclJvdXRlciBhcyBSb3V0ZXJ9IGZyb20gJy4vbW9kdWxlcy9TZXJ2ZXJSb3V0ZXInO1xuaW1wb3J0IHtSb3V0ZX0gZnJvbSAnLi9tb2R1bGVzL1JvdXRlJztcblxuaW1wb3J0IHR5cGUge1xuICBCcm93c2VyUm91dGVyVHlwZSxcbiAgSGFzaFJvdXRlclR5cGUsXG4gIExpbmtUeXBlLFxuICBNZW1vcnlSb3V0ZXJUeXBlLFxuICBOYXZMaW5rVHlwZSxcbiAgUHJvbXB0VHlwZSxcbiAgU3dpdGNoVHlwZSxcbiAgbWF0Y2hQYXRoVHlwZSxcbiAgd2l0aFJvdXRlclR5cGUsXG4gIFJvdXRlckhpc3RvcnlUeXBlLFxuICBNYXRjaFR5cGUsXG4gIExvY2F0aW9uVHlwZSxcbiAgUGFyYW1zVHlwZSxcbn0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbi8qKlxuICogQ2FzdCBlYWNoIG9mIHRoZXNlIGltcG9ydHMgZnJvbSByZWFjdC1yb3V0ZXItZG9tIHRvIGEgY29waWVkLXZlcnNpb24gb2YgdGhlaXJcbiAqIHR5cGVzLiAgVGhpcyBpcyBuZWNlc3NhcnkgYXMgdGhlIGxpYmRlZiBkZWZpbmVkIHR5cGVzIHdpbGwgbm90IGJlIGFjY2Vzc2libGUgdG9cbiAqIGNvbnN1bWVycyBvZiB0aGlzIHBhY2thZ2UuXG4gKi9cbmNvbnN0IEJyb3dzZXJSb3V0ZXI6IEJyb3dzZXJSb3V0ZXJUeXBlID0gQnJvd3NlclJvdXRlclVudHlwZWQ7XG5jb25zdCBIYXNoUm91dGVyOiBIYXNoUm91dGVyVHlwZSA9IEhhc2hSb3V0ZXJVbnR5cGVkO1xuY29uc3QgTGluazogTGlua1R5cGUgPSBMaW5rVW50eXBlZDtcbmNvbnN0IE1lbW9yeVJvdXRlcjogTWVtb3J5Um91dGVyVHlwZSA9IE1lbW9yeVJvdXRlclVudHlwZWQ7XG5jb25zdCBOYXZMaW5rOiBOYXZMaW5rVHlwZSA9IE5hdkxpbmtVbnR5cGVkO1xuY29uc3QgUHJvbXB0OiBQcm9tcHRUeXBlID0gUHJvbXB0VW50eXBlZDtcbmNvbnN0IFN3aXRjaDogU3dpdGNoVHlwZSA9IFN3aXRjaFVudHlwZWQ7XG5jb25zdCBtYXRjaFBhdGg6IG1hdGNoUGF0aFR5cGUgPSBtYXRjaFBhdGhVbnR5cGVkO1xuY29uc3Qgd2l0aFJvdXRlcjogd2l0aFJvdXRlclR5cGUgPSB3aXRoUm91dGVyVW50eXBlZDtcbmNvbnN0IHVzZUhpc3Rvcnk6ICgpID0+IFJvdXRlckhpc3RvcnlUeXBlID0gdXNlSGlzdG9yeVVudHlwZWQ7XG5jb25zdCB1c2VSb3V0ZU1hdGNoOiAoKSA9PiBNYXRjaFR5cGUgPSB1c2VSb3V0ZU1hdGNoVW50eXBlZDtcbmNvbnN0IHVzZUxvY2F0aW9uOiAoKSA9PiBMb2NhdGlvblR5cGUgPSB1c2VMb2NhdGlvblVudHlwZWQ7XG5jb25zdCB1c2VQYXJhbXM6ICgpID0+IFBhcmFtc1R5cGUgPSB1c2VQYXJhbXNVbnR5cGVkO1xuXG5leHBvcnQge1xuICBCcm93c2VyUm91dGVyLFxuICBIYXNoUm91dGVyLFxuICBMaW5rLFxuICBNZW1vcnlSb3V0ZXIsXG4gIE5hdkxpbmssXG4gIFByb21wdCxcbiAgX1JvdXRlcixcbiAgU3dpdGNoLFxuICBtYXRjaFBhdGgsXG4gIHdpdGhSb3V0ZXIsXG4gIFN0YXR1cyxcbiAgTm90Rm91bmQsXG4gIFJlZGlyZWN0LFxuICBSb3V0ZXIsXG4gIFJvdXRlLFxuICB1c2VIaXN0b3J5LFxuICB1c2VSb3V0ZU1hdGNoLFxuICB1c2VMb2NhdGlvbixcbiAgdXNlUGFyYW1zLFxufTtcbiJdfQ==