import { run } from './test-helper';
import App, { createPlugin, unstable_EnableServerStreamingToken, SSRDeciderToken, Context } from '../index';
test('ssrDecider works', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  const CustomPlugin = createPlugin({
    deps: {
      ssrDecider: SSRDeciderToken
    },
    middleware: deps => async (ctx, next) => {
      ctx.fullSSRValue = deps.ssrDecider(ctx);
      return next();
    }
  });
  app.register(CustomPlugin);
  const ctx = await run(app, {
    method: 'GET',
    headers: {
      accept: 'text/html'
    },
    path: '/'
  });
  expect(ctx.fullSSRValue).toBe(true);
});
test('ssrDecider returns `stream` when streaming', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  const CustomPlugin = createPlugin({
    deps: {
      ssrDecider: SSRDeciderToken
    },
    middleware: deps => async (ctx, next) => {
      ctx.fullSSRValue = deps.ssrDecider(ctx);
      return next();
    }
  });
  app.register(CustomPlugin);
  app.register(unstable_EnableServerStreamingToken, true);
  const ctx = await run(app, {
    method: 'GET',
    headers: {
      accept: 'text/html'
    },
    path: '/'
  });
  expect(ctx.fullSSRValue).toBe('stream');
});
test('ssrDecider returns true when bot even if token is true', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  const CustomPlugin = createPlugin({
    deps: {
      ssrDecider: SSRDeciderToken
    },
    middleware: deps => async (ctx, next) => {
      ctx.fullSSRValue = deps.ssrDecider(ctx);
      return next();
    }
  });
  app.register(CustomPlugin);
  app.register(unstable_EnableServerStreamingToken, true);
  const ctx = await run(app, {
    method: 'GET',
    headers: {
      accept: 'text/html',
      'user-agent': 'bot'
    },
    path: '/'
  });
  expect(ctx.fullSSRValue).toBe(true);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJydW4iLCJBcHAiLCJjcmVhdGVQbHVnaW4iLCJ1bnN0YWJsZV9FbmFibGVTZXJ2ZXJTdHJlYW1pbmdUb2tlbiIsIlNTUkRlY2lkZXJUb2tlbiIsIkNvbnRleHQiLCJ0ZXN0IiwiZWxlbWVudCIsInJlbmRlckZuIiwiZWwiLCJhcHAiLCJDdXN0b21QbHVnaW4iLCJkZXBzIiwic3NyRGVjaWRlciIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZnVsbFNTUlZhbHVlIiwicmVnaXN0ZXIiLCJtZXRob2QiLCJoZWFkZXJzIiwiYWNjZXB0IiwicGF0aCIsImV4cGVjdCIsInRvQmUiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL3Nzci1kZWNpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cnVufSBmcm9tICcuL3Rlc3QtaGVscGVyJztcbmltcG9ydCBBcHAsIHtcbiAgY3JlYXRlUGx1Z2luLFxuICB1bnN0YWJsZV9FbmFibGVTZXJ2ZXJTdHJlYW1pbmdUb2tlbixcbiAgU1NSRGVjaWRlclRva2VuLFxuICBDb250ZXh0LFxufSBmcm9tICcuLi9pbmRleCc7XG5cbnRlc3QoJ3NzckRlY2lkZXIgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXJGbiA9IChlbCkgPT4ge1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChlbGVtZW50LCByZW5kZXJGbik7XG5cbiAgY29uc3QgQ3VzdG9tUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiB7XG4gICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgfSxcbiAgICBtaWRkbGV3YXJlOiAoZGVwcykgPT4gYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgY3R4LmZ1bGxTU1JWYWx1ZSA9IGRlcHMuc3NyRGVjaWRlcihjdHgpO1xuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9LFxuICB9KTtcblxuICBhcHAucmVnaXN0ZXIoQ3VzdG9tUGx1Z2luKTtcblxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhY2NlcHQ6ICd0ZXh0L2h0bWwnLFxuICAgIH0sXG4gICAgcGF0aDogJy8nLFxuICB9IGFzIENvbnRleHQpO1xuICBleHBlY3QoY3R4LmZ1bGxTU1JWYWx1ZSkudG9CZSh0cnVlKTtcbn0pO1xuXG50ZXN0KCdzc3JEZWNpZGVyIHJldHVybnMgYHN0cmVhbWAgd2hlbiBzdHJlYW1pbmcnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXJGbiA9IChlbCkgPT4ge1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChlbGVtZW50LCByZW5kZXJGbik7XG5cbiAgY29uc3QgQ3VzdG9tUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiB7XG4gICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgfSxcbiAgICBtaWRkbGV3YXJlOiAoZGVwcykgPT4gYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgY3R4LmZ1bGxTU1JWYWx1ZSA9IGRlcHMuc3NyRGVjaWRlcihjdHgpO1xuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9LFxuICB9KTtcblxuICBhcHAucmVnaXN0ZXIoQ3VzdG9tUGx1Z2luKTtcbiAgYXBwLnJlZ2lzdGVyKHVuc3RhYmxlX0VuYWJsZVNlcnZlclN0cmVhbWluZ1Rva2VuLCB0cnVlKTtcbiAgY29uc3QgY3R4ID0gYXdhaXQgcnVuKGFwcCwge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgYWNjZXB0OiAndGV4dC9odG1sJyxcbiAgICB9LFxuICAgIHBhdGg6ICcvJyxcbiAgfSBhcyBDb250ZXh0KTtcbiAgZXhwZWN0KGN0eC5mdWxsU1NSVmFsdWUpLnRvQmUoJ3N0cmVhbScpO1xufSk7XG5cbnRlc3QoJ3NzckRlY2lkZXIgcmV0dXJucyB0cnVlIHdoZW4gYm90IGV2ZW4gaWYgdG9rZW4gaXMgdHJ1ZScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcblxuICBjb25zdCBDdXN0b21QbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHNzckRlY2lkZXI6IFNTUkRlY2lkZXJUb2tlbixcbiAgICB9LFxuICAgIG1pZGRsZXdhcmU6IChkZXBzKSA9PiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBjdHguZnVsbFNTUlZhbHVlID0gZGVwcy5zc3JEZWNpZGVyKGN0eCk7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGFwcC5yZWdpc3RlcihDdXN0b21QbHVnaW4pO1xuICBhcHAucmVnaXN0ZXIodW5zdGFibGVfRW5hYmxlU2VydmVyU3RyZWFtaW5nVG9rZW4sIHRydWUpO1xuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhY2NlcHQ6ICd0ZXh0L2h0bWwnLFxuICAgICAgJ3VzZXItYWdlbnQnOiAnYm90JyxcbiAgICB9LFxuICAgIHBhdGg6ICcvJyxcbiAgfSBhcyBDb250ZXh0KTtcbiAgZXhwZWN0KGN0eC5mdWxsU1NSVmFsdWUpLnRvQmUodHJ1ZSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUUEsR0FBRyxRQUFPLGVBQWU7QUFDakMsT0FBT0MsR0FBRyxJQUNSQyxZQUFZLEVBQ1pDLG1DQUFtQyxFQUNuQ0MsZUFBZSxFQUNmQyxPQUFPLFFBQ0YsVUFBVTtBQUVqQkMsSUFBSSxDQUFDLGtC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