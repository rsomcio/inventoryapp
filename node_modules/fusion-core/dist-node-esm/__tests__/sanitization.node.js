/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

import { html, consumeSanitizedHTML, dangerouslySetHTML, escape, unescape } from '../sanitization';
test('escaping works', async () => {
  expect(escape('<meta name="" />&')).toBe('\\u003Cmeta name=\\u0022\\u0022 /\\u003E\\u0026');
});
test('unescaping works', async () => {
  expect(unescape('\\u003Cmeta name=\\u0022\\u0022 /\\u003E\\u0026')).toBe('<meta name="" />&');
});
test('html sanitization works', async () => {
  const userData = '<malicious data="" />';
  const value = html`
    <div>${userData}</div>
    ${String(null)}
  `;
  expect(typeof value).toBe('object');
  expect(consumeSanitizedHTML(value)).toBe(`\n    <div>\\u003Cmalicious data=\\u0022\\u0022 /\\u003E</div>\n    null\n  `);
});
test('nested sanitization works', async () => {
  const safe = html` hello `;
  const value = html` <div>${safe}</div> `;
  expect(typeof value).toBe('object');
  expect(consumeSanitizedHTML(value)).toBe(` <div> hello </div> `);
});
test('dangerouslySetHTML works', async () => {
  const trusted = dangerouslySetHTML(JSON.stringify({
    a: 1
  }));
  expect(typeof trusted).toBe('object');
  expect(consumeSanitizedHTML(trusted)).toBe(`{"a":1}`);
});
test('sanitization with empty string works', async () => {
  const obj = dangerouslySetHTML('');
  expect(escape(obj)).toBe('');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodG1sIiwiY29uc3VtZVNhbml0aXplZEhUTUwiLCJkYW5nZXJvdXNseVNldEhUTUwiLCJlc2NhcGUiLCJ1bmVzY2FwZSIsInRlc3QiLCJleHBlY3QiLCJ0b0JlIiwidXNlckRhdGEiLCJ2YWx1ZSIsIlN0cmluZyIsInNhZmUiLCJ0cnVzdGVkIiwiSlNPTiIsInN0cmluZ2lmeSIsImEiLCJvYmoiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL3Nhbml0aXphdGlvbi5ub2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHtcbiAgaHRtbCxcbiAgY29uc3VtZVNhbml0aXplZEhUTUwsXG4gIGRhbmdlcm91c2x5U2V0SFRNTCxcbiAgZXNjYXBlLFxuICB1bmVzY2FwZSxcbn0gZnJvbSAnLi4vc2FuaXRpemF0aW9uJztcblxudGVzdCgnZXNjYXBpbmcgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gIGV4cGVjdChlc2NhcGUoJzxtZXRhIG5hbWU9XCJcIiAvPiYnKSkudG9CZShcbiAgICAnXFxcXHUwMDNDbWV0YSBuYW1lPVxcXFx1MDAyMlxcXFx1MDAyMiAvXFxcXHUwMDNFXFxcXHUwMDI2J1xuICApO1xufSk7XG50ZXN0KCd1bmVzY2FwaW5nIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICBleHBlY3QodW5lc2NhcGUoJ1xcXFx1MDAzQ21ldGEgbmFtZT1cXFxcdTAwMjJcXFxcdTAwMjIgL1xcXFx1MDAzRVxcXFx1MDAyNicpKS50b0JlKFxuICAgICc8bWV0YSBuYW1lPVwiXCIgLz4mJ1xuICApO1xufSk7XG50ZXN0KCdodG1sIHNhbml0aXphdGlvbiB3b3JrcycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgdXNlckRhdGEgPSAnPG1hbGljaW91cyBkYXRhPVwiXCIgLz4nO1xuICBjb25zdCB2YWx1ZSA9IGh0bWxgXG4gICAgPGRpdj4ke3VzZXJEYXRhfTwvZGl2PlxuICAgICR7U3RyaW5nKG51bGwpfVxuICBgO1xuICBleHBlY3QodHlwZW9mIHZhbHVlKS50b0JlKCdvYmplY3QnKTtcbiAgZXhwZWN0KGNvbnN1bWVTYW5pdGl6ZWRIVE1MKHZhbHVlKSkudG9CZShcbiAgICBgXFxuICAgIDxkaXY+XFxcXHUwMDNDbWFsaWNpb3VzIGRhdGE9XFxcXHUwMDIyXFxcXHUwMDIyIC9cXFxcdTAwM0U8L2Rpdj5cXG4gICAgbnVsbFxcbiAgYFxuICApO1xufSk7XG50ZXN0KCduZXN0ZWQgc2FuaXRpemF0aW9uIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzYWZlID0gaHRtbGAgaGVsbG8gYDtcbiAgY29uc3QgdmFsdWUgPSBodG1sYCA8ZGl2PiR7c2FmZX08L2Rpdj4gYDtcbiAgZXhwZWN0KHR5cGVvZiB2YWx1ZSkudG9CZSgnb2JqZWN0Jyk7XG4gIGV4cGVjdChjb25zdW1lU2FuaXRpemVkSFRNTCh2YWx1ZSkpLnRvQmUoYCA8ZGl2PiBoZWxsbyA8L2Rpdj4gYCk7XG59KTtcbnRlc3QoJ2Rhbmdlcm91c2x5U2V0SFRNTCB3b3JrcycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgdHJ1c3RlZCA9IGRhbmdlcm91c2x5U2V0SFRNTChKU09OLnN0cmluZ2lmeSh7YTogMX0pKTtcbiAgZXhwZWN0KHR5cGVvZiB0cnVzdGVkKS50b0JlKCdvYmplY3QnKTtcbiAgZXhwZWN0KGNvbnN1bWVTYW5pdGl6ZWRIVE1MKHRydXN0ZWQpKS50b0JlKGB7XCJhXCI6MX1gKTtcbn0pO1xudGVzdCgnc2FuaXRpemF0aW9uIHdpdGggZW1wdHkgc3RyaW5nIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBvYmogPSBkYW5nZXJvdXNseVNldEhUTUwoJycpO1xuICBleHBlY3QoZXNjYXBlKG9iaikpLnRvQmUoJycpO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUNFQSxJQUFJLEVBQ0pDLG9CQUFvQixFQUNwQkMsa0JBQWtCLEVBQ2xCQyxNQUFNLEVBQ05DLFFBQVEsUUFDSCxpQkFBaUI7QUFFeEJDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZO0VBQ2pDQyxNQUFNLENBQUNILE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUNJLElBQUksQ0FDdEMsaURBQWlELENBQ2xEO0FBQ0gsQ0FBQyxDQUFDO0FBQ0ZGLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxZQUFZO0VBQ25DQyxNQUFNLENBQUNGLFFBQVEsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDLENBQUNHLElBQUksQ0FDdEUsbUJBQW1CLENBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBQ0ZGLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxZQUFZO0VBQzFDLE1BQU1HLFFBQVEsR0FBRyx1QkFBdUI7RUFDeEMsTUFBTUMsS0FBSyxHQUFHVCxJQUFLO0FBQ3JCLFdBQVdRLFFBQVM7QUFDcEIsTUFBTUUsTUFBTSxDQUFDLElBQUksQ0FBRTtBQUNuQixHQUFHO0VBQ0RKLE1BQU0sQ0FBQyxPQUFPRyxLQUFLLENBQUMsQ0FBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQztFQUNuQ0QsTUFBTSxDQUFDTCxvQkFBb0IsQ0FBQ1EsS0FBSyxDQUFDLENBQUMsQ0FBQ0YsSUFBSSxDQUNyQyw4RUFBNkUsQ0FDL0U7QUFDSCxDQUFDLENBQUM7QUFDRkYsSUFBSSxDQUFDLDJCQUEyQixFQUFFLFlBQVk7RUFDNUMsTUFBTU0sSUFBSSxHQUFHWCxJQUFLLFNBQVE7RUFDMUIsTUFBTVMsS0FBSyxHQUFHVCxJQUFLLFNBQVFXLElBQUssU0FBUTtFQUN4Q0wsTUFBTSxDQUFDLE9BQU9HLEtBQUssQ0FBQyxDQUFDRixJQUFJLENBQUMsUUFBUSxDQUFDO0VBQ25DRCxNQUFNLENBQUNMLG9CQUFvQixDQUFDUSxLQUFLLENBQUMsQ0FBQyxDQUFDRixJQUFJLENBQUUsc0JBQXFCLENBQUM7QUFDbEUsQ0FBQyxDQUFDO0FBQ0ZGLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFZO0VBQzNDLE1BQU1PLE9BQU8sR0FBR1Ysa0JBQWtCLENBQUNXLElBQUksQ0FBQ0MsU0FBUyxDQUFDO0lBQUNDLENBQUMsRUFBRTtFQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFEVCxNQUFNLENBQUMsT0FBT00sT0FBTyxDQUFDLENBQUNMLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDckNELE1BQU0sQ0FBQ0wsb0JBQW9CLENBQUNXLE9BQU8sQ0FBQyxDQUFDLENBQUNMLElBQUksQ0FBRSxTQUFRLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0FBQ0ZGLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxZQUFZO0VBQ3ZELE1BQU1XLEdBQUcsR0FBR2Qsa0JBQWtCLENBQUMsRUFBRSxDQUFDO0VBQ2xDSSxNQUFNLENBQUNILE1BQU0sQ0FBQ2EsR0FBRyxDQUFDLENBQUMsQ0FBQ1QsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUM5QixDQUFDLENBQUMifQ==