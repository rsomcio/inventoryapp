/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
/* eslint-env node */
import { compose } from './compose';
import Timing, { TimingToken } from './plugins/timing';
import BaseApp from './base-app';
import serverRenderer from './plugins/server-renderer';
import { RenderToken, ElementToken, SSRDeciderToken, SSRBodyTemplateToken, SSRShellTemplateToken, ErrorHandlerToken } from './tokens';
import ssrPlugin from './plugins/ssr';
import contextMiddleware from './plugins/server-context';
import { appSymbol } from './utils/app-symbol';
import { Middleware } from './types';
import { createPlugin } from './create-plugin';
export default function () {
  const Koa = require('koa');
  return class ServerApp extends BaseApp {
    constructor(el, render) {
      super(el, render);
      this.endpoints = new Map();
      this._app = new Koa();
      this._app.proxy = true;
      this.middleware(contextMiddleware);
      this.middleware((ctx, next) => {
        // @ts-expect-error todo(flow->ts) why we need to use symbol for this? why not regular property?
        ctx[appSymbol] = this;
        return next();
      });
      this.register(TimingToken, Timing);
      this.middleware((ctx, next) => {
        for (const [endpointPath, handler] of this.endpoints) {
          if (ctx.path === endpointPath) {
            return handler(ctx, next);
          }
        }
        return next();
      });
      this.middleware({
        element: ElementToken,
        ssrDecider: SSRDeciderToken,
        ssrBodyTemplate: SSRBodyTemplateToken.optional,
        ssrShellTemplate: SSRShellTemplateToken.optional
      }, ssrPlugin(this.endpoints));
      this.register(createPlugin({
        deps: {
          errorHandler: ErrorHandlerToken.optional
        },
        provides: ({
          errorHandler
        }) => {
          if (!errorHandler) {
            return;
          }
          this._app.on('error', (err, ctx) => {
            errorHandler(err, 'request', ctx);
          });
        }
      }));
    }
    resolve() {
      this.middleware({
        timing: TimingToken,
        render: RenderToken,
        ssrDecider: SSRDeciderToken
      }, serverRenderer(this));
      return super.resolve();
    }
    callback() {
      this.resolve();
      this._app.use(compose(this.plugins));
      return this._app.callback();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21wb3NlIiwiVGltaW5nIiwiVGltaW5nVG9rZW4iLCJCYXNlQXBwIiwic2VydmVyUmVuZGVyZXIiLCJSZW5kZXJUb2tlbiIsIkVsZW1lbnRUb2tlbiIsIlNTUkRlY2lkZXJUb2tlbiIsIlNTUkJvZHlUZW1wbGF0ZVRva2VuIiwiU1NSU2hlbGxUZW1wbGF0ZVRva2VuIiwiRXJyb3JIYW5kbGVyVG9rZW4iLCJzc3JQbHVnaW4iLCJjb250ZXh0TWlkZGxld2FyZSIsImFwcFN5bWJvbCIsIk1pZGRsZXdhcmUiLCJjcmVhdGVQbHVnaW4iLCJLb2EiLCJyZXF1aXJlIiwiU2VydmVyQXBwIiwiY29uc3RydWN0b3IiLCJlbCIsInJlbmRlciIsImVuZHBvaW50cyIsIk1hcCIsIl9hcHAiLCJwcm94eSIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwicmVnaXN0ZXIiLCJlbmRwb2ludFBhdGgiLCJoYW5kbGVyIiwicGF0aCIsImVsZW1lbnQiLCJzc3JEZWNpZGVyIiwic3NyQm9keVRlbXBsYXRlIiwib3B0aW9uYWwiLCJzc3JTaGVsbFRlbXBsYXRlIiwiZGVwcyIsImVycm9ySGFuZGxlciIsInByb3ZpZGVzIiwib24iLCJlcnIiLCJyZXNvbHZlIiwidGltaW5nIiwiY2FsbGJhY2siLCJ1c2UiLCJwbHVnaW5zIl0sInNvdXJjZXMiOlsic3JjL3NlcnZlci1hcHAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG5pbXBvcnQge2NvbXBvc2V9IGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgVGltaW5nLCB7VGltaW5nVG9rZW59IGZyb20gJy4vcGx1Z2lucy90aW1pbmcnO1xuaW1wb3J0IEJhc2VBcHAgZnJvbSAnLi9iYXNlLWFwcCc7XG5pbXBvcnQgc2VydmVyUmVuZGVyZXIgZnJvbSAnLi9wbHVnaW5zL3NlcnZlci1yZW5kZXJlcic7XG5pbXBvcnQge1xuICBSZW5kZXJUb2tlbixcbiAgRWxlbWVudFRva2VuLFxuICBTU1JEZWNpZGVyVG9rZW4sXG4gIFNTUkJvZHlUZW1wbGF0ZVRva2VuLFxuICBTU1JTaGVsbFRlbXBsYXRlVG9rZW4sXG4gIEVycm9ySGFuZGxlclRva2VuLFxufSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQgc3NyUGx1Z2luIGZyb20gJy4vcGx1Z2lucy9zc3InO1xuaW1wb3J0IGNvbnRleHRNaWRkbGV3YXJlIGZyb20gJy4vcGx1Z2lucy9zZXJ2ZXItY29udGV4dCc7XG5pbXBvcnQge2FwcFN5bWJvbH0gZnJvbSAnLi91dGlscy9hcHAtc3ltYm9sJztcbmltcG9ydCB7TWlkZGxld2FyZX0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbn0gZnJvbSAnLi9jcmVhdGUtcGx1Z2luJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBjb25zdCBLb2EgPSByZXF1aXJlKCdrb2EnKTtcblxuICByZXR1cm4gY2xhc3MgU2VydmVyQXBwIGV4dGVuZHMgQmFzZUFwcCB7XG4gICAgX2FwcDogaW1wb3J0KCdrb2EnKTtcbiAgICBlbmRwb2ludHM6IE1hcDxzdHJpbmcsIE1pZGRsZXdhcmU+O1xuICAgIGNvbnN0cnVjdG9yKGVsOiBhbnksIHJlbmRlcjogYW55KSB7XG4gICAgICBzdXBlcihlbCwgcmVuZGVyKTtcbiAgICAgIHRoaXMuZW5kcG9pbnRzID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy5fYXBwID0gbmV3IEtvYSgpO1xuICAgICAgdGhpcy5fYXBwLnByb3h5ID0gdHJ1ZTtcbiAgICAgIHRoaXMubWlkZGxld2FyZShjb250ZXh0TWlkZGxld2FyZSk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRvZG8oZmxvdy0+dHMpIHdoeSB3ZSBuZWVkIHRvIHVzZSBzeW1ib2wgZm9yIHRoaXM/IHdoeSBub3QgcmVndWxhciBwcm9wZXJ0eT9cbiAgICAgICAgY3R4W2FwcFN5bWJvbF0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlZ2lzdGVyKFRpbWluZ1Rva2VuLCBUaW1pbmcpO1xuICAgICAgdGhpcy5taWRkbGV3YXJlKChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbZW5kcG9pbnRQYXRoLCBoYW5kbGVyXSBvZiB0aGlzLmVuZHBvaW50cykge1xuICAgICAgICAgIGlmIChjdHgucGF0aCA9PT0gZW5kcG9pbnRQYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcihjdHgsIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoXG4gICAgICAgIHtcbiAgICAgICAgICBlbGVtZW50OiBFbGVtZW50VG9rZW4sXG4gICAgICAgICAgc3NyRGVjaWRlcjogU1NSRGVjaWRlclRva2VuLFxuICAgICAgICAgIHNzckJvZHlUZW1wbGF0ZTogU1NSQm9keVRlbXBsYXRlVG9rZW4ub3B0aW9uYWwsXG4gICAgICAgICAgc3NyU2hlbGxUZW1wbGF0ZTogU1NSU2hlbGxUZW1wbGF0ZVRva2VuLm9wdGlvbmFsLFxuICAgICAgICB9LFxuICAgICAgICBzc3JQbHVnaW4odGhpcy5lbmRwb2ludHMpXG4gICAgICApO1xuICAgICAgdGhpcy5yZWdpc3RlcihcbiAgICAgICAgY3JlYXRlUGx1Z2luKHtcbiAgICAgICAgICBkZXBzOiB7ZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJUb2tlbi5vcHRpb25hbH0sXG4gICAgICAgICAgcHJvdmlkZXM6ICh7ZXJyb3JIYW5kbGVyfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFlcnJvckhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYXBwLm9uKCdlcnJvcicsIChlcnIsIGN0eCkgPT4ge1xuICAgICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyLCAncmVxdWVzdCcsIGN0eCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmVzb2x2ZSgpIHtcbiAgICAgIHRoaXMubWlkZGxld2FyZShcbiAgICAgICAge1xuICAgICAgICAgIHRpbWluZzogVGltaW5nVG9rZW4sXG4gICAgICAgICAgcmVuZGVyOiBSZW5kZXJUb2tlbixcbiAgICAgICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZlclJlbmRlcmVyKHRoaXMpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHN1cGVyLnJlc29sdmUoKTtcbiAgICB9XG4gICAgY2FsbGJhY2soKSB7XG4gICAgICB0aGlzLnJlc29sdmUoKTtcbiAgICAgIHRoaXMuX2FwcC51c2UoY29tcG9zZSh0aGlzLnBsdWdpbnMpKTtcbiAgICAgIHJldHVybiB0aGlzLl9hcHAuY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUUEsT0FBTyxRQUFPLFdBQVc7QUFDakMsT0FBT0MsTUFBTSxJQUFHQyxXQUFXLFFBQU8sa0JBQWtCO0FBQ3BELE9BQU9DLE9BQU8sTUFBTSxZQUFZO0FBQ2hDLE9BQU9DLGNBQWMsTUFBTSwyQkFBMkI7QUFDdEQsU0FDRUMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLGVBQWUsRUFDZkMsb0JBQW9CLEVBQ3BCQyxxQkFBcUIsRUFD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