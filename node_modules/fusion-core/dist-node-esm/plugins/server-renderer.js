/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

import { now } from '../utils/now';
export default function createServerRenderPlugin(app) {
  return function serverRenderPlugin({
    render,
    timing,
    ssrDecider
  }) {
    return async function renderer(ctx, next) {
      app._setRef();
      app.renderSetupCtx = ctx;
      // Element wrappers should be added in *reverse* topological order so that
      // the resulting element tree is in topological order during renders.
      // For example, if plugin B depends on plugin A, the tree should be:
      // <AProvider>
      //   <BProvider>{root}</BProvider>
      // </APRovider>
      // In this case, B provider can depend on the context of A provider.
      for (var i = app.renderSetup.length - 1; i >= 0; i--) {
        const wrapper = app.renderSetup[i];
        const result = wrapper(ctx.element);
        if (result !== void 0) {
          ctx.element = result;
        }
      }
      app.renderSetupCtx = void 0;
      app._clearRef();
      const timer = timing.from(ctx);
      timer.downstream.resolve(now() - timer.start);
      let renderTime = null;
      if (ctx.element && !ctx.body && ctx.respond !== false) {
        app._setRef();
        app.renderCtx = ctx;
        const renderStart = now();
        ctx.rendered = await render(ctx.element, ctx);
        // @ts-ignore (Remove once references are used)
        renderTime = now() - renderStart;
        app.renderCtx = void 0;
        app._clearRef();
      }

      // For non-streaming, run post prepare effects here
      // For streaming they are run on prepare boundary drop
      if (ssrDecider(ctx) === true) {
        app._setRef();
        app.postPrepareEffectCtx = ctx;
        for (const effect of ctx.postPrepareEffects) {
          effect();
        }
        app.postPrepareEffectCtx = void 0;
        app._clearRef();
      }
      timer.upstreamStart = now();
      await next();
      if (ctx.element && typeof renderTime === 'number') {
        timer.render.resolve(renderTime);
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJub3ciLCJjcmVhdGVTZXJ2ZXJSZW5kZXJQbHVnaW4iLCJhcHAiLCJzZXJ2ZXJSZW5kZXJQbHVnaW4iLCJyZW5kZXIiLCJ0aW1pbmciLCJzc3JEZWNpZGVyIiwicmVuZGVyZXIiLCJjdHgiLCJuZXh0IiwiX3NldFJlZiIsInJlbmRlclNldHVwQ3R4IiwiaSIsInJlbmRlclNldHVwIiwibGVuZ3RoIiwid3JhcHBlciIsInJlc3VsdCIsImVsZW1lbnQiLCJfY2xlYXJSZWYiLCJ0aW1lciIsImZyb20iLCJkb3duc3RyZWFtIiwicmVzb2x2ZSIsInN0YXJ0IiwicmVuZGVyVGltZSIsImJvZHkiLCJyZXNwb25kIiwicmVuZGVyQ3R4IiwicmVuZGVyU3RhcnQiLCJyZW5kZXJlZCIsInBvc3RQcmVwYXJlRWZmZWN0Q3R4IiwiZWZmZWN0IiwicG9zdFByZXBhcmVFZmZlY3RzIiwidXBzdHJlYW1TdGFydCJdLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3NlcnZlci1yZW5kZXJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7bm93fSBmcm9tICcuLi91dGlscy9ub3cnO1xuaW1wb3J0IHR5cGUge1xuICBDb250ZXh0LFxuICBSZW5kZXJUeXBlLFxuICBTU1JEZWNpZGVyIGFzIFNTUkRlY2lkZXJTZXJ2aWNlLFxuICBUaW1pbmdQbHVnaW4sXG59IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2VydmVyUmVuZGVyUGx1Z2luKGFwcCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VydmVyUmVuZGVyUGx1Z2luKHtcbiAgICByZW5kZXIsXG4gICAgdGltaW5nLFxuICAgIHNzckRlY2lkZXIsXG4gIH06IHtcbiAgICByZW5kZXI6IFJlbmRlclR5cGU7XG4gICAgdGltaW5nOiBUaW1pbmdQbHVnaW47XG4gICAgc3NyRGVjaWRlcjogU1NSRGVjaWRlclNlcnZpY2U7XG4gIH0pIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gcmVuZGVyZXIoY3R4OiBDb250ZXh0LCBuZXh0OiAoKSA9PiBQcm9taXNlPHZvaWQ+KSB7XG4gICAgICBhcHAuX3NldFJlZigpO1xuICAgICAgYXBwLnJlbmRlclNldHVwQ3R4ID0gY3R4O1xuICAgICAgLy8gRWxlbWVudCB3cmFwcGVycyBzaG91bGQgYmUgYWRkZWQgaW4gKnJldmVyc2UqIHRvcG9sb2dpY2FsIG9yZGVyIHNvIHRoYXRcbiAgICAgIC8vIHRoZSByZXN1bHRpbmcgZWxlbWVudCB0cmVlIGlzIGluIHRvcG9sb2dpY2FsIG9yZGVyIGR1cmluZyByZW5kZXJzLlxuICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHBsdWdpbiBCIGRlcGVuZHMgb24gcGx1Z2luIEEsIHRoZSB0cmVlIHNob3VsZCBiZTpcbiAgICAgIC8vIDxBUHJvdmlkZXI+XG4gICAgICAvLyAgIDxCUHJvdmlkZXI+e3Jvb3R9PC9CUHJvdmlkZXI+XG4gICAgICAvLyA8L0FQUm92aWRlcj5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgQiBwcm92aWRlciBjYW4gZGVwZW5kIG9uIHRoZSBjb250ZXh0IG9mIEEgcHJvdmlkZXIuXG4gICAgICBmb3IgKHZhciBpID0gYXBwLnJlbmRlclNldHVwLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBhcHAucmVuZGVyU2V0dXBbaV07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHdyYXBwZXIoY3R4LmVsZW1lbnQpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBjdHguZWxlbWVudCA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwLnJlbmRlclNldHVwQ3R4ID0gdm9pZCAwO1xuICAgICAgYXBwLl9jbGVhclJlZigpO1xuXG4gICAgICBjb25zdCB0aW1lciA9IHRpbWluZy5mcm9tKGN0eCk7XG4gICAgICB0aW1lci5kb3duc3RyZWFtLnJlc29sdmUobm93KCkgLSB0aW1lci5zdGFydCk7XG5cbiAgICAgIGxldCByZW5kZXJUaW1lID0gbnVsbDtcbiAgICAgIGlmIChjdHguZWxlbWVudCAmJiAhY3R4LmJvZHkgJiYgY3R4LnJlc3BvbmQgIT09IGZhbHNlKSB7XG4gICAgICAgIGFwcC5fc2V0UmVmKCk7XG4gICAgICAgIGFwcC5yZW5kZXJDdHggPSBjdHg7XG4gICAgICAgIGNvbnN0IHJlbmRlclN0YXJ0ID0gbm93KCk7XG4gICAgICAgIGN0eC5yZW5kZXJlZCA9IGF3YWl0IHJlbmRlcihjdHguZWxlbWVudCwgY3R4KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAoUmVtb3ZlIG9uY2UgcmVmZXJlbmNlcyBhcmUgdXNlZClcbiAgICAgICAgcmVuZGVyVGltZSA9IG5vdygpIC0gcmVuZGVyU3RhcnQ7XG4gICAgICAgIGFwcC5yZW5kZXJDdHggPSB2b2lkIDA7XG4gICAgICAgIGFwcC5fY2xlYXJSZWYoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIG5vbi1zdHJlYW1pbmcsIHJ1biBwb3N0IHByZXBhcmUgZWZmZWN0cyBoZXJlXG4gICAgICAvLyBGb3Igc3RyZWFtaW5nIHRoZXkgYXJlIHJ1biBvbiBwcmVwYXJlIGJvdW5kYXJ5IGRyb3BcbiAgICAgIGlmIChzc3JEZWNpZGVyKGN0eCkgPT09IHRydWUpIHtcbiAgICAgICAgYXBwLl9zZXRSZWYoKTtcbiAgICAgICAgYXBwLnBvc3RQcmVwYXJlRWZmZWN0Q3R4ID0gY3R4O1xuICAgICAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBjdHgucG9zdFByZXBhcmVFZmZlY3RzKSB7XG4gICAgICAgICAgZWZmZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYXBwLnBvc3RQcmVwYXJlRWZmZWN0Q3R4ID0gdm9pZCAwO1xuICAgICAgICBhcHAuX2NsZWFyUmVmKCk7XG4gICAgICB9XG5cbiAgICAgIHRpbWVyLnVwc3RyZWFtU3RhcnQgPSBub3coKTtcbiAgICAgIGF3YWl0IG5leHQoKTtcblxuICAgICAgaWYgKGN0eC5lbGVtZW50ICYmIHR5cGVvZiByZW5kZXJUaW1lID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aW1lci5yZW5kZXIucmVzb2x2ZShyZW5kZXJUaW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUUEsR0FBRyxRQUFPLGNBQWM7QUFRaEMsZUFBZSxTQUFTQyx3QkFBd0IsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3BELE9BQU8sU0FBU0Msa0JBQWtCLENBQUM7SUFDakNDLE1BQU07SUFDTkMsTUFBTTtJQUNOQztFQUtGLENBQUMsRUFBRTtJQUNELE9BQU8sZUFBZUMsUUFBUSxDQUFDQyxHQUFZLEVBQUVDLElBQXlCLEVBQUU7TUFDdEVQLEdBQUcsQ0FBQ1EsT0FBTyxFQUFFO01BQ2JSLEdBQUcsQ0FBQ1MsY0FBYyxHQUFHSCxHQUFHO01BQ3hCO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0EsS0FBSyxJQUFJSSxDQUFDLEdBQUdWLEdBQUcsQ0FBQ1csV0FBVyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFRixDQUFDLElBQUksQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtRQUNwRCxNQUFNRyxPQUFPLEdBQUdiLEdBQUcsQ0FBQ1csV0FBVyxDQUFDRCxDQUFDLENBQUM7UUFDbEMsTUFBTUksTUFBTSxHQUFHRCxPQUFPLENBQUNQLEdBQUcsQ0FBQ1MsT0FBTyxDQUFDO1FBQ25DLElBQUlELE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRTtVQUNyQlIsR0FBRyxDQUFDUyxPQUFPLEdBQUdELE1BQU07UUFDdEI7TUFDRjtNQUNBZCxHQUFHLENBQUNTLGNBQWMsR0FBRyxLQUFLLENBQUM7TUFDM0JULEdBQUcsQ0FBQ2dCLFNBQVMsRUFBRTtNQUVmLE1BQU1DLEtBQUssR0FBR2QsTUFBTSxDQUFDZSxJQUFJLENBQUNaLEdBQUcsQ0FBQztNQUM5QlcsS0FBSyxDQUFDRSxVQUFVLENBQUNDLE9BQU8sQ0FBQ3RCLEdBQUcsRUFBRSxHQUFHbUIsS0FBSyxDQUFDSSxLQUFLLENBQUM7TUFFN0MsSUFBSUMsVUFBVSxHQUFHLElBQUk7TUFDckIsSUFBSWhCLEdBQUcsQ0FBQ1MsT0FBTyxJQUFJLENBQUNULEdBQUcsQ0FBQ2lCLElBQUksSUFBSWpCLEdBQUcsQ0FBQ2tCLE9BQU8sS0FBSyxLQUFLLEVBQUU7UUFDckR4QixHQUFHLENBQUNRLE9BQU8sRUFBRTtRQUNiUixHQUFHLENBQUN5QixTQUFTLEdBQUduQixHQUFHO1FBQ25CLE1BQU1vQixXQUFXLEdBQUc1QixHQUFHLEVBQUU7UUFDekJRLEdBQUcsQ0FBQ3FCLFFBQVEsR0FBRyxNQUFNekIsTUFBTSxDQUFDSSxHQUFHLENBQUNTLE9BQU8sRUFBRVQsR0FBRyxDQUFDO1FBQzdDO1FBQ0FnQixVQUFVLEdBQUd4QixHQUFHLEVBQUUsR0FBRzRCLFdBQVc7UUFDaEMxQixHQUFHLENBQUN5QixTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCekIsR0FBRyxDQUFDZ0IsU0FBUyxFQUFFO01BQ2pCOztNQUVBO01BQ0E7TUFDQSxJQUFJWixVQUFVLENBQUNFLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUM1Qk4sR0FBRyxDQUFDUSxPQUFPLEVBQUU7UUFDYlIsR0FBRyxDQUFDNEIsb0JBQW9CLEdBQUd0QixHQUFHO1FBQzlCLEtBQUssTUFBTXVCLE1BQU0sSUFBSXZCLEdBQUcsQ0FBQ3dCLGtCQUFrQixFQUFFO1VBQzNDRCxNQUFNLEVBQUU7UUFDVjtRQUNBN0IsR0FBRyxDQUFDNEIsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ2pDNUIsR0FBRyxDQUFDZ0IsU0FBUyxFQUFFO01BQ2pCO01BRUFDLEtBQUssQ0FBQ2MsYUFBYSxHQUFHakMsR0FBRyxFQUFFO01BQzNCLE1BQU1TLElBQUksRUFBRTtNQUVaLElBQUlELEdBQUcsQ0FBQ1MsT0FBTyxJQUFJLE9BQU9PLFVBQVUsS0FBSyxRQUFRLEVBQUU7UUFDakRMLEtBQUssQ0FBQ2YsTUFBTSxDQUFDa0IsT0FBTyxDQUFDRSxVQUFVLENBQUM7TUFDbEM7SUFDRixDQUFDO0VBQ0gsQ0FBQztBQUNIIn0=