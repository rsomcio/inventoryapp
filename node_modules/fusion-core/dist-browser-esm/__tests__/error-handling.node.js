import ClientAppFactory from '../client-app';
import { run } from './test-helper';
import { ErrorHandlerToken } from '../tokens';
const App = true ? ClientAppFactory() : ServerAppFactory();
afterEach(() => {
  jest.clearAllMocks();
});

// in tests we don't invoke koa's error handler as apposed to dev/prod env hence error is picked up by node
// https://github.com/koajs/koa/blob/9d2afef286c9b2a1bc456d70fd1e8136fcf91c83/lib/application.js#L142-L145
test('by default there is no error listner so error is picked up by node', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  const socketErr = new Error('boom');
  app.middleware(ctx => {
    // @ts-expect-error  using undocumented api for the test
    app._app.emit('error', socketErr, ctx);
  });
  await run(app).catch(e => {
    expect(e.code).toBe('ERR_UNHANDLED_ERROR');
  });
});
test('overrides default console error with  a custom function', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  const socketErr = new Error('boom');
  const errorHandler = jest.fn();
  app.register(ErrorHandlerToken, errorHandler);
  app.middleware(ctx => {
    // @ts-expect-error  using undocumented api for the test
    app._app.emit('error', socketErr, ctx);
  });
  await run(app);
  expect(errorHandler).toHaveBeenCalledWith(socketErr, 'request', expect.any(Object));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDbGllbnRBcHBGYWN0b3J5IiwicnVuIiwiRXJyb3JIYW5kbGVyVG9rZW4iLCJBcHAiLCJTZXJ2ZXJBcHBGYWN0b3J5IiwiYWZ0ZXJFYWNoIiwiamVzdCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiZXhwZWN0IiwiYXNzZXJ0aW9ucyIsImVsZW1lbnQiLCJyZW5kZXJGbiIsImVsIiwiYXBwIiwic29ja2V0RXJyIiwiRXJyb3IiLCJtaWRkbGV3YXJlIiwiY3R4IiwiX2FwcCIsImVtaXQiLCJjYXRjaCIsImUiLCJjb2RlIiwidG9CZSIsImVycm9ySGFuZGxlciIsImZuIiwicmVnaXN0ZXIiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImFueSIsIk9iamVjdCJdLCJzb3VyY2VzIjpbInNyYy9fX3Rlc3RzX18vZXJyb3ItaGFuZGxpbmcubm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2xpZW50QXBwRmFjdG9yeSBmcm9tICcuLi9jbGllbnQtYXBwJztcbmltcG9ydCBTZXJ2ZXJBcHBGYWN0b3J5IGZyb20gJy4uL3NlcnZlci1hcHAnO1xuaW1wb3J0IHtydW59IGZyb20gJy4vdGVzdC1oZWxwZXInO1xuaW1wb3J0IHtFcnJvckhhbmRsZXJUb2tlbn0gZnJvbSAnLi4vdG9rZW5zJztcblxuY29uc3QgQXBwID0gX19CUk9XU0VSX18gPyBDbGllbnRBcHBGYWN0b3J5KCkgOiBTZXJ2ZXJBcHBGYWN0b3J5KCk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xufSk7XG5cbi8vIGluIHRlc3RzIHdlIGRvbid0IGludm9rZSBrb2EncyBlcnJvciBoYW5kbGVyIGFzIGFwcG9zZWQgdG8gZGV2L3Byb2QgZW52IGhlbmNlIGVycm9yIGlzIHBpY2tlZCB1cCBieSBub2RlXG4vLyBodHRwczovL2dpdGh1Yi5jb20va29hanMva29hL2Jsb2IvOWQyYWZlZjI4NmM5YjJhMWJjNDU2ZDcwZmQxZTgxMzZmY2Y5MWM4My9saWIvYXBwbGljYXRpb24uanMjTDE0Mi1MMTQ1XG50ZXN0KCdieSBkZWZhdWx0IHRoZXJlIGlzIG5vIGVycm9yIGxpc3RuZXIgc28gZXJyb3IgaXMgcGlja2VkIHVwIGJ5IG5vZGUnLCBhc3luYyAoKSA9PiB7XG4gIGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyRm4gPSAoZWwpID0+IHtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyRm4pO1xuICBjb25zdCBzb2NrZXRFcnIgPSBuZXcgRXJyb3IoJ2Jvb20nKTtcbiAgYXBwLm1pZGRsZXdhcmUoKGN0eCkgPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgIHVzaW5nIHVuZG9jdW1lbnRlZCBhcGkgZm9yIHRoZSB0ZXN0XG4gICAgYXBwLl9hcHAuZW1pdCgnZXJyb3InLCBzb2NrZXRFcnIsIGN0eCk7XG4gIH0pO1xuXG4gIGF3YWl0IHJ1bihhcHApLmNhdGNoKChlKSA9PiB7XG4gICAgZXhwZWN0KGUuY29kZSkudG9CZSgnRVJSX1VOSEFORExFRF9FUlJPUicpO1xuICB9KTtcbn0pO1xuXG50ZXN0KCdvdmVycmlkZXMgZGVmYXVsdCBjb25zb2xlIGVycm9yIHdpdGggIGEgY3VzdG9tIGZ1bmN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICBleHBlY3QuYXNzZXJ0aW9ucygxKTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcbiAgY29uc3Qgc29ja2V0RXJyID0gbmV3IEVycm9yKCdib29tJyk7XG4gIGNvbnN0IGVycm9ySGFuZGxlciA9IGplc3QuZm4oKTtcbiAgYXBwLnJlZ2lzdGVyKEVycm9ySGFuZGxlclRva2VuLCBlcnJvckhhbmRsZXIpO1xuICBhcHAubWlkZGxld2FyZSgoY3R4KSA9PiB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAgdXNpbmcgdW5kb2N1bWVudGVkIGFwaSBmb3IgdGhlIHRlc3RcbiAgICBhcHAuX2FwcC5lbWl0KCdlcnJvcicsIHNvY2tldEVyciwgY3R4KTtcbiAgfSk7XG4gIGF3YWl0IHJ1bihhcHApO1xuICBleHBlY3QoZXJyb3JIYW5kbGVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICBzb2NrZXRFcnIsXG4gICAgJ3JlcXVlc3QnLFxuICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICApO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLGdCQUFnQixNQUFNLGVBQWU7QUFFNUMsU0FBUUMsR0FBRyxRQUFPLGVBQWU7QUFDakMsU0FBUUMsaUJBQWlCLFFBQU8sV0FBVztBQUUzQyxNQUFNQyxHQUFHLEdBQUcsT0FBY0gsZ0JBQWdCLEVBQUUsR0FBR0ksZ0JBQWdCLEVBQUU7QUFFakVDLFNBQVMsQ0FBQyxNQUFNO0VBQ2RDLElBQUksQ0FBQ0MsYUFBYSxFQUFFO0FBQ3RCLENBQUMsQ0FBQzs7QUFFRjtBQUNBO0FBQ0FDLElBQUksQ0FBQyxvRUFBb0UsRUFBRSxZQUFZO0VBQ3JGQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDcEIsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0EsRUFBRTtFQUNYLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUcsSUFBSVgsR0FBRyxDQUFDUSxPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUN0QyxNQUFNRyxTQUFTLEdBQUcsSUFBSUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztFQUNuQ0YsR0FBRyxDQUFDRyxVQUFVLENBQUVDLEdBQUcsSUFBSztJQUN0QjtJQUNBSixHQUFHLENBQUNLLElBQUksQ0FBQ0MsSUFBSSxDQUFDLE9BQU8sRUFBRUwsU0FBUyxFQUFFRyxHQUFHLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0VBRUYsTUFBTWpCLEdBQUcsQ0FBQ2EsR0FBRyxDQUFDLENBQUNPLEtBQUssQ0FBRUMsQ0FBQyxJQUFLO0lBQzFCYixNQUFNLENBQUNhLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztFQUM1QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRmhCLElBQUksQ0FBQyx5REFBeUQsRUFBRSxZQUFZO0VBQzFFQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDcEIsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0EsRUFBRTtFQUNYLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUcsSUFBSVgsR0FBRyxDQUFDUSxPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUN0QyxNQUFNRyxTQUFTLEdBQUcsSUFBSUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztFQUNuQyxNQUFNUyxZQUFZLEdBQUduQixJQUFJLENBQUNvQixFQUFFLEVBQUU7RUFDOUJaLEdBQUcsQ0FBQ2EsUUFBUSxDQUFDekIsaUJBQWlCLEVBQUV1QixZQUFZLENBQUM7RUFDN0NYLEdBQUcsQ0FBQ0csVUFBVSxDQUFFQyxHQUFHLElBQUs7SUFDdEI7SUFDQUosR0FBRyxDQUFDSyxJQUFJLENBQUNDLElBQUksQ0FBQyxPQUFPLEVBQUVMLFNBQVMsRUFBRUcsR0FBRyxDQUFDO0VBQ3hDLENBQUMsQ0FBQztFQUNGLE1BQU1qQixHQUFHLENBQUNhLEdBQUcsQ0FBQztFQUNkTCxNQUFNLENBQUNnQixZQUFZLENBQUMsQ0FBQ0csb0JBQW9CLENBQ3ZDYixTQUFTLEVBQ1QsU0FBUyxFQUNUTixNQUFNLENBQUNvQixHQUFHLENBQUNDLE1BQU0sQ0FBQyxDQUNuQjtBQUNILENBQUMsQ0FBQyJ9