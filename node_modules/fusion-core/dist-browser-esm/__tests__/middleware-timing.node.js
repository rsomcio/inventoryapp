/* eslint-disable jest/valid-expect-in-promise */

import { run } from './test-helper';
import { EnableMiddlewareTimingToken } from '../tokens';
import App, { createPlugin, createToken } from '../index';
test('middleware timing information is present', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  app.middleware((ctx, next) => {
    return next();
  });
  app.register(EnableMiddlewareTimingToken, true);
  const ctx = await run(app);
  ctx.timing.end.then(result => {
    expect(ctx.timing.middleware.length).toBeGreaterThan(0);
  });
});
test('middleware timing information is not present', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  app.middleware((ctx, next) => {
    return next();
  });
  const ctx = await run(app);
  ctx.timing.end.then(result => {
    expect(ctx.timing.middleware.length).toEqual(0);
  });
});
test('Enhancer middleware timing', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  app.register(EnableMiddlewareTimingToken, true);
  const FooToken = createToken('Foo');
  app.register(FooToken, createPlugin({
    middleware: () => (ctx, next) => {
      return next();
    }
  }));
  app.enhance(FooToken, () => createPlugin({
    middleware: () => (ctx, next) => {
      return next();
    }
  }));
  const ctx = await run(app);
  ctx.timing.end.then(result => {
    expect(ctx.timing.middleware.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJydW4iLCJFbmFibGVNaWRkbGV3YXJlVGltaW5nVG9rZW4iLCJBcHAiLCJjcmVhdGVQbHVnaW4iLCJjcmVhdGVUb2tlbiIsInRlc3QiLCJleHBlY3QiLCJhc3NlcnRpb25zIiwiZWxlbWVudCIsInJlbmRlckZuIiwiZWwiLCJhcHAiLCJtaWRkbGV3YXJlIiwiY3R4IiwibmV4dCIsInJlZ2lzdGVyIiwidGltaW5nIiwiZW5kIiwidGhlbiIsInJlc3VsdCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsInRvRXF1YWwiLCJGb29Ub2tlbiIsImVuaGFuY2UiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL21pZGRsZXdhcmUtdGltaW5nLm5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgamVzdC92YWxpZC1leHBlY3QtaW4tcHJvbWlzZSAqL1xuXG5pbXBvcnQge3J1bn0gZnJvbSAnLi90ZXN0LWhlbHBlcic7XG5pbXBvcnQge0VuYWJsZU1pZGRsZXdhcmVUaW1pbmdUb2tlbn0gZnJvbSAnLi4vdG9rZW5zJztcbmltcG9ydCBBcHAsIHtjcmVhdGVQbHVnaW4sIGNyZWF0ZVRva2VufSBmcm9tICcuLi9pbmRleCc7XG5cbnRlc3QoJ21pZGRsZXdhcmUgdGltaW5nIGluZm9ybWF0aW9uIGlzIHByZXNlbnQnLCBhc3luYyAoKSA9PiB7XG4gIGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyRm4gPSAoZWwpID0+IHtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyRm4pO1xuICBhcHAubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfSk7XG4gIGFwcC5yZWdpc3RlcihFbmFibGVNaWRkbGV3YXJlVGltaW5nVG9rZW4sIHRydWUpO1xuXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHApO1xuICBjdHgudGltaW5nLmVuZC50aGVuKChyZXN1bHQpID0+IHtcbiAgICBleHBlY3QoY3R4LnRpbWluZy5taWRkbGV3YXJlLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9KTtcbn0pO1xuXG50ZXN0KCdtaWRkbGV3YXJlIHRpbWluZyBpbmZvcm1hdGlvbiBpcyBub3QgcHJlc2VudCcsIGFzeW5jICgpID0+IHtcbiAgZXhwZWN0LmFzc2VydGlvbnMoMSk7XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXJGbiA9IChlbCkgPT4ge1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChlbGVtZW50LCByZW5kZXJGbik7XG4gIGFwcC5taWRkbGV3YXJlKChjdHgsIG5leHQpID0+IHtcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9KTtcblxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwKTtcbiAgY3R4LnRpbWluZy5lbmQudGhlbigocmVzdWx0KSA9PiB7XG4gICAgZXhwZWN0KGN0eC50aW1pbmcubWlkZGxld2FyZS5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gIH0pO1xufSk7XG5cbnRlc3QoJ0VuaGFuY2VyIG1pZGRsZXdhcmUgdGltaW5nJywgYXN5bmMgKCkgPT4ge1xuICBleHBlY3QuYXNzZXJ0aW9ucygxKTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcbiAgYXBwLnJlZ2lzdGVyKEVuYWJsZU1pZGRsZXdhcmVUaW1pbmdUb2tlbiwgdHJ1ZSk7XG5cbiAgY29uc3QgRm9vVG9rZW4gPSBjcmVhdGVUb2tlbignRm9vJyk7XG4gIGFwcC5yZWdpc3RlcihcbiAgICBGb29Ub2tlbixcbiAgICBjcmVhdGVQbHVnaW4oe1xuICAgICAgbWlkZGxld2FyZTogKCkgPT4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfSxcbiAgICB9KVxuICApO1xuXG4gIGFwcC5lbmhhbmNlKEZvb1Rva2VuLCAoKSA9PlxuICAgIGNyZWF0ZVBsdWdpbih7XG4gICAgICBtaWRkbGV3YXJlOiAoKSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9LFxuICAgIH0pXG4gICk7XG5cbiAgY29uc3QgY3R4ID0gYXdhaXQgcnVuKGFwcCk7XG4gIGN0eC50aW1pbmcuZW5kLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIGV4cGVjdChjdHgudGltaW5nLm1pZGRsZXdhcmUubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVFBLEdBQUcsUUFBTyxlQUFlO0FBQ2pDLFNBQVFDLDJCQUEyQixRQUFPLFdBQVc7QUFDckQsT0FBT0MsR0FBRyxJQUFHQyxZQUFZLEVBQUVDLFdBQVcsUUFBTyxVQUFVO0FBRXZEQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsWUFBWTtFQUMzREMsTUFBTSxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3BCLE1BQU1DLE9BQU8sR0FBRyxJQUFJO0VBQ3BCLE1BQU1DLFFBQVEsR0FBSUMsRUFBRSxJQUFLO0lBQ3ZCLE9BQU9BLEVBQUU7RUFDWCxDQUFDO0VBQ0QsTUFBTUMsR0FBRyxHQUFHLElBQUlULEdBQUcsQ0FBQ00sT0FBTyxFQUFFQyxRQUFRLENBQUM7RUFDdENFLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0lBQzVCLE9BQU9BLElBQUksRUFBRTtFQUNmLENBQUMsQ0FBQztFQUNGSCxHQUFHLENBQUNJLFFBQVEsQ0FBQ2QsMkJBQTJCLEVBQUUsSUFBSSxDQUFDO0VBRS9DLE1BQU1ZLEdBQUcsR0FBRyxNQUFNYixHQUFHLENBQUNXLEdBQUcsQ0FBQztFQUMxQkUs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