/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

export function captureStackTrace(caller) {
  // For monitoring in production, use a single format independent of browser
  if (true && !(process.env.NODE_ENV !== "production")) {
    // @ts-ignore (Remove once references are used)
    return new Error().stack;
  } else {
    if ('captureStackTrace' in Error) {
      const err = {};
      Error.captureStackTrace(err, caller);
      return err.stack;
    } else {
      // @ts-ignore not expected in current js runtime
      return new Error().stack;
    }
  }
}
export class DIError extends Error {
  constructor({
    message,
    errorDoc,
    caller,
    stack
  }) {
    super(message);
    if (errorDoc) {
      this.link = `https://github.com/fusionjs/fusionjs/tree/master/errors/${errorDoc}.md`;
    }
    if (false || process.env.NODE_ENV !== "production") {
      if (caller && 'captureStackTrace' in Error) {
        Error.captureStackTrace(this, caller);
      }
    }
    if (stack) {
      // Replace the DIError stack trace with the supplied stack
      // Assumes `message` contains no new lines
      // @ts-ignore (Remove once references are used)
      const diErrorMessage = this.stack.split('\n')[0];
      const stackOverride = stack.split('\n');
      stackOverride[0] = diErrorMessage;
      this.stack = stackOverride.join('\n');
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYXB0dXJlU3RhY2tUcmFjZSIsImNhbGxlciIsIkVycm9yIiwic3RhY2siLCJlcnIiLCJESUVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiZXJyb3JEb2MiLCJsaW5rIiwiZGlFcnJvck1lc3NhZ2UiLCJzcGxpdCIsInN0YWNrT3ZlcnJpZGUiLCJqb2luIl0sInNvdXJjZXMiOlsic3JjL3N0YWNrLXRyYWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKGNhbGxlcjogRnVuY3Rpb24pOiBzdHJpbmcge1xuICAvLyBGb3IgbW9uaXRvcmluZyBpbiBwcm9kdWN0aW9uLCB1c2UgYSBzaW5nbGUgZm9ybWF0IGluZGVwZW5kZW50IG9mIGJyb3dzZXJcbiAgaWYgKF9fQlJPV1NFUl9fICYmICFfX0RFVl9fKSB7XG4gICAgLy8gQHRzLWlnbm9yZSAoUmVtb3ZlIG9uY2UgcmVmZXJlbmNlcyBhcmUgdXNlZClcbiAgICByZXR1cm4gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCdjYXB0dXJlU3RhY2tUcmFjZScgaW4gRXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycjogYW55ID0ge307XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIGNhbGxlcik7XG4gICAgICByZXR1cm4gZXJyLnN0YWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtaWdub3JlIG5vdCBleHBlY3RlZCBpbiBjdXJyZW50IGpzIHJ1bnRpbWVcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERJRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGxpbms6IHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBtZXNzYWdlLFxuICAgIGVycm9yRG9jLFxuICAgIGNhbGxlcixcbiAgICBzdGFjayxcbiAgfToge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBlcnJvckRvYz86IHN0cmluZztcbiAgICBjYWxsZXI/OiBGdW5jdGlvbjtcbiAgICBzdGFjaz86IHN0cmluZztcbiAgfSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIGlmIChlcnJvckRvYykge1xuICAgICAgdGhpcy5saW5rID0gYGh0dHBzOi8vZ2l0aHViLmNvbS9mdXNpb25qcy9mdXNpb25qcy90cmVlL21hc3Rlci9lcnJvcnMvJHtlcnJvckRvY30ubWRgO1xuICAgIH1cbiAgICBpZiAoX19OT0RFX18gfHwgX19ERVZfXykge1xuICAgICAgaWYgKGNhbGxlciAmJiAnY2FwdHVyZVN0YWNrVHJhY2UnIGluIEVycm9yKSB7XG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGNhbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGFjaykge1xuICAgICAgLy8gUmVwbGFjZSB0aGUgRElFcnJvciBzdGFjayB0cmFjZSB3aXRoIHRoZSBzdXBwbGllZCBzdGFja1xuICAgICAgLy8gQXNzdW1lcyBgbWVzc2FnZWAgY29udGFpbnMgbm8gbmV3IGxpbmVzXG4gICAgICAvLyBAdHMtaWdub3JlIChSZW1vdmUgb25jZSByZWZlcmVuY2VzIGFyZSB1c2VkKVxuICAgICAgY29uc3QgZGlFcnJvck1lc3NhZ2UgPSB0aGlzLnN0YWNrLnNwbGl0KCdcXG4nKVswXTtcbiAgICAgIGNvbnN0IHN0YWNrT3ZlcnJpZGUgPSBzdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICBzdGFja092ZXJyaWRlWzBdID0gZGlFcnJvck1lc3NhZ2U7XG4gICAgICB0aGlzLnN0YWNrID0gc3RhY2tPdmVycmlkZS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sU0FBU0EsaUJBQWlCLENBQUNDLE1BQWdCLEVBQVU7RUFDMUQ7RUFDQSxJQUFJLFFBQWUsd0NBQVEsRUFBRTtJQUMzQjtJQUNBLE9BQU8sSUFBSUMsS0FBSyxFQUFFLENBQUNDLEtBQUs7RUFDMUIsQ0FBQyxNQUFNO0lBQ0wsSUFBSSxtQkFBbUIsSUFBSUQsS0FBSyxFQUFFO01BQ2hDLE1BQU1FLEdBQVEsR0FBRyxDQUFDLENBQUM7TUFDbkJGLEtBQUssQ0FBQ0YsaUJBQWlCLENBQUNJLEdBQUcsRUFBRUgsTUFBTSxDQUFDO01BQ3BDLE9BQU9HLEdBQUcsQ0FBQ0QsS0FBSztJQUNsQixDQUFDLE1BQU07TUFDTDtNQUNBLE9BQU8sSUFBSUQsS0FBSyxFQUFFLENBQUNDLEtBQUs7SUFDMUI7RUFDRjtBQUNGO0FBRUEsT0FBTyxNQUFNRSxPQUFPLFNBQVNILEtBQUssQ0FBQztFQUVqQ0ksV0FBVyxDQUFDO0lBQ1ZDLE9BQU87SUFDUEMsUUFBUTtJQUNSUCxNQUFNO0lBQ05FO0VBTUYsQ0FBQyxFQUFFO0lBQ0QsS0FBSyxDQUFDSSxPQUFPLENBQUM7SUFDZCxJQUFJQyxRQUFRLEVBQUU7TUFDWixJQUFJLENBQUNDLElBQUksR0FBSSwyREFBMERELFFBQVMsS0FBSTtJQUN0RjtJQUNBLElBQUksOENBQW1CLEVBQUU7TUFDdkIsSUFBSVAsTUFBTSxJQUFJLG1CQUFtQixJQUFJQyxLQUFLLEVBQUU7UUFDMUNBLEtBQUssQ0FBQ0YsaUJBQWlCLENBQUMsSUFBSSxFQUFFQyxNQUFNLENBQUM7TUFDdkM7SUFDRjtJQUNBLElBQUlFLEtBQUssRUFBRTtNQUNUO01BQ0E7TUFDQTtNQUNBLE1BQU1PLGNBQWMsR0FBRyxJQUFJLENBQUNQLEtBQUssQ0FBQ1EsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNoRCxNQUFNQyxhQUFhLEdBQUdULEtBQUssQ0FBQ1EsS0FBSyxDQUFDLElBQUksQ0FBQztNQUN2Q0MsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHRixjQUFjO01BQ2pDLElBQUksQ0FBQ1AsS0FBSyxHQUFHUyxhQUFhLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkM7RUFDRjtBQUNGIn0=