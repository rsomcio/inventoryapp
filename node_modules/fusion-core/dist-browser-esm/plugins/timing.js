/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { createPlugin } from '../create-plugin';
import { memoize } from '../memoize';
import { createToken } from '../create-token';
import { now } from '../utils/now';
class Timing {
  constructor() {
    this.start = now();
    this.render = deferred();
    this.end = deferred();
    this.downstream = deferred();
    this.upstream = deferred();
    this.upstreamStart = -1;
    this.middleware = [];
    this.prepass = [];
    this.prepassMarked = false;
    this.prepassStart = -1;
  }
  markPrepass(pendingSize) {
    if (!this.prepassMarked) {
      this.prepassMarked = true;
      this.prepassStart = now();
    } else {
      this.prepass.push({
        duration: now() - this.prepassStart,
        pendingSize: pendingSize || 0
      });
      this.prepassMarked = false;
      this.prepassStart = -1;
    }
  }
}
const timing = {
  from: memoize(() => new Timing())
};
export const TimingToken = createToken('TimingToken');
function middleware(ctx, next) {
  ctx.memoized = new Map();
  const {
    start,
    render,
    end,
    downstream,
    upstream,
    middleware,
    prepass,
    markPrepass
  } = timing.from(ctx);
  ctx.timing = {
    start,
    render: render.promise,
    end: end.promise,
    downstream: downstream.promise,
    upstream: upstream.promise,
    middleware,
    prepass,
    markPrepass
  };
  return next().then(() => {
    const upstreamTime = now() - timing.from(ctx).upstreamStart;
    upstream.resolve(upstreamTime);
    const endTime = now() - ctx.timing.start;
    end.resolve(endTime);
  }).catch(e => {
    // currently we only resolve upstream and downstream when the request does not error
    // we should however always resolve the request end timing
    if (e && e.status) {
      // this ensures any logging / metrics based on ctx.status will recieve the correct status code
      ctx.status = e.status;
    }
    const endTime = now() - ctx.timing.start;
    end.resolve(endTime);
    throw e;
  });
}
export default createPlugin({
  provides: () => timing,
  middleware: () => middleware
});
function deferred() {
  let resolve = result => {};
  let reject = () => {};
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVQbHVnaW4iLCJtZW1vaXplIiwiY3JlYXRlVG9rZW4iLCJub3ciLCJUaW1pbmciLCJjb25zdHJ1Y3RvciIsInN0YXJ0IiwicmVuZGVyIiwiZGVmZXJyZWQiLCJlbmQiLCJkb3duc3RyZWFtIiwidXBzdHJlYW0iLCJ1cHN0cmVhbVN0YXJ0IiwibWlkZGxld2FyZSIsInByZXBhc3MiLCJwcmVwYXNzTWFya2VkIiwicHJlcGFzc1N0YXJ0IiwibWFya1ByZXBhc3MiLCJwZW5kaW5nU2l6ZSIsInB1c2giLCJkdXJhdGlvbiIsInRpbWluZyIsImZyb20iLCJUaW1pbmdUb2tlbiIsImN0eCIsIm5leHQiLCJtZW1vaXplZCIsIk1hcCIsInByb21pc2UiLCJ0aGVuIiwidXBzdHJlYW1UaW1lIiwicmVzb2x2ZSIsImVuZFRpbWUiLCJjYXRjaCIsImUiLCJzdGF0dXMiLCJwcm92aWRlcyIsInJlc3VsdCIsInJlamVjdCIsIlByb21pc2UiLCJyZXMiLCJyZWoiXSwic291cmNlcyI6WyJzcmMvcGx1Z2lucy90aW1pbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuaW1wb3J0IHtjcmVhdGVQbHVnaW59IGZyb20gJy4uL2NyZWF0ZS1wbHVnaW4nO1xuaW1wb3J0IHttZW1vaXplfSBmcm9tICcuLi9tZW1vaXplJztcbmltcG9ydCB7Y3JlYXRlVG9rZW59IGZyb20gJy4uL2NyZWF0ZS10b2tlbic7XG5pbXBvcnQge25vd30gZnJvbSAnLi4vdXRpbHMvbm93JztcbmltcG9ydCB0eXBlIHtcbiAgRGVmZXJyZWQsXG4gIE1pZGRsZXdhcmVUaW1pbmcsXG4gIFByZXBhc3NUaW1pbmcsXG4gIFRpbWluZ0ludGVyZmFjZSxcbiAgVGltaW5nUGx1Z2luLFxuICBUb2tlbixcbn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jbGFzcyBUaW1pbmcgaW1wbGVtZW50cyBUaW1pbmdJbnRlcmZhY2Uge1xuICBzdGFydDogbnVtYmVyO1xuICByZW5kZXI6IERlZmVycmVkPG51bWJlcj47XG4gIGVuZDogRGVmZXJyZWQ8bnVtYmVyPjtcbiAgZG93bnN0cmVhbTogRGVmZXJyZWQ8bnVtYmVyPjtcbiAgdXBzdHJlYW06IERlZmVycmVkPG51bWJlcj47XG4gIHVwc3RyZWFtU3RhcnQ6IG51bWJlcjtcbiAgbWlkZGxld2FyZTogQXJyYXk8TWlkZGxld2FyZVRpbWluZz47XG4gIHByZXBhc3M6IEFycmF5PFByZXBhc3NUaW1pbmc+O1xuICBwcmVwYXNzTWFya2VkOiBib29sZWFuO1xuICBwcmVwYXNzU3RhcnQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXJ0ID0gbm93KCk7XG4gICAgdGhpcy5yZW5kZXIgPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMuZW5kID0gZGVmZXJyZWQoKTtcbiAgICB0aGlzLmRvd25zdHJlYW0gPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMudXBzdHJlYW0gPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMudXBzdHJlYW1TdGFydCA9IC0xO1xuICAgIHRoaXMubWlkZGxld2FyZSA9IFtdO1xuICAgIHRoaXMucHJlcGFzcyA9IFtdO1xuICAgIHRoaXMucHJlcGFzc01hcmtlZCA9IGZhbHNlO1xuICAgIHRoaXMucHJlcGFzc1N0YXJ0ID0gLTE7XG4gIH1cblxuICBtYXJrUHJlcGFzcyhwZW5kaW5nU2l6ZT86IG51bWJlcikge1xuICAgIGlmICghdGhpcy5wcmVwYXNzTWFya2VkKSB7XG4gICAgICB0aGlzLnByZXBhc3NNYXJrZWQgPSB0cnVlO1xuICAgICAgdGhpcy5wcmVwYXNzU3RhcnQgPSBub3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmVwYXNzLnB1c2goe1xuICAgICAgICBkdXJhdGlvbjogbm93KCkgLSB0aGlzLnByZXBhc3NTdGFydCxcbiAgICAgICAgcGVuZGluZ1NpemU6IHBlbmRpbmdTaXplIHx8IDAsXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJlcGFzc01hcmtlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wcmVwYXNzU3RhcnQgPSAtMTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgdGltaW5nOiBUaW1pbmdQbHVnaW4gPSB7XG4gIGZyb206IG1lbW9pemUoKCkgPT4gbmV3IFRpbWluZygpKSxcbn07XG5cbmV4cG9ydCBjb25zdCBUaW1pbmdUb2tlbjogVG9rZW48VGltaW5nUGx1Z2luPiA9IGNyZWF0ZVRva2VuKCdUaW1pbmdUb2tlbicpO1xuXG5mdW5jdGlvbiBtaWRkbGV3YXJlKGN0eCwgbmV4dCkge1xuICBjdHgubWVtb2l6ZWQgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHtcbiAgICBzdGFydCxcbiAgICByZW5kZXIsXG4gICAgZW5kLFxuICAgIGRvd25zdHJlYW0sXG4gICAgdXBzdHJlYW0sXG4gICAgbWlkZGxld2FyZSxcbiAgICBwcmVwYXNzLFxuICAgIG1hcmtQcmVwYXNzLFxuICB9ID0gdGltaW5nLmZyb20oY3R4KTtcbiAgY3R4LnRpbWluZyA9IHtcbiAgICBzdGFydCxcbiAgICByZW5kZXI6IHJlbmRlci5wcm9taXNlLFxuICAgIGVuZDogZW5kLnByb21pc2UsXG4gICAgZG93bnN0cmVhbTogZG93bnN0cmVhbS5wcm9taXNlLFxuICAgIHVwc3RyZWFtOiB1cHN0cmVhbS5wcm9taXNlLFxuICAgIG1pZGRsZXdhcmUsXG4gICAgcHJlcGFzcyxcbiAgICBtYXJrUHJlcGFzcyxcbiAgfTtcbiAgcmV0dXJuIG5leHQoKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IHVwc3RyZWFtVGltZSA9IG5vdygpIC0gdGltaW5nLmZyb20oY3R4KS51cHN0cmVhbVN0YXJ0O1xuICAgICAgdXBzdHJlYW0ucmVzb2x2ZSh1cHN0cmVhbVRpbWUpO1xuICAgICAgY29uc3QgZW5kVGltZSA9IG5vdygpIC0gY3R4LnRpbWluZy5zdGFydDtcbiAgICAgIGVuZC5yZXNvbHZlKGVuZFRpbWUpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAvLyBjdXJyZW50bHkgd2Ugb25seSByZXNvbHZlIHVwc3RyZWFtIGFuZCBkb3duc3RyZWFtIHdoZW4gdGhlIHJlcXVlc3QgZG9lcyBub3QgZXJyb3JcbiAgICAgIC8vIHdlIHNob3VsZCBob3dldmVyIGFsd2F5cyByZXNvbHZlIHRoZSByZXF1ZXN0IGVuZCB0aW1pbmdcbiAgICAgIGlmIChlICYmIGUuc3RhdHVzKSB7XG4gICAgICAgIC8vIHRoaXMgZW5zdXJlcyBhbnkgbG9nZ2luZyAvIG1ldHJpY3MgYmFzZWQgb24gY3R4LnN0YXR1cyB3aWxsIHJlY2lldmUgdGhlIGNvcnJlY3Qgc3RhdHVzIGNvZGVcbiAgICAgICAgY3R4LnN0YXR1cyA9IGUuc3RhdHVzO1xuICAgICAgfVxuICAgICAgY29uc3QgZW5kVGltZSA9IG5vdygpIC0gY3R4LnRpbWluZy5zdGFydDtcbiAgICAgIGVuZC5yZXNvbHZlKGVuZFRpbWUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUGx1Z2luPHt9LCB0eXBlb2YgdGltaW5nPih7XG4gIHByb3ZpZGVzOiAoKSA9PiB0aW1pbmcsXG4gIG1pZGRsZXdhcmU6ICgpID0+IG1pZGRsZXdhcmUsXG59KTtcblxuZnVuY3Rpb24gZGVmZXJyZWQ8VD4oKTogRGVmZXJyZWQ8VD4ge1xuICBsZXQgcmVzb2x2ZSA9IChyZXN1bHQ6IFQpID0+IHt9O1xuICBsZXQgcmVqZWN0ID0gKCkgPT4ge307XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxUPigocmVzLCByZWopID0+IHtcbiAgICByZXNvbHZlID0gcmVzO1xuICAgIHJlamVjdCA9IHJlajtcbiAgfSk7XG4gIHJldHVybiB7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