"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _compose = require("./compose");
var _timing = _interopRequireWildcard(require("./plugins/timing"));
var _baseApp = _interopRequireDefault(require("./base-app"));
var _serverRenderer = _interopRequireDefault(require("./plugins/server-renderer"));
var _tokens = require("./tokens");
var _ssr = _interopRequireDefault(require("./plugins/ssr"));
var _serverContext = _interopRequireDefault(require("./plugins/server-context"));
var _appSymbol = require("./utils/app-symbol");
var _types = require("./types");
var _createPlugin = require("./create-plugin");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
/* eslint-env node */

function _default() {
  const Koa = require('koa');
  return class ServerApp extends _baseApp.default {
    constructor(el, render) {
      super(el, render);
      this.endpoints = new Map();
      this._app = new Koa();
      this._app.proxy = true;
      this.middleware(_serverContext.default);
      this.middleware((ctx, next) => {
        // @ts-expect-error todo(flow->ts) why we need to use symbol for this? why not regular property?
        ctx[_appSymbol.appSymbol] = this;
        return next();
      });
      this.register(_timing.TimingToken, _timing.default);
      this.middleware((ctx, next) => {
        for (const [endpointPath, handler] of this.endpoints) {
          if (ctx.path === endpointPath) {
            return handler(ctx, next);
          }
        }
        return next();
      });
      this.middleware({
        element: _tokens.ElementToken,
        ssrDecider: _tokens.SSRDeciderToken,
        ssrBodyTemplate: _tokens.SSRBodyTemplateToken.optional,
        ssrShellTemplate: _tokens.SSRShellTemplateToken.optional
      }, (0, _ssr.default)(this.endpoints));
      this.register((0, _createPlugin.createPlugin)({
        deps: {
          errorHandler: _tokens.ErrorHandlerToken.optional
        },
        provides: ({
          errorHandler
        }) => {
          if (!errorHandler) {
            return;
          }
          this._app.on('error', (err, ctx) => {
            errorHandler(err, 'request', ctx);
          });
        }
      }));
    }
    resolve() {
      this.middleware({
        timing: _timing.TimingToken,
        render: _tokens.RenderToken,
        ssrDecider: _tokens.SSRDeciderToken
      }, (0, _serverRenderer.default)(this));
      return super.resolve();
    }
    callback() {
      this.resolve();
      this._app.use((0, _compose.compose)(this.plugins));
      return this._app.callback();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJLb2EiLCJyZXF1aXJlIiwiU2VydmVyQXBwIiwiQmFzZUFwcCIsImNvbnN0cnVjdG9yIiwiZWwiLCJyZW5kZXIiLCJlbmRwb2ludHMiLCJNYXAiLCJfYXBwIiwicHJveHkiLCJtaWRkbGV3YXJlIiwiY29udGV4dE1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiYXBwU3ltYm9sIiwicmVnaXN0ZXIiLCJUaW1pbmdUb2tlbiIsIlRpbWluZyIsImVuZHBvaW50UGF0aCIsImhhbmRsZXIiLCJwYXRoIiwiZWxlbWVudCIsIkVsZW1lbnRUb2tlbiIsInNzckRlY2lkZXIiLCJTU1JEZWNpZGVyVG9rZW4iLCJzc3JCb2R5VGVtcGxhdGUiLCJTU1JCb2R5VGVtcGxhdGVUb2tlbiIsIm9wdGlvbmFsIiwic3NyU2hlbGxUZW1wbGF0ZSIsIlNTUlNoZWxsVGVtcGxhdGVUb2tlbiIsInNzclBsdWdpbiIsImNyZWF0ZVBsdWdpbiIsImRlcHMiLCJlcnJvckhhbmRsZXIiLCJFcnJvckhhbmRsZXJUb2tlbiIsInByb3ZpZGVzIiwib24iLCJlcnIiLCJyZXNvbHZlIiwidGltaW5nIiwiUmVuZGVyVG9rZW4iLCJzZXJ2ZXJSZW5kZXJlciIsImNhbGxiYWNrIiwidXNlIiwiY29tcG9zZSIsInBsdWdpbnMiXSwic291cmNlcyI6WyJzcmMvc2VydmVyLWFwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbmltcG9ydCB7Y29tcG9zZX0gZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCBUaW1pbmcsIHtUaW1pbmdUb2tlbn0gZnJvbSAnLi9wbHVnaW5zL3RpbWluZyc7XG5pbXBvcnQgQmFzZUFwcCBmcm9tICcuL2Jhc2UtYXBwJztcbmltcG9ydCBzZXJ2ZXJSZW5kZXJlciBmcm9tICcuL3BsdWdpbnMvc2VydmVyLXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIFJlbmRlclRva2VuLFxuICBFbGVtZW50VG9rZW4sXG4gIFNTUkRlY2lkZXJUb2tlbixcbiAgU1NSQm9keVRlbXBsYXRlVG9rZW4sXG4gIFNTUlNoZWxsVGVtcGxhdGVUb2tlbixcbiAgRXJyb3JIYW5kbGVyVG9rZW4sXG59IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCBzc3JQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL3Nzcic7XG5pbXBvcnQgY29udGV4dE1pZGRsZXdhcmUgZnJvbSAnLi9wbHVnaW5zL3NlcnZlci1jb250ZXh0JztcbmltcG9ydCB7YXBwU3ltYm9sfSBmcm9tICcuL3V0aWxzL2FwcC1zeW1ib2wnO1xuaW1wb3J0IHtNaWRkbGV3YXJlfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7Y3JlYXRlUGx1Z2lufSBmcm9tICcuL2NyZWF0ZS1wbHVnaW4nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IEtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuXG4gIHJldHVybiBjbGFzcyBTZXJ2ZXJBcHAgZXh0ZW5kcyBCYXNlQXBwIHtcbiAgICBfYXBwOiBpbXBvcnQoJ2tvYScpO1xuICAgIGVuZHBvaW50czogTWFwPHN0cmluZywgTWlkZGxld2FyZT47XG4gICAgY29uc3RydWN0b3IoZWw6IGFueSwgcmVuZGVyOiBhbnkpIHtcbiAgICAgIHN1cGVyKGVsLCByZW5kZXIpO1xuICAgICAgdGhpcy5lbmRwb2ludHMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLl9hcHAgPSBuZXcgS29hKCk7XG4gICAgICB0aGlzLl9hcHAucHJveHkgPSB0cnVlO1xuICAgICAgdGhpcy5taWRkbGV3YXJlKGNvbnRleHRNaWRkbGV3YXJlKTtcbiAgICAgIHRoaXMubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdG9kbyhmbG93LT50cykgd2h5IHdlIG5lZWQgdG8gdXNlIHN5bWJvbCBmb3IgdGhpcz8gd2h5IG5vdCByZWd1bGFyIHByb3BlcnR5P1xuICAgICAgICBjdHhbYXBwU3ltYm9sXSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVnaXN0ZXIoVGltaW5nVG9rZW4sIFRpbWluZyk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtlbmRwb2ludFBhdGgsIGhhbmRsZXJdIG9mIHRoaXMuZW5kcG9pbnRzKSB7XG4gICAgICAgICAgaWYgKGN0eC5wYXRoID09PSBlbmRwb2ludFBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKGN0eCwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWlkZGxld2FyZShcbiAgICAgICAge1xuICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRUb2tlbixcbiAgICAgICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgICAgICAgc3NyQm9keVRlbXBsYXRlOiBTU1JCb2R5VGVtcGxhdGVUb2tlbi5vcHRpb25hbCxcbiAgICAgICAgICBzc3JTaGVsbFRlbXBsYXRlOiBTU1JTaGVsbFRlbXBsYXRlVG9rZW4ub3B0aW9uYWwsXG4gICAgICAgIH0sXG4gICAgICAgIHNzclBsdWdpbih0aGlzLmVuZHBvaW50cylcbiAgICAgICk7XG4gICAgICB0aGlzLnJlZ2lzdGVyKFxuICAgICAgICBjcmVhdGVQbHVnaW4oe1xuICAgICAgICAgIGRlcHM6IHtlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclRva2VuLm9wdGlvbmFsfSxcbiAgICAgICAgICBwcm92aWRlczogKHtlcnJvckhhbmRsZXJ9KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHAub24oJ2Vycm9yJywgKGVyciwgY3R4KSA9PiB7XG4gICAgICAgICAgICAgIGVycm9ySGFuZGxlcihlcnIsICdyZXF1ZXN0JywgY3R4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXNvbHZlKCkge1xuICAgICAgdGhpcy5taWRkbGV3YXJlKFxuICAgICAgICB7XG4gICAgICAgICAgdGltaW5nOiBUaW1pbmdUb2tlbixcbiAgICAgICAgICByZW5kZXI6IFJlbmRlclRva2VuLFxuICAgICAgICAgIHNzckRlY2lkZXI6IFNTUkRlY2lkZXJUb2tlbixcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmVyUmVuZGVyZXIodGhpcylcbiAgICAgICk7XG4gICAgICByZXR1cm4gc3VwZXIucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBjYWxsYmFjaygpIHtcbiAgICAgIHRoaXMucmVzb2x2ZSgpO1xuICAgICAgdGhpcy5fYXBwLnVzZShjb21wb3NlKHRoaXMucGx1Z2lucykpO1xuICAgICAgcmV0dXJuIHRoaXMuX2FwcC5jYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBNkM7QUFBQTtBQUFBO0FBdkI3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFtQmUsb0JBQVk7RUFDekIsTUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsS0FBSyxDQUFDO0VBRTFCLE9BQU8sTUFBTUMsU0FBUyxTQUFTQyxnQkFBTyxDQUFDO0lBR3JDQyxXQUFXLENBQUNDLEVBQU8sRUFBRUMsTUFBVyxF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