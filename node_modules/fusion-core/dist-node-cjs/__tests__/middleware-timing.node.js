"use strict";

var _testHelper = require("./test-helper");
var _tokens = require("../tokens");
var _index = _interopRequireWildcard(require("../index"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable jest/valid-expect-in-promise */

test('middleware timing information is present', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  app.middleware((ctx, next) => {
    return next();
  });
  app.register(_tokens.EnableMiddlewareTimingToken, true);
  const ctx = await (0, _testHelper.run)(app);
  ctx.timing.end.then(result => {
    expect(ctx.timing.middleware.length).toBeGreaterThan(0);
  });
});
test('middleware timing information is not present', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  app.middleware((ctx, next) => {
    return next();
  });
  const ctx = await (0, _testHelper.run)(app);
  ctx.timing.end.then(result => {
    expect(ctx.timing.middleware.length).toEqual(0);
  });
});
test('Enhancer middleware timing', async () => {
  expect.assertions(1);
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  app.register(_tokens.EnableMiddlewareTimingToken, true);
  const FooToken = (0, _index.createToken)('Foo');
  app.register(FooToken, (0, _index.createPlugin)({
    middleware: () => (ctx, next) => {
      return next();
    }
  }));
  app.enhance(FooToken, () => (0, _index.createPlugin)({
    middleware: () => (ctx, next) => {
      return next();
    }
  }));
  const ctx = await (0, _testHelper.run)(app);
  ctx.timing.end.then(result => {
    expect(ctx.timing.middleware.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZXhwZWN0IiwiYXNzZXJ0aW9ucyIsImVsZW1lbnQiLCJyZW5kZXJGbiIsImVsIiwiYXBwIiwiQXBwIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJyZWdpc3RlciIsIkVuYWJsZU1pZGRsZXdhcmVUaW1pbmdUb2tlbiIsInJ1biIsInRpbWluZyIsImVuZCIsInRoZW4iLCJyZXN1bHQiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJ0b0VxdWFsIiwiRm9vVG9rZW4iLCJjcmVhdGVUb2tlbiIsImNyZWF0ZVBsdWdpbiIsImVuaGFuY2UiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL21pZGRsZXdhcmUtdGltaW5nLm5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgamVzdC92YWxpZC1leHBlY3QtaW4tcHJvbWlzZSAqL1xuXG5pbXBvcnQge3J1bn0gZnJvbSAnLi90ZXN0LWhlbHBlcic7XG5pbXBvcnQge0VuYWJsZU1pZGRsZXdhcmVUaW1pbmdUb2tlbn0gZnJvbSAnLi4vdG9rZW5zJztcbmltcG9ydCBBcHAsIHtjcmVhdGVQbHVnaW4sIGNyZWF0ZVRva2VufSBmcm9tICcuLi9pbmRleCc7XG5cbnRlc3QoJ21pZGRsZXdhcmUgdGltaW5nIGluZm9ybWF0aW9uIGlzIHByZXNlbnQnLCBhc3luYyAoKSA9PiB7XG4gIGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyRm4gPSAoZWwpID0+IHtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyRm4pO1xuICBhcHAubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfSk7XG4gIGFwcC5yZWdpc3RlcihFbmFibGVNaWRkbGV3YXJlVGltaW5nVG9rZW4sIHRydWUpO1xuXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHApO1xuICBjdHgudGltaW5nLmVuZC50aGVuKChyZXN1bHQpID0+IHtcbiAgICBleHBlY3QoY3R4LnRpbWluZy5taWRkbGV3YXJlLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9KTtcbn0pO1xuXG50ZXN0KCdtaWRkbGV3YXJlIHRpbWluZyBpbmZvcm1hdGlvbiBpcyBub3QgcHJlc2VudCcsIGFzeW5jICgpID0+IHtcbiAgZXhwZWN0LmFzc2VydGlvbnMoMSk7XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXJGbiA9IChlbCkgPT4ge1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChlbGVtZW50LCByZW5kZXJGbik7XG4gIGFwcC5taWRkbGV3YXJlKChjdHgsIG5leHQpID0+IHtcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9KTtcblxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwKTtcbiAgY3R4LnRpbWluZy5lbmQudGhlbigocmVzdWx0KSA9PiB7XG4gICAgZXhwZWN0KGN0eC50aW1pbmcubWlkZGxld2FyZS5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gIH0pO1xufSk7XG5cbnRlc3QoJ0VuaGFuY2VyIG1pZGRsZXdhcmUgdGltaW5nJywgYXN5bmMgKCkgPT4ge1xuICBleHBlY3QuYXNzZXJ0aW9ucygxKTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcbiAgYXBwLnJlZ2lzdGVyKEVuYWJsZU1pZGRsZXdhcmVUaW1pbmdUb2tlbiwgdHJ1ZSk7XG5cbiAgY29uc3QgRm9vVG9rZW4gPSBjcmVhdGVUb2tlbignRm9vJyk7XG4gIGFwcC5yZWdpc3RlcihcbiAgICBGb29Ub2tlbixcbiAgICBjcmVhdGVQbHVnaW4oe1xuICAgICAgbWlkZGxld2FyZTogKCkgPT4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfSxcbiAgICB9KVxuICApO1xuXG4gIGFwcC5lbmhhbmNlKEZvb1Rva2VuLCAoKSA9PlxuICAgIGNyZWF0ZVBsdWdpbih7XG4gICAgICBtaWRkbGV3YXJlOiAoKSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9LFxuICAgIH0pXG4gICk7XG5cbiAgY29uc3QgY3R4ID0gYXdhaXQgcnVuKGFwcCk7XG4gIGN0eC50aW1pbmcuZW5kLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIGV4cGVjdChjdHgudGltaW5nLm1pZGRsZXdhcmUubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBRUE7QUFDQTtBQUNBO0FBQXdEO0FBQUE7QUFKeEQ7O0FBTUFBLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxZQUFZO0VBQzNEQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDcEIsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0EsRUFBRTtFQUNYLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsY0FBRyxDQUFDSixPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUN0Q0UsR0FBRyxDQUFDRSxVQUFVLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7SUFDNUIsT0FBT0EsSUFBSSxFQUFFO0VBQ2YsQ0FBQyxDQUFDO0VBQ0ZKLEdBQUcsQ0FBQ0ssUUFBUSxDQUFDQyxtQ0FBMkIsRUFBRSxJQUFJLENBQUM7RUFFL0MsTUFBTUgsR0FBRyxHQUFHLE1BQU0sSUFBQUksZUFBRyxFQUFDUCxHQUFHLENBQUM7RUFDMUJHLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDQyxHQUFHLENBQUNDLElBQUksQ0FBRUMsTUFBTSxJQUFLO0lBQzlCaEIsTUFBTSxDQUFDUSxHQUFHLENBQUNLLE1BQU0sQ0FBQ04sVUFBVSxDQUFDVSxNQUFNLENBQUMsQ0FBQ0MsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUN6RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRm5CLElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxZQUFZO0VBQy9EQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDcEIsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0EsRUFBRTtFQUNYLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsY0FBRyxDQUFDSixPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUN0Q0UsR0FBRyxDQUFDRSxVQUFVLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7SUFDNUIsT0FBT0EsSUFBSSxFQUFFO0VBQ2YsQ0FBQyxDQUFDO0VBRUYsTUFBTUQsR0FBRyxHQUFHLE1BQU0sSUFBQUksZUFBRyxFQUFDUCxHQUFHLENBQUM7RUFDMUJHLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDQyxHQUFHLENBQUNDLElBQUksQ0FBRUMsTUFBTSxJQUFLO0lBQzlCaEIsTUFBTSxDQUFDUSxHQUFHLENBQUNLLE1BQU0sQ0FBQ04sVUFBVSxDQUFDVSxNQUFNLENBQUMsQ0FBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUNqRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRnBCLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxZQUFZO0VBQzdDQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDcEIsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0EsRUFBRTtFQUNYLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsY0FBRyxDQUFDSixPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUN0Q0UsR0FBRyxDQUFDSyxRQUFRLENBQUNDLG1DQUEyQixFQUFFLElBQUksQ0FBQztFQUUvQyxNQUFNUyxRQUFRLEdBQUcsSUFBQUMsa0JBQVcsRUFBQyxLQUFLLENBQUM7RUFDbkNoQixHQUFHLENBQUNLLFFBQVEsQ0FDVlUsUUFBUSxFQUNSLElBQUFFLG1CQUFZLEVBQUM7SUFDWGYsVUFBVSxFQUFFLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7TUFDL0IsT0FBT0EsSUFBSSxFQUFFO0lBQ2Y7RUFDRixDQUFDLENBQUMsQ0FDSDtFQUVESixHQUFHLENBQUNrQixPQUFPLENBQUNILFFBQVEsRUFBRSxNQUNwQixJQUFBRSxtQkFBWSxFQUFDO0lBQ1hmLFVBQVUsRUFBRSxNQUFNLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO01BQy9CLE9BQU9BLElBQUksRUFBRTtJQUNmO0VBQ0YsQ0FBQyxDQUFDLENBQ0g7RUFFRCxNQUFNRCxHQUFHLEdBQUcsTUFBTSxJQUFBSSxlQUFHLEVBQUNQLEdBQUcsQ0FBQztFQUMxQkcsR0FBRyxDQUFDSyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxDQUFFQyxNQUFNLElBQUs7SUFDOUJoQixNQUFNLENBQUNRLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDTixVQUFVLENBQUNVLE1BQU0sQ0FBQyxDQUFDQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0VBQ3pELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9