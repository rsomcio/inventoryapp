"use strict";

var _serverApp = _interopRequireDefault(require("../server-app"));
var _testHelper = require("./test-helper");
var _timing = require("../plugins/timing");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-disable jest/valid-expect-in-promise */

const App = false ? ClientAppFactory() : (0, _serverApp.default)();
test('timing plugin', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  app.middleware({
    timing: _timing.TimingToken
  }, deps => (ctx, next) => {
    expect(deps.timing.from(ctx)).toBe(deps.timing.from(ctx));
    return next();
  });
  const ctx = await (0, _testHelper.run)(app);
  expect(typeof ctx.timing.start).toBe('number');
  expect(ctx.timing.end instanceof Promise).toBeTruthy();
  ctx.timing.downstream.then(result => {
    expect(typeof result).toBe('number');
  });
  ctx.timing.render.then(result => {
    expect(typeof result).toBe('number');
  });
  ctx.timing.upstream.then(result => {
    expect(typeof result).toBe('number');
  });
  ctx.timing.end.then(result => {
    expect(typeof result).toBe('number');
  });
});
test('timing plugin on error middleware', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new App(element, renderFn);
  let resolved = {
    downstream: false,
    upstream: false,
    render: false
  };
  app.middleware((ctx, next) => {
    ctx.timing.downstream.then(result => {
      resolved.downstream = true;
    });
    ctx.timing.render.then(result => {
      resolved.render = true;
    });
    ctx.timing.upstream.then(result => {
      resolved.upstream = true;
    });
    ctx.timing.end.then(result => {
      expect(typeof result).toBe('number');
      expect(resolved.downstream).toBe(false);
      expect(resolved.render).toBe(false);
      expect(resolved.upstream).toBe(false);
      expect(ctx.status).toBe(500);
    });
    return next();
  });
  app.middleware((ctx, next) => {
    const e = new Error('fail request');
    // @ts-expect-error
    e.status = 500;
    throw e;
  });
  await (0, _testHelper.run)(app).catch(e => {});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcHAiLCJDbGllbnRBcHBGYWN0b3J5IiwiU2VydmVyQXBwRmFjdG9yeSIsInRlc3QiLCJlbGVtZW50IiwicmVuZGVyRm4iLCJlbCIsImFwcCIsIm1pZGRsZXdhcmUiLCJ0aW1pbmciLCJUaW1pbmdUb2tlbiIsImRlcHMiLCJjdHgiLCJuZXh0IiwiZXhwZWN0IiwiZnJvbSIsInRvQmUiLCJydW4iLCJzdGFydCIsImVuZCIsIlByb21pc2UiLCJ0b0JlVHJ1dGh5IiwiZG93bnN0cmVhbSIsInRoZW4iLCJyZXN1bHQiLCJyZW5kZXIiLCJ1cHN0cmVhbSIsInJlc29sdmVkIiwic3RhdHVzIiwiZSIsIkVycm9yIiwiY2F0Y2giXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL3RpbWluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBqZXN0L3ZhbGlkLWV4cGVjdC1pbi1wcm9taXNlICovXG5cbmltcG9ydCBDbGllbnRBcHBGYWN0b3J5IGZyb20gJy4uL2NsaWVudC1hcHAnO1xuaW1wb3J0IFNlcnZlckFwcEZhY3RvcnkgZnJvbSAnLi4vc2VydmVyLWFwcCc7XG5pbXBvcnQge3J1bn0gZnJvbSAnLi90ZXN0LWhlbHBlcic7XG5pbXBvcnQge1RpbWluZ1Rva2VufSBmcm9tICcuLi9wbHVnaW5zL3RpbWluZyc7XG5cbmNvbnN0IEFwcCA9IF9fQlJPV1NFUl9fID8gQ2xpZW50QXBwRmFjdG9yeSgpIDogU2VydmVyQXBwRmFjdG9yeSgpO1xuXG50ZXN0KCd0aW1pbmcgcGx1Z2luJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyRm4gPSAoZWwpID0+IHtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyRm4pO1xuICBhcHAubWlkZGxld2FyZSh7dGltaW5nOiBUaW1pbmdUb2tlbn0sIChkZXBzKSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgZXhwZWN0KGRlcHMudGltaW5nLmZyb20oY3R4KSkudG9CZShkZXBzLnRpbWluZy5mcm9tKGN0eCkpO1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH0pO1xuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwKTtcbiAgZXhwZWN0KHR5cGVvZiBjdHgudGltaW5nLnN0YXJ0KS50b0JlKCdudW1iZXInKTtcbiAgZXhwZWN0KGN0eC50aW1pbmcuZW5kIGluc3RhbmNlb2YgUHJvbWlzZSkudG9CZVRydXRoeSgpO1xuICBjdHgudGltaW5nLmRvd25zdHJlYW0udGhlbigocmVzdWx0KSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQpLnRvQmUoJ251bWJlcicpO1xuICB9KTtcbiAgY3R4LnRpbWluZy5yZW5kZXIudGhlbigocmVzdWx0KSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQpLnRvQmUoJ251bWJlcicpO1xuICB9KTtcbiAgY3R4LnRpbWluZy51cHN0cmVhbS50aGVuKChyZXN1bHQpID0+IHtcbiAgICBleHBlY3QodHlwZW9mIHJlc3VsdCkudG9CZSgnbnVtYmVyJyk7XG4gIH0pO1xuICBjdHgudGltaW5nLmVuZC50aGVuKChyZXN1bHQpID0+IHtcbiAgICBleHBlY3QodHlwZW9mIHJlc3VsdCkudG9CZSgnbnVtYmVyJyk7XG4gIH0pO1xufSk7XG5cbnRlc3QoJ3RpbWluZyBwbHVnaW4gb24gZXJyb3IgbWlkZGxld2FyZScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcbiAgbGV0IHJlc29sdmVkID0ge1xuICAgIGRvd25zdHJlYW06IGZhbHNlLFxuICAgIHVwc3RyZWFtOiBmYWxzZSxcbiAgICByZW5kZXI6IGZhbHNlLFxuICB9O1xuICBhcHAubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgY3R4LnRpbWluZy5kb3duc3RyZWFtLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgcmVzb2x2ZWQuZG93bnN0cmVhbSA9IHRydWU7XG4gICAgfSk7XG4gICAgY3R4LnRpbWluZy5yZW5kZXIudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICByZXNvbHZlZC5yZW5kZXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGN0eC50aW1pbmcudXBzdHJlYW0udGhlbigocmVzdWx0KSA9PiB7XG4gICAgICByZXNvbHZlZC51cHN0cmVhbSA9IHRydWU7XG4gICAgfSk7XG4gICAgY3R4LnRpbWluZy5lbmQudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdCkudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QocmVzb2x2ZWQuZG93bnN0cmVhbSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzb2x2ZWQucmVuZGVyKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNvbHZlZC51cHN0cmVhbSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoY3R4LnN0YXR1cykudG9CZSg1MDApO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH0pO1xuICBhcHAubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgZSA9IG5ldyBFcnJvcignZmFpbCByZXF1ZXN0Jyk7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGUuc3RhdHVzID0gNTAwO1xuICAgIHRocm93IGU7XG4gIH0pO1xuICBhd2FpdCBydW4oYXBwKS5jYXRjaCgoZSkgPT4ge30pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBR0E7QUFDQTtBQUNBO0FBQThDO0FBTDlDOztBQU9BLE1BQU1BLEdBQUcsR0FBRyxRQUFjQyxnQkFBZ0IsRUFBRSxHQUFHLElBQUFDLGtCQUFnQixHQUFFO0FBRWpFQyxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVk7RUFDaEMsTUFBTUMsT0FB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