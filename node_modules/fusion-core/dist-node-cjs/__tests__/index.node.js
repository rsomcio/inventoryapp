"use strict";

var _index = _interopRequireWildcard(require("../index"));
var _testHelper = require("./test-helper");
var _tokens = require("../tokens");
var _createPlugin = require("../create-plugin");
var _baseApp = _interopRequireDefault(require("../base-app"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

test('ssr with accept header', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
    return 'lol';
  };
  const app = new _index.default(element, render);
  app.middleware(async (ctx, next) => {
    expect(ctx.element).toBe(element);
    expect(ctx.type).toBe('text/html');
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
    await next();
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
  });
  const ctx = await (0, _testHelper.run)(app);
  expect(typeof ctx.rendered).toBe('string');
  expect(typeof ctx.body).toBe('string');
  expect(!ctx.body.includes(element)).toBeTruthy();
  expect(flags.render).toBeTruthy();
});
test('ssr with bot user agent', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
    return 'lol';
  };
  const app = new _index.default(element, render);
  app.middleware(async (ctx, next) => {
    expect(ctx.element).toBe(element);
    expect(ctx.type).toBe('text/html');
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
    await next();
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
  });
  let initialCtx = {
    method: 'GET',
    headers: {
      accept: '*/*',
      'user-agent': 'AdsBot-Google'
    }
  };
  // @ts-expect-error
  const ctx = await (0, _testHelper.run)(app, initialCtx);
  expect(typeof ctx.rendered).toBe('string');
  expect(typeof ctx.body).toBe('string');
  expect(!ctx.body.includes(element)).toBeTruthy();
  expect(flags.render).toBeTruthy();
});
test('POST request with bot user agent', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
    return 'lol';
  };
  const app = new _index.default(element, render);
  app.middleware(async (ctx, next) => {
    expect(ctx.element).toBeFalsy();
    ctx.body = 'OK';
    await next();
  });
  let initialCtx = {
    method: 'POST',
    headers: {
      accept: '*/*',
      'user-agent': 'AdsBot-Google'
    }
  };
  // @ts-expect-error
  const ctx = await (0, _testHelper.run)(app, initialCtx);
  expect(ctx.rendered).toBeFalsy();
  expect(ctx.body).toBe('OK');
  expect(flags.render).toBe(false);
});
test('ssr without valid accept header', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
  };
  const app = new _index.default(element, render);
  let initialCtx = {
    method: 'GET',
    headers: {
      accept: '*/*'
    }
  };

  // @ts-expect-error
  const ctx = await (0, _testHelper.run)(app, initialCtx);
  expect(ctx.element).toBeFalsy();
  expect(ctx.type).toBeFalsy();
  expect(ctx.body).toBeFalsy();
  expect(!flags.render).toBeTruthy();
  expect(ctx.body).toBeFalsy();
});
test('ssr without valid bot user agent', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
  };
  const app = new _index.default(element, render);
  let initialCtx = {
    method: 'GET',
    headers: {
      accept: '*/*',
      'user-agent': 'test'
    }
  };

  // @ts-expect-error
  const ctx = await (0, _testHelper.run)(app, initialCtx);
  expect(ctx.element).toBeFalsy();
  expect(ctx.type).toBeFalsy();
  expect(ctx.body).toBeFalsy();
  expect(!flags.render).toBeTruthy();
  expect(ctx.body).toBeFalsy();
});
test('disable SSR by composing SSRDecider with a plugin', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
  };
  function buildApp() {
    const app = new _index.default(element, render);
    app.middleware((ctx, next) => {
      ctx.body = '_NO_SSR_';
      return next();
    });
    const SSRDeciderEnhancer = ssrDecider => {
      return (0, _createPlugin.createPlugin)({
        provides: () => {
          return ctx => {
            return ssrDecider(ctx) && !ctx.path.startsWith('/foo') && !ctx.path.startsWith('/bar');
          };
        }
      });
    };
    app.enhance(_tokens.SSRDeciderToken, SSRDeciderEnhancer);
    return app;
  }
  let initialCtx = {
    method: 'GET',
    path: '/foo'
  };
  // @ts-expect-error
  const ctx = await (0, _testHelper.run)(buildApp(), initialCtx);
  expect(ctx.element).toBeFalsy();
  expect(ctx.type).toBeFalsy();
  expect(!flags.render).toBeTruthy();
  expect(ctx.body).toBe('_NO_SSR_');
  let validSSRPathCtx = {
    path: '/some-path'
  };
  // @ts-expect-error
  const renderCtx = await (0, _testHelper.run)(buildApp(), validSSRPathCtx);
  expect(renderCtx.element).toBe(element);
  expect(renderCtx.type).toBe('text/html');
});
test('disable SSR by composing SSRDecider with a function', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
  };
  function buildApp() {
    const app = new _index.default(element, render);
    app.middleware((ctx, next) => {
      ctx.body = '_NO_SSR_';
      return next();
    });
    app.enhance(_tokens.SSRDeciderToken, decide => ctx => decide(ctx) && !ctx.path.startsWith('/foo'));
    return app;
  }
  let initialCtx = {
    method: 'GET',
    path: '/foo'
  };
  // @ts-expect-error
  const ctx = await (0, _testHelper.run)(buildApp(), initialCtx);
  expect(ctx.element).toBeFalsy();
  expect(ctx.type).toBeFalsy();
  expect(!flags.render).toBeTruthy();
  expect(ctx.body).toBe('_NO_SSR_');
  let validSSRPathCtx = {
    path: '/some-path'
  };
  // @ts-expect-error
  const renderCtx = await (0, _testHelper.run)(buildApp(), validSSRPathCtx);
  expect(renderCtx.element).toBe(element);
  expect(renderCtx.type).toBe('text/html');
});
test('SSR extension handling', async () => {
  const extensionToSSRSupported = {
    'js.map': false,
    svg: false,
    js: false,
    gif: false,
    jpg: false,
    png: false,
    pdf: false,
    json: false,
    html: true
  };
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
  };
  function buildApp() {
    const app = new _index.default(element, render);
    return app;
  }
  for (let i in extensionToSSRSupported) {
    flags.render = false;
    let initialCtx = {
      method: 'GET',
      path: `/some-path.${i}`
    };
    // @ts-expect-error
    await (0, _testHelper.run)(buildApp(), initialCtx);
    const shouldSSR = extensionToSSRSupported[i];
    expect(flags.render).toBe(shouldSSR);
  }
});
test('SSR with redirects downstream', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
    return 'lol';
  };
  const app = new _index.default(element, render);
  app.middleware(async (ctx, next) => {
    expect(ctx.element).toBe(element);
    expect(ctx.type).toBe('text/html');
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
    ctx.status = 302;
    ctx.body = 'redirect';
    await next();
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
  });
  const ctx = await (0, _testHelper.run)(app);
  expect(ctx.status).toBe(302);
  expect(ctx.rendered).toBeFalsy();
  expect(typeof ctx.body).toBe('string');
  expect(flags.render).toBeFalsy();
});
test('SSR with redirects upstream', async () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
    return 'lol';
  };
  const app = new _index.default(element, render);
  app.middleware(async (ctx, next) => {
    expect(ctx.element).toBe(element);
    expect(ctx.type).toBe('text/html');
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
    await next();
    ctx.status = 302;
    ctx.body = 'redirect';
    expect(typeof ctx.template).toBe('object');
    expect(typeof ctx.template.title).toBe('string');
    expect(typeof ctx.template.htmlAttrs).toBe('object');
    expect(typeof ctx.template.bodyAttrs).toBe('object');
    expect(ctx.template.head instanceof Array).toBeTruthy();
    expect(ctx.template.body instanceof Array).toBeTruthy();
  });
  const ctx = await (0, _testHelper.run)(app);
  expect(ctx.status).toBe(302);
  expect(ctx.rendered).toBe('lol');
  expect(typeof ctx.body).toBe('string');
  expect(flags.render).toBeTruthy();
});
test('HTML escaping works', async () => {
  const element = 'hi';
  const render = el => el;
  const template = (ctx, next) => {
    ctx.template.htmlAttrs = {
      lang: '">'
    };
    ctx.template.bodyAttrs = {
      test: '">'
    };
    ctx.template.title = '</title>';
    return next();
  };
  const app = new _index.default(element, render);
  app.middleware(template);
  const ctx = await (0, _testHelper.run)(app);
  expect(ctx.body.includes('<html lang="\\u0022\\u003E">')).toBeTruthy();
  expect(ctx.body.includes('<body test="\\u0022\\u003E">')).toBeTruthy();
  expect(ctx.body.includes('<title>\\u003C/title\\u003E</title>')).toBeTruthy();
});
test('head and body must be sanitized', async () => {
  const element = 'hi';
  const render = el => el;
  const template = (ctx, next) => {
    ctx.template.head.push((0, _index.html)` <meta charset="${'">'}" /> `);
    ctx.template.body.push((0, _index.html)` <div>${'">'}</div> `);
    return next();
  };
  const app = new _index.default(element, render);
  app.middleware(template);
  const ctx = await (0, _testHelper.run)(app);
  expect(ctx.body.includes('<meta charset="\\u0022\\u003E" />')).toBeTruthy();
  expect(ctx.body.includes('<div>\\u0022\\u003E</div>')).toBeTruthy();
});
test('throws if head is not sanitized', async () => {
  const element = 'hi';
  const render = el => el;
  const template = (ctx, next) => {
    ctx.template.head.push(`<meta charset="${'">'}" />`);
    return next();
  };
  const app = new _index.default(element, render);
  app.middleware(template);
  let error;
  try {
    await (0, _testHelper.run)(app);
  } catch (e) {
    error = e;
  }
  expect(error).toMatchInlineSnapshot(`[Error: Unsanitized html. Use html\`<meta charset="">" />\`]`);
});
test('throws if body is not sanitized', async () => {
  const element = 'hi';
  const render = el => el;
  const template = (ctx, next) => {
    ctx.template.body.push(`<meta charset="${'">'}" />`);
    return next();
  };
  const app = new _index.default(element, render);
  app.middleware(template);
  let error;
  try {
    await (0, _testHelper.run)(app);
  } catch (e) {
    error = e;
  }
  expect(error).toMatchInlineSnapshot(`[Error: Unsanitized html. Use html\`<meta charset="">" />\`]`);
});
test('rendering error handling', async () => {
  const element = 'hi';
  const render = () => {
    return new Promise(() => {
      throw new Error('Test error');
    });
  };
  const app = new _index.default(element, render);
  await expect((0, _testHelper.run)(app)).rejects.toThrow('Test error');
});
test('app handles no render token', () => {
  const app = new _baseApp.default('el', el => el);
  app.renderer = null;
  expect(() => app.resolve()).toThrowError('Missing registration for RenderToken');
});
test('enable proxy flag', () => {
  const flags = {
    render: false
  };
  const element = 'hi';
  const render = () => {
    flags.render = true;
    return 'lol';
  };
  const app = new _index.default(element, render);
  // @ts-expect-error
  expect(app._app.proxy).toBe(true);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZmxhZ3MiLCJyZW5kZXIiLCJlbGVtZW50IiwiYXBwIiwiQXBwIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJleHBlY3QiLCJ0b0JlIiwidHlwZSIsInRlbXBsYXRlIiwidGl0bGUiLCJodG1sQXR0cnMiLCJib2R5QXR0cnMiLCJoZWFkIiwiQXJyYXkiLCJ0b0JlVHJ1dGh5IiwiYm9keSIsInJ1biIsInJlbmRlcmVkIiwiaW5jbHVkZXMiLCJpbml0aWFsQ3R4IiwibWV0aG9kIiwiaGVhZGVycyIsImFjY2VwdCIsInRvQmVGYWxzeSIsImJ1aWxkQXBwIiwiU1NSRGVjaWRlckVuaGFuY2VyIiwic3NyRGVjaWRlciIsImNyZWF0ZVBsdWdpbiIsInByb3ZpZGVzIiwicGF0aCIsInN0YXJ0c1dpdGgiLCJlbmhhbmNlIiwiU1NSRGVjaWRlclRva2VuIiwidmFsaWRTU1JQYXRoQ3R4IiwicmVuZGVyQ3R4IiwiZGVjaWRlIiwiZXh0ZW5zaW9uVG9TU1JTdXBwb3J0ZWQiLCJzdmciLCJqcyIsImdpZiIsImpwZyIsInBuZyIsInBkZiIsImpzb24iLCJodG1sIiwiaSIsInNob3VsZFNTUiIsInN0YXR1cyIsImVsIiwibGFuZyIsInB1c2giLCJlcnJvciIsImUiLCJ0b01hdGNoSW5saW5lU25hcHNob3QiLCJQcm9taXNlIiwiRXJyb3IiLCJyZWplY3RzIiwidG9UaHJvdyIsIkJhc2VBcHAiLCJyZW5kZXJlciIsInJlc29sdmUiLCJ0b1Rocm93RXJyb3IiLCJfYXBwIiwicHJveHkiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL2luZGV4Lm5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgQXBwLCB7aHRtbH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHtydW59IGZyb20gJy4vdGVzdC1oZWxwZXInO1xuaW1wb3J0IHtTU1JEZWNpZGVyVG9rZW59IGZyb20gJy4uL3Rva2Vucyc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbn0gZnJvbSAnLi4vY3JlYXRlLXBsdWdpbic7XG5pbXBvcnQgQmFzZUFwcCBmcm9tICcuLi9iYXNlLWFwcCc7XG5cbnRlc3QoJ3NzciB3aXRoIGFjY2VwdCBoZWFkZXInLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGZsYWdzID0ge3JlbmRlcjogZmFsc2V9O1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGZsYWdzLnJlbmRlciA9IHRydWU7XG4gICAgcmV0dXJuICdsb2wnO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlcik7XG5cbiAgYXBwLm1pZGRsZXdhcmUoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIGV4cGVjdChjdHguZWxlbWVudCkudG9CZShlbGVtZW50KTtcbiAgICBleHBlY3QoY3R4LnR5cGUpLnRvQmUoJ3RleHQvaHRtbCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS50aXRsZSkudG9CZSgnc3RyaW5nJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUuaHRtbEF0dHJzKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5ib2R5QXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdChjdHgudGVtcGxhdGUuaGVhZCBpbnN0YW5jZW9mIEFycmF5KS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5ib2R5IGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBhd2FpdCBuZXh0KCk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLnRpdGxlKS50b0JlKCdzdHJpbmcnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5odG1sQXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLmJvZHlBdHRycykudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5oZWFkIGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY3R4LnRlbXBsYXRlLmJvZHkgaW5zdGFuY2VvZiBBcnJheSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwKTtcbiAgZXhwZWN0KHR5cGVvZiBjdHgucmVuZGVyZWQpLnRvQmUoJ3N0cmluZycpO1xuICBleHBlY3QodHlwZW9mIGN0eC5ib2R5KS50b0JlKCdzdHJpbmcnKTtcbiAgZXhwZWN0KCEoY3R4LmJvZHkgYXMgc3RyaW5nKS5pbmNsdWRlcyhlbGVtZW50KSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoZmxhZ3MucmVuZGVyKS50b0JlVHJ1dGh5KCk7XG59KTtcblxudGVzdCgnc3NyIHdpdGggYm90IHVzZXIgYWdlbnQnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGZsYWdzID0ge3JlbmRlcjogZmFsc2V9O1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGZsYWdzLnJlbmRlciA9IHRydWU7XG4gICAgcmV0dXJuICdsb2wnO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlcik7XG5cbiAgYXBwLm1pZGRsZXdhcmUoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIGV4cGVjdChjdHguZWxlbWVudCkudG9CZShlbGVtZW50KTtcbiAgICBleHBlY3QoY3R4LnR5cGUpLnRvQmUoJ3RleHQvaHRtbCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS50aXRsZSkudG9CZSgnc3RyaW5nJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUuaHRtbEF0dHJzKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5ib2R5QXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdChjdHgudGVtcGxhdGUuaGVhZCBpbnN0YW5jZW9mIEFycmF5KS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5ib2R5IGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBhd2FpdCBuZXh0KCk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLnRpdGxlKS50b0JlKCdzdHJpbmcnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5odG1sQXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLmJvZHlBdHRycykudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5oZWFkIGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY3R4LnRlbXBsYXRlLmJvZHkgaW5zdGFuY2VvZiBBcnJheSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBsZXQgaW5pdGlhbEN0eCA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIGFjY2VwdDogJyovKicsXG4gICAgICAndXNlci1hZ2VudCc6ICdBZHNCb3QtR29vZ2xlJyxcbiAgICB9LFxuICB9O1xuICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHAsIGluaXRpYWxDdHgpO1xuICBleHBlY3QodHlwZW9mIGN0eC5yZW5kZXJlZCkudG9CZSgnc3RyaW5nJyk7XG4gIGV4cGVjdCh0eXBlb2YgY3R4LmJvZHkpLnRvQmUoJ3N0cmluZycpO1xuICBleHBlY3QoIShjdHguYm9keSBhcyBzdHJpbmcpLmluY2x1ZGVzKGVsZW1lbnQpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChmbGFncy5yZW5kZXIpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG50ZXN0KCdQT1NUIHJlcXVlc3Qgd2l0aCBib3QgdXNlciBhZ2VudCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZmxhZ3MgPSB7cmVuZGVyOiBmYWxzZX07XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gICAgZmxhZ3MucmVuZGVyID0gdHJ1ZTtcbiAgICByZXR1cm4gJ2xvbCc7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcblxuICBhcHAubWlkZGxld2FyZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgZXhwZWN0KGN0eC5lbGVtZW50KS50b0JlRmFsc3koKTtcbiAgICBjdHguYm9keSA9ICdPSyc7XG4gICAgYXdhaXQgbmV4dCgpO1xuICB9KTtcblxuICBsZXQgaW5pdGlhbEN0eCA9IHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhY2NlcHQ6ICcqLyonLFxuICAgICAgJ3VzZXItYWdlbnQnOiAnQWRzQm90LUdvb2dsZScsXG4gICAgfSxcbiAgfTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwLCBpbml0aWFsQ3R4KTtcbiAgZXhwZWN0KGN0eC5yZW5kZXJlZCkudG9CZUZhbHN5KCk7XG4gIGV4cGVjdChjdHguYm9keSkudG9CZSgnT0snKTtcbiAgZXhwZWN0KGZsYWdzLnJlbmRlcikudG9CZShmYWxzZSk7XG59KTtcblxudGVzdCgnc3NyIHdpdGhvdXQgdmFsaWQgYWNjZXB0IGhlYWRlcicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZmxhZ3MgPSB7cmVuZGVyOiBmYWxzZX07XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gICAgZmxhZ3MucmVuZGVyID0gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChlbGVtZW50LCByZW5kZXIpO1xuICBsZXQgaW5pdGlhbEN0eCA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGhlYWRlcnM6IHthY2NlcHQ6ICcqLyonfSxcbiAgfTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHAsIGluaXRpYWxDdHgpO1xuICBleHBlY3QoY3R4LmVsZW1lbnQpLnRvQmVGYWxzeSgpO1xuICBleHBlY3QoY3R4LnR5cGUpLnRvQmVGYWxzeSgpO1xuICBleHBlY3QoY3R4LmJvZHkpLnRvQmVGYWxzeSgpO1xuICBleHBlY3QoIWZsYWdzLnJlbmRlcikudG9CZVRydXRoeSgpO1xuICBleHBlY3QoY3R4LmJvZHkpLnRvQmVGYWxzeSgpO1xufSk7XG5cbnRlc3QoJ3NzciB3aXRob3V0IHZhbGlkIGJvdCB1c2VyIGFnZW50JywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBmbGFncyA9IHtyZW5kZXI6IGZhbHNlfTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBmbGFncy5yZW5kZXIgPSB0cnVlO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlcik7XG4gIGxldCBpbml0aWFsQ3R4ID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgYWNjZXB0OiAnKi8qJyxcbiAgICAgICd1c2VyLWFnZW50JzogJ3Rlc3QnLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwLCBpbml0aWFsQ3R4KTtcbiAgZXhwZWN0KGN0eC5lbGVtZW50KS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KGN0eC50eXBlKS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KGN0eC5ib2R5KS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KCFmbGFncy5yZW5kZXIpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGN0eC5ib2R5KS50b0JlRmFsc3koKTtcbn0pO1xuXG50ZXN0KCdkaXNhYmxlIFNTUiBieSBjb21wb3NpbmcgU1NSRGVjaWRlciB3aXRoIGEgcGx1Z2luJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBmbGFncyA9IHtyZW5kZXI6IGZhbHNlfTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBmbGFncy5yZW5kZXIgPSB0cnVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGJ1aWxkQXBwKCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcblxuICAgIGFwcC5taWRkbGV3YXJlKChjdHgsIG5leHQpID0+IHtcbiAgICAgIGN0eC5ib2R5ID0gJ19OT19TU1JfJztcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBTU1JEZWNpZGVyRW5oYW5jZXIgPSAoc3NyRGVjaWRlcikgPT4ge1xuICAgICAgcmV0dXJuIGNyZWF0ZVBsdWdpbih7XG4gICAgICAgIHByb3ZpZGVzOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChjdHgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHNzckRlY2lkZXIoY3R4KSAmJlxuICAgICAgICAgICAgICAhY3R4LnBhdGguc3RhcnRzV2l0aCgnL2ZvbycpICYmXG4gICAgICAgICAgICAgICFjdHgucGF0aC5zdGFydHNXaXRoKCcvYmFyJylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH07XG4gICAgYXBwLmVuaGFuY2UoU1NSRGVjaWRlclRva2VuLCBTU1JEZWNpZGVyRW5oYW5jZXIpO1xuICAgIHJldHVybiBhcHA7XG4gIH1cblxuICBsZXQgaW5pdGlhbEN0eCA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvZm9vJyxcbiAgfTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYnVpbGRBcHAoKSwgaW5pdGlhbEN0eCk7XG5cbiAgZXhwZWN0KGN0eC5lbGVtZW50KS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KGN0eC50eXBlKS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KCFmbGFncy5yZW5kZXIpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGN0eC5ib2R5KS50b0JlKCdfTk9fU1NSXycpO1xuXG4gIGxldCB2YWxpZFNTUlBhdGhDdHggPSB7XG4gICAgcGF0aDogJy9zb21lLXBhdGgnLFxuICB9O1xuICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gIGNvbnN0IHJlbmRlckN0eCA9IGF3YWl0IHJ1bihidWlsZEFwcCgpLCB2YWxpZFNTUlBhdGhDdHgpO1xuICBleHBlY3QocmVuZGVyQ3R4LmVsZW1lbnQpLnRvQmUoZWxlbWVudCk7XG4gIGV4cGVjdChyZW5kZXJDdHgudHlwZSkudG9CZSgndGV4dC9odG1sJyk7XG59KTtcblxudGVzdCgnZGlzYWJsZSBTU1IgYnkgY29tcG9zaW5nIFNTUkRlY2lkZXIgd2l0aCBhIGZ1bmN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBmbGFncyA9IHtyZW5kZXI6IGZhbHNlfTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBmbGFncy5yZW5kZXIgPSB0cnVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGJ1aWxkQXBwKCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcblxuICAgIGFwcC5taWRkbGV3YXJlKChjdHgsIG5leHQpID0+IHtcbiAgICAgIGN0eC5ib2R5ID0gJ19OT19TU1JfJztcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfSk7XG5cbiAgICBhcHAuZW5oYW5jZShcbiAgICAgIFNTUkRlY2lkZXJUb2tlbixcbiAgICAgIChkZWNpZGUpID0+IChjdHgpID0+IGRlY2lkZShjdHgpICYmICFjdHgucGF0aC5zdGFydHNXaXRoKCcvZm9vJylcbiAgICApO1xuICAgIHJldHVybiBhcHA7XG4gIH1cblxuICBsZXQgaW5pdGlhbEN0eCA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvZm9vJyxcbiAgfTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYnVpbGRBcHAoKSwgaW5pdGlhbEN0eCk7XG5cbiAgZXhwZWN0KGN0eC5lbGVtZW50KS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KGN0eC50eXBlKS50b0JlRmFsc3koKTtcbiAgZXhwZWN0KCFmbGFncy5yZW5kZXIpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGN0eC5ib2R5KS50b0JlKCdfTk9fU1NSXycpO1xuXG4gIGxldCB2YWxpZFNTUlBhdGhDdHggPSB7XG4gICAgcGF0aDogJy9zb21lLXBhdGgnLFxuICB9O1xuICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gIGNvbnN0IHJlbmRlckN0eCA9IGF3YWl0IHJ1bihidWlsZEFwcCgpLCB2YWxpZFNTUlBhdGhDdHgpO1xuICBleHBlY3QocmVuZGVyQ3R4LmVsZW1lbnQpLnRvQmUoZWxlbWVudCk7XG4gIGV4cGVjdChyZW5kZXJDdHgudHlwZSkudG9CZSgndGV4dC9odG1sJyk7XG59KTtcblxudGVzdCgnU1NSIGV4dGVuc2lvbiBoYW5kbGluZycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZXh0ZW5zaW9uVG9TU1JTdXBwb3J0ZWQgPSB7XG4gICAgJ2pzLm1hcCc6IGZhbHNlLFxuICAgIHN2ZzogZmFsc2UsXG4gICAganM6IGZhbHNlLFxuICAgIGdpZjogZmFsc2UsXG4gICAganBnOiBmYWxzZSxcbiAgICBwbmc6IGZhbHNlLFxuICAgIHBkZjogZmFsc2UsXG4gICAganNvbjogZmFsc2UsXG4gICAgaHRtbDogdHJ1ZSxcbiAgfTtcblxuICBjb25zdCBmbGFncyA9IHtyZW5kZXI6IGZhbHNlfTtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBmbGFncy5yZW5kZXIgPSB0cnVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGJ1aWxkQXBwKCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcbiAgICByZXR1cm4gYXBwO1xuICB9XG5cbiAgZm9yIChsZXQgaSBpbiBleHRlbnNpb25Ub1NTUlN1cHBvcnRlZCkge1xuICAgIGZsYWdzLnJlbmRlciA9IGZhbHNlO1xuICAgIGxldCBpbml0aWFsQ3R4ID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHBhdGg6IGAvc29tZS1wYXRoLiR7aX1gLFxuICAgIH07XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGF3YWl0IHJ1bihidWlsZEFwcCgpLCBpbml0aWFsQ3R4KTtcbiAgICBjb25zdCBzaG91bGRTU1IgPSBleHRlbnNpb25Ub1NTUlN1cHBvcnRlZFtpXTtcbiAgICBleHBlY3QoZmxhZ3MucmVuZGVyKS50b0JlKHNob3VsZFNTUik7XG4gIH1cbn0pO1xuXG50ZXN0KCdTU1Igd2l0aCByZWRpcmVjdHMgZG93bnN0cmVhbScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZmxhZ3MgPSB7cmVuZGVyOiBmYWxzZX07XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gICAgZmxhZ3MucmVuZGVyID0gdHJ1ZTtcbiAgICByZXR1cm4gJ2xvbCc7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcblxuICBhcHAubWlkZGxld2FyZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgZXhwZWN0KGN0eC5lbGVtZW50KS50b0JlKGVsZW1lbnQpO1xuICAgIGV4cGVjdChjdHgudHlwZSkudG9CZSgndGV4dC9odG1sJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLnRpdGxlKS50b0JlKCdzdHJpbmcnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5odG1sQXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLmJvZHlBdHRycykudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5oZWFkIGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY3R4LnRlbXBsYXRlLmJvZHkgaW5zdGFuY2VvZiBBcnJheSkudG9CZVRydXRoeSgpO1xuICAgIGN0eC5zdGF0dXMgPSAzMDI7XG4gICAgY3R4LmJvZHkgPSAncmVkaXJlY3QnO1xuICAgIGF3YWl0IG5leHQoKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZSkudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUudGl0bGUpLnRvQmUoJ3N0cmluZycpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLmh0bWxBdHRycykudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUuYm9keUF0dHJzKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QoY3R4LnRlbXBsYXRlLmhlYWQgaW5zdGFuY2VvZiBBcnJheSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChjdHgudGVtcGxhdGUuYm9keSBpbnN0YW5jZW9mIEFycmF5KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwKTtcbiAgZXhwZWN0KGN0eC5zdGF0dXMpLnRvQmUoMzAyKTtcbiAgZXhwZWN0KGN0eC5yZW5kZXJlZCkudG9CZUZhbHN5KCk7XG4gIGV4cGVjdCh0eXBlb2YgY3R4LmJvZHkpLnRvQmUoJ3N0cmluZycpO1xuICBleHBlY3QoZmxhZ3MucmVuZGVyKS50b0JlRmFsc3koKTtcbn0pO1xuXG50ZXN0KCdTU1Igd2l0aCByZWRpcmVjdHMgdXBzdHJlYW0nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGZsYWdzID0ge3JlbmRlcjogZmFsc2V9O1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGZsYWdzLnJlbmRlciA9IHRydWU7XG4gICAgcmV0dXJuICdsb2wnO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlcik7XG5cbiAgYXBwLm1pZGRsZXdhcmUoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIGV4cGVjdChjdHguZWxlbWVudCkudG9CZShlbGVtZW50KTtcbiAgICBleHBlY3QoY3R4LnR5cGUpLnRvQmUoJ3RleHQvaHRtbCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS50aXRsZSkudG9CZSgnc3RyaW5nJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUuaHRtbEF0dHJzKS50b0JlKCdvYmplY3QnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5ib2R5QXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdChjdHgudGVtcGxhdGUuaGVhZCBpbnN0YW5jZW9mIEFycmF5KS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5ib2R5IGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBhd2FpdCBuZXh0KCk7XG4gICAgY3R4LnN0YXR1cyA9IDMwMjtcbiAgICBjdHguYm9keSA9ICdyZWRpcmVjdCc7XG4gICAgZXhwZWN0KHR5cGVvZiBjdHgudGVtcGxhdGUpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLnRpdGxlKS50b0JlKCdzdHJpbmcnKTtcbiAgICBleHBlY3QodHlwZW9mIGN0eC50ZW1wbGF0ZS5odG1sQXR0cnMpLnRvQmUoJ29iamVjdCcpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3R4LnRlbXBsYXRlLmJvZHlBdHRycykudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KGN0eC50ZW1wbGF0ZS5oZWFkIGluc3RhbmNlb2YgQXJyYXkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY3R4LnRlbXBsYXRlLmJvZHkgaW5zdGFuY2VvZiBBcnJheSkudG9CZVRydXRoeSgpO1xuICB9KTtcbiAgY29uc3QgY3R4ID0gYXdhaXQgcnVuKGFwcCk7XG4gIGV4cGVjdChjdHguc3RhdHVzKS50b0JlKDMwMik7XG4gIGV4cGVjdChjdHgucmVuZGVyZWQpLnRvQmUoJ2xvbCcpO1xuICBleHBlY3QodHlwZW9mIGN0eC5ib2R5KS50b0JlKCdzdHJpbmcnKTtcbiAgZXhwZWN0KGZsYWdzLnJlbmRlcikudG9CZVRydXRoeSgpO1xufSk7XG5cbnRlc3QoJ0hUTUwgZXNjYXBpbmcgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQgPSAnaGknO1xuICBjb25zdCByZW5kZXIgPSAoZWwpID0+IGVsO1xuICBjb25zdCB0ZW1wbGF0ZSA9IChjdHgsIG5leHQpID0+IHtcbiAgICBjdHgudGVtcGxhdGUuaHRtbEF0dHJzID0ge2xhbmc6ICdcIj4nfTtcbiAgICBjdHgudGVtcGxhdGUuYm9keUF0dHJzID0ge3Rlc3Q6ICdcIj4nfTtcbiAgICBjdHgudGVtcGxhdGUudGl0bGUgPSAnPC90aXRsZT4nO1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcbiAgYXBwLm1pZGRsZXdhcmUodGVtcGxhdGUpO1xuXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHApO1xuICBleHBlY3QoXG4gICAgKGN0eC5ib2R5IGFzIHN0cmluZykuaW5jbHVkZXMoJzxodG1sIGxhbmc9XCJcXFxcdTAwMjJcXFxcdTAwM0VcIj4nKVxuICApLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KFxuICAgIChjdHguYm9keSBhcyBzdHJpbmcpLmluY2x1ZGVzKCc8Ym9keSB0ZXN0PVwiXFxcXHUwMDIyXFxcXHUwMDNFXCI+JylcbiAgKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChcbiAgICAoY3R4LmJvZHkgYXMgc3RyaW5nKS5pbmNsdWRlcygnPHRpdGxlPlxcXFx1MDAzQy90aXRsZVxcXFx1MDAzRTwvdGl0bGU+JylcbiAgKS50b0JlVHJ1dGh5KCk7XG59KTtcblxudGVzdCgnaGVhZCBhbmQgYm9keSBtdXN0IGJlIHNhbml0aXplZCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9IChlbCkgPT4gZWw7XG4gIGNvbnN0IHRlbXBsYXRlID0gKGN0eCwgbmV4dCkgPT4ge1xuICAgIGN0eC50ZW1wbGF0ZS5oZWFkLnB1c2goaHRtbGAgPG1ldGEgY2hhcnNldD1cIiR7J1wiPid9XCIgLz4gYCk7XG4gICAgY3R4LnRlbXBsYXRlLmJvZHkucHVzaChodG1sYCA8ZGl2PiR7J1wiPid9PC9kaXY+IGApO1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcbiAgYXBwLm1pZGRsZXdhcmUodGVtcGxhdGUpO1xuXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHApO1xuICBleHBlY3QoXG4gICAgKGN0eC5ib2R5IGFzIHN0cmluZykuaW5jbHVkZXMoJzxtZXRhIGNoYXJzZXQ9XCJcXFxcdTAwMjJcXFxcdTAwM0VcIiAvPicpXG4gICkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoXG4gICAgKGN0eC5ib2R5IGFzIHN0cmluZykuaW5jbHVkZXMoJzxkaXY+XFxcXHUwMDIyXFxcXHUwMDNFPC9kaXY+JylcbiAgKS50b0JlVHJ1dGh5KCk7XG59KTtcblxudGVzdCgndGhyb3dzIGlmIGhlYWQgaXMgbm90IHNhbml0aXplZCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9IChlbCkgPT4gZWw7XG4gIGNvbnN0IHRlbXBsYXRlID0gKGN0eCwgbmV4dCkgPT4ge1xuICAgIGN0eC50ZW1wbGF0ZS5oZWFkLnB1c2goYDxtZXRhIGNoYXJzZXQ9XCIkeydcIj4nfVwiIC8+YCk7XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfTtcbiAgY29uc3QgYXBwID0gbmV3IEFwcChlbGVtZW50LCByZW5kZXIpO1xuICBhcHAubWlkZGxld2FyZSh0ZW1wbGF0ZSk7XG5cbiAgbGV0IGVycm9yO1xuICB0cnkge1xuICAgIGF3YWl0IHJ1bihhcHApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9XG4gIGV4cGVjdChlcnJvcikudG9NYXRjaElubGluZVNuYXBzaG90KFxuICAgIGBbRXJyb3I6IFVuc2FuaXRpemVkIGh0bWwuIFVzZSBodG1sXFxgPG1ldGEgY2hhcnNldD1cIlwiPlwiIC8+XFxgXWBcbiAgKTtcbn0pO1xuXG50ZXN0KCd0aHJvd3MgaWYgYm9keSBpcyBub3Qgc2FuaXRpemVkJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyID0gKGVsKSA9PiBlbDtcbiAgY29uc3QgdGVtcGxhdGUgPSAoY3R4LCBuZXh0KSA9PiB7XG4gICAgY3R4LnRlbXBsYXRlLmJvZHkucHVzaChgPG1ldGEgY2hhcnNldD1cIiR7J1wiPid9XCIgLz5gKTtcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlcik7XG4gIGFwcC5taWRkbGV3YXJlKHRlbXBsYXRlKTtcblxuICBsZXQgZXJyb3I7XG4gIHRyeSB7XG4gICAgYXdhaXQgcnVuKGFwcCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbiAgZXhwZWN0KGVycm9yKS50b01hdGNoSW5saW5lU25hcHNob3QoXG4gICAgYFtFcnJvcjogVW5zYW5pdGl6ZWQgaHRtbC4gVXNlIGh0bWxcXGA8bWV0YSBjaGFyc2V0PVwiXCI+XCIgLz5cXGBdYFxuICApO1xufSk7XG5cbnRlc3QoJ3JlbmRlcmluZyBlcnJvciBoYW5kbGluZycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXN0IGVycm9yJyk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyKTtcbiAgYXdhaXQgZXhwZWN0KHJ1bihhcHApKS5yZWplY3RzLnRvVGhyb3coJ1Rlc3QgZXJyb3InKTtcbn0pO1xuXG50ZXN0KCdhcHAgaGFuZGxlcyBubyByZW5kZXIgdG9rZW4nLCAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IG5ldyBCYXNlQXBwKCdlbCcsIChlbCkgPT4gZWwpO1xuICBhcHAucmVuZGVyZXIgPSBudWxsO1xuICBleHBlY3QoKCkgPT4gYXBwLnJlc29sdmUoKSkudG9UaHJvd0Vycm9yKFxuICAgICdNaXNzaW5nIHJlZ2lzdHJhdGlvbiBmb3IgUmVuZGVyVG9rZW4nXG4gICk7XG59KTtcblxudGVzdCgnZW5hYmxlIHByb3h5IGZsYWcnLCAoKSA9PiB7XG4gIGNvbnN0IGZsYWdzID0ge3JlbmRlcjogZmFsc2V9O1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGZsYWdzLnJlbmRlciA9IHRydWU7XG4gICAgcmV0dXJuICdsb2wnO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlcik7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgZXhwZWN0KGFwcC5fYXBwLnByb3h5KS50b0JlKHRydWUpO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFrQztBQUFBO0FBQUE7QUFYbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFBQSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBWTtFQUN6QyxNQUFNQyxLQUFLLEdBQUc7SUFBQ0MsTUFBTSxFQUFFO0VBQUssQ0FBQztFQUM3QixNQUFNQyxPQUFPLEdBQUcsSUFBSTtFQUNwQixNQUFNRCxNQUFNLEdBQUcsTUFBTTtJQUNuQkQsS0FBSyxDQUFDQyxNQUFNLEdBQUcsSUFBSTtJQUNuQixPQUFPLEtBQUs7RUFDZCxDQUFDO0VBQ0QsTUFBTUUsR0FBRyxHQUFHLElBQUlDLGNBQUcsQ0FBQ0YsT0FBTyxFQUFFRCxNQUFNLENBQUM7RUFFcENFLEdBQUcsQ0FBQ0UsVUFBVSxDQUFDLE9BQU9DLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0lBQ2xDQyxNQUFNLENBQUNGLEdBQUcsQ0FBQ0osT0FBTyxDQUFDLENBQUNPLElBQUksQ0FBQ1AsT0FBTyxDQUFDO0lBQ2pDTSxNQUFNLENBQUNGLEdBQUcsQ0FBQ0ksSUFBSSxDQUFDLENBQUNELElBQUksQ0FBQyxXQUFXLENBQUM7SUFDbENELE1BQU0sQ0FBQyxPQUFPRixHQUFHLENBQUNLLFFBQVEsQ0FBQyxDQUFDRixJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzFDRCxNQUFNLENBQUMsT0FBT0YsR0FBRyxDQUFDSyxRQUFRLENBQUNDLEtBQUssQ0FBQyxDQUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2hERCxN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