"use strict";

var _testHelper = require("./test-helper");
var _index = _interopRequireWildcard(require("../index"));
var _createPlugin = require("../create-plugin");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
test('withEndpoint works', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  const EndpointPlugin = (0, _createPlugin.declarePlugin)(
  // eslint-disable-next-line require-yield
  function* MyPlugin() {
    (0, _index.withEndpoint)('/_foobar', (ctx, next) => {
      ctx.body = 'foobar';
      return next();
    });
  });
  app.register(EndpointPlugin);
  const ctx = await (0, _testHelper.run)(app, {
    method: 'GET',
    path: '/_foobar',
    headers: {
      accept: 'text/html'
    }
  });
  expect(ctx.body).toBe('foobar');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZWxlbWVudCIsInJlbmRlckZuIiwiZWwiLCJhcHAiLCJBcHAiLCJFbmRwb2ludFBsdWdpbiIsImRlY2xhcmVQbHVnaW4iLCJNeVBsdWdpbiIsIndpdGhFbmRwb2ludCIsImN0eCIsIm5leHQiLCJib2R5IiwicmVnaXN0ZXIiLCJydW4iLCJtZXRob2QiLCJwYXRoIiwiaGVhZGVycyIsImFjY2VwdCIsImV4cGVjdCIsInRvQmUiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL2VuZHBvaW50cy5ub2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cnVufSBmcm9tICcuL3Rlc3QtaGVscGVyJztcbmltcG9ydCBBcHAsIHtDb250ZXh0LCB3aXRoRW5kcG9pbnR9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7ZGVjbGFyZVBsdWdpbn0gZnJvbSAnLi4vY3JlYXRlLXBsdWdpbic7XG5cbnRlc3QoJ3dpdGhFbmRwb2ludCB3b3JrcycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcblxuICBjb25zdCBFbmRwb2ludFBsdWdpbiA9IGRlY2xhcmVQbHVnaW4oXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUteWllbGRcbiAgICBmdW5jdGlvbiogTXlQbHVnaW4oKSB7XG4gICAgICB3aXRoRW5kcG9pbnQoJy9fZm9vYmFyJywgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBjdHguYm9keSA9ICdmb29iYXInO1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIGFwcC5yZWdpc3RlcihFbmRwb2ludFBsdWdpbik7XG5cbiAgY29uc3QgY3R4ID0gYXdhaXQgcnVuKGFwcCwge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9fZm9vYmFyJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhY2NlcHQ6ICd0ZXh0L2h0bWwnLFxuICAgIH0sXG4gIH0gYXMgQ29udGV4dCk7XG4gIGV4cGVjdChjdHguYm9keSkudG9CZSgnZm9vYmFyJyk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFBK0M7QUFBQTtBQUUvQ0EsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQVk7RUFDckMsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0EsRUFBRTtFQUNYLENBQUM7RUFDRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsY0FBRyxDQUFDSixPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUV0QyxNQUFNSSxjQUFjLEdBQUcsSUFBQUMsMkJBQWE7RUFDbEM7RUFDQSxVQUFVQyxRQUFRLEdBQUc7SUFDbkIsSUFBQUMsbUJBQVksRUFBQyxVQUFVLEVBQUUsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7TUFDdENELEdBQUcsQ0FBQ0UsSUFBSSxHQUFHLFFBQVE7TUFDbkIsT0FBT0QsSUFBSSxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUNGO0VBRURQLEdBQUcsQ0FBQ1MsUUFBUSxDQUFDUCxjQUFjLENBQUM7RUFFNUIsTUFBTUksR0FBRyxHQUFHLE1BQU0sSUFBQUksZUFBRyxFQUFDVixHQUFHLEVBQUU7SUFDekJXLE1BQU0sRUFBRSxLQUFLO0lBQ2JDLElBQUksRUFBRSxVQUFVO0lBQ2hCQyxPQUFPLEVBQUU7TUFDUEMsTUFBTSxFQUFFO0lBQ1Y7RUFDRixDQUFDLENBQVk7RUFDYkMsTUFBTSxDQUFDVCxHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFDUSxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyJ9