"use strict";

var _testHelper = require("./test-helper");
var _index = _interopRequireWildcard(require("../index"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
test('ssrDecider works', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  const CustomPlugin = (0, _index.createPlugin)({
    deps: {
      ssrDecider: _index.SSRDeciderToken
    },
    middleware: deps => async (ctx, next) => {
      ctx.fullSSRValue = deps.ssrDecider(ctx);
      return next();
    }
  });
  app.register(CustomPlugin);
  const ctx = await (0, _testHelper.run)(app, {
    method: 'GET',
    headers: {
      accept: 'text/html'
    },
    path: '/'
  });
  expect(ctx.fullSSRValue).toBe(true);
});
test('ssrDecider returns `stream` when streaming', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  const CustomPlugin = (0, _index.createPlugin)({
    deps: {
      ssrDecider: _index.SSRDeciderToken
    },
    middleware: deps => async (ctx, next) => {
      ctx.fullSSRValue = deps.ssrDecider(ctx);
      return next();
    }
  });
  app.register(CustomPlugin);
  app.register(_index.unstable_EnableServerStreamingToken, true);
  const ctx = await (0, _testHelper.run)(app, {
    method: 'GET',
    headers: {
      accept: 'text/html'
    },
    path: '/'
  });
  expect(ctx.fullSSRValue).toBe('stream');
});
test('ssrDecider returns true when bot even if token is true', async () => {
  const element = 'hi';
  const renderFn = el => {
    return el;
  };
  const app = new _index.default(element, renderFn);
  const CustomPlugin = (0, _index.createPlugin)({
    deps: {
      ssrDecider: _index.SSRDeciderToken
    },
    middleware: deps => async (ctx, next) => {
      ctx.fullSSRValue = deps.ssrDecider(ctx);
      return next();
    }
  });
  app.register(CustomPlugin);
  app.register(_index.unstable_EnableServerStreamingToken, true);
  const ctx = await (0, _testHelper.run)(app, {
    method: 'GET',
    headers: {
      accept: 'text/html',
      'user-agent': 'bot'
    },
    path: '/'
  });
  expect(ctx.fullSSRValue).toBe(true);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZWxlbWVudCIsInJlbmRlckZuIiwiZWwiLCJhcHAiLCJBcHAiLCJDdXN0b21QbHVnaW4iLCJjcmVhdGVQbHVnaW4iLCJkZXBzIiwic3NyRGVjaWRlciIsIlNTUkRlY2lkZXJUb2tlbiIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZnVsbFNTUlZhbHVlIiwicmVnaXN0ZXIiLCJydW4iLCJtZXRob2QiLCJoZWFkZXJzIiwiYWNjZXB0IiwicGF0aCIsImV4cGVjdCIsInRvQmUiLCJ1bnN0YWJsZV9FbmFibGVTZXJ2ZXJTdHJlYW1pbmdUb2tlbiJdLCJzb3VyY2VzIjpbInNyYy9fX3Rlc3RzX18vc3NyLWRlY2lkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtydW59IGZyb20gJy4vdGVzdC1oZWxwZXInO1xuaW1wb3J0IEFwcCwge1xuICBjcmVhdGVQbHVnaW4sXG4gIHVuc3RhYmxlX0VuYWJsZVNlcnZlclN0cmVhbWluZ1Rva2VuLFxuICBTU1JEZWNpZGVyVG9rZW4sXG4gIENvbnRleHQsXG59IGZyb20gJy4uL2luZGV4JztcblxudGVzdCgnc3NyRGVjaWRlciB3b3JrcycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcblxuICBjb25zdCBDdXN0b21QbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHNzckRlY2lkZXI6IFNTUkRlY2lkZXJUb2tlbixcbiAgICB9LFxuICAgIG1pZGRsZXdhcmU6IChkZXBzKSA9PiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBjdHguZnVsbFNTUlZhbHVlID0gZGVwcy5zc3JEZWNpZGVyKGN0eCk7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGFwcC5yZWdpc3RlcihDdXN0b21QbHVnaW4pO1xuXG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHAsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCcsXG4gICAgfSxcbiAgICBwYXRoOiAnLycsXG4gIH0gYXMgQ29udGV4dCk7XG4gIGV4cGVjdChjdHguZnVsbFNTUlZhbHVlKS50b0JlKHRydWUpO1xufSk7XG5cbnRlc3QoJ3NzckRlY2lkZXIgcmV0dXJucyBgc3RyZWFtYCB3aGVuIHN0cmVhbWluZycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9ICdoaSc7XG4gIGNvbnN0IHJlbmRlckZuID0gKGVsKSA9PiB7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuICBjb25zdCBhcHAgPSBuZXcgQXBwKGVsZW1lbnQsIHJlbmRlckZuKTtcblxuICBjb25zdCBDdXN0b21QbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHNzckRlY2lkZXI6IFNTUkRlY2lkZXJUb2tlbixcbiAgICB9LFxuICAgIG1pZGRsZXdhcmU6IChkZXBzKSA9PiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBjdHguZnVsbFNTUlZhbHVlID0gZGVwcy5zc3JEZWNpZGVyKGN0eCk7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGFwcC5yZWdpc3RlcihDdXN0b21QbHVnaW4pO1xuICBhcHAucmVnaXN0ZXIodW5zdGFibGVfRW5hYmxlU2VydmVyU3RyZWFtaW5nVG9rZW4sIHRydWUpO1xuICBjb25zdCBjdHggPSBhd2FpdCBydW4oYXBwLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhY2NlcHQ6ICd0ZXh0L2h0bWwnLFxuICAgIH0sXG4gICAgcGF0aDogJy8nLFxuICB9IGFzIENvbnRleHQpO1xuICBleHBlY3QoY3R4LmZ1bGxTU1JWYWx1ZSkudG9CZSgnc3RyZWFtJyk7XG59KTtcblxudGVzdCgnc3NyRGVjaWRlciByZXR1cm5zIHRydWUgd2hlbiBib3QgZXZlbiBpZiB0b2tlbiBpcyB0cnVlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBlbGVtZW50ID0gJ2hpJztcbiAgY29uc3QgcmVuZGVyRm4gPSAoZWwpID0+IHtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoZWxlbWVudCwgcmVuZGVyRm4pO1xuXG4gIGNvbnN0IEN1c3RvbVBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgZGVwczoge1xuICAgICAgc3NyRGVjaWRlcjogU1NSRGVjaWRlclRva2VuLFxuICAgIH0sXG4gICAgbWlkZGxld2FyZTogKGRlcHMpID0+IGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgIGN0eC5mdWxsU1NSVmFsdWUgPSBkZXBzLnNzckRlY2lkZXIoY3R4KTtcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgYXBwLnJlZ2lzdGVyKEN1c3RvbVBsdWdpbik7XG4gIGFwcC5yZWdpc3Rlcih1bnN0YWJsZV9FbmFibGVTZXJ2ZXJTdHJlYW1pbmdUb2tlbiwgdHJ1ZSk7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IHJ1bihhcHAsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCcsXG4gICAgICAndXNlci1hZ2VudCc6ICdib3QnLFxuICAgIH0sXG4gICAgcGF0aDogJy8nLFxuICB9IGFzIENvbnRleHQpO1xuICBleHBlY3QoY3R4LmZ1bGxTU1JWYWx1ZSkudG9CZSh0cnVlKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFLa0I7QUFBQTtBQUVsQkEsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFlBQVk7RUFDbkMsTUFBTUMsT0FBTyxHQUFHLElBQUk7RUFDcEIsTUFBTUMsUUFBUSxHQUFJQyxFQUFFLElBQUs7SUFDdkIsT0FBT0Es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