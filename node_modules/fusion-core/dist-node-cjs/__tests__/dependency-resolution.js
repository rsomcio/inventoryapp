"use strict";

var _serverApp = _interopRequireDefault(require("../server-app"));
var _createPlugin = require("../create-plugin");
var _createToken = require("../create-token");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-env node */

const App = false ? ClientAppFactory() : (0, _serverApp.default)();
const TokenA = (0, _createToken.createToken)('TokenA');
const TokenB = (0, _createToken.createToken)('TokenB');
const TokenC = (0, _createToken.createToken)('TokenC');
const TokenD = (0, _createToken.createToken)('TokenD');
const TokenEAsNullable = (0, _createToken.createToken)('TokenEAsNullable');
const TokenString = (0, _createToken.createToken)('TokenString');
const TokenNumber = (0, _createToken.createToken)('TokenNumber');
test('dependency registration', () => {
  const app = new App('el', el => el);
  expect(app).toBeTruthy();
  const counters = {
    a: 0,
    b: 0,
    c: 0,
    d: 0
  };
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      counters.a++;
      expect(counters.a).toBe(1);
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      counters.b++;
      expect(deps.a.a).toBe('PluginA');
      expect(counters.b).toBe(1);
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: deps => {
      counters.c++;
      expect(deps.a.a).toBe('PluginA');
      expect(deps.b.b).toBe('PluginB');
      expect(counters.c).toBe(1);
      return {
        c: 'PluginC'
      };
    }
  });
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  app.register(TokenC, PluginC);
  app.register((0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB,
      c: TokenC
    },
    provides: deps => {
      counters.d++;
      expect(deps.a.a).toBe('PluginA');
      expect(deps.b.b).toBe('PluginB');
      expect(deps.c.c).toBe('PluginC');
    }
  }));
  expect(counters.a).toBe(0);
  expect(counters.b).toBe(0);
  expect(counters.c).toBe(0);
  expect(counters.d).toBe(0);
  app.resolve();
  expect(counters.a).toBe(1);
  expect(counters.b).toBe(1);
  expect(counters.c).toBe(1);
  expect(counters.d).toBe(1);
});
test('dependency registration with aliases', () => {
  const app = new App('el', el => el);
  expect(app).toBeTruthy();
  const counters = {
    a: 0,
    b: 0,
    c: 0,
    d: 0
  };
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      counters.a++;
      expect(counters.a).toBe(1);
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      counters.b++;
      expect(deps.a.a).toBe('PluginA');
      expect(counters.b).toBe(1);
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: deps => {
      counters.c++;
      expect(deps.a.a).toBe('PluginA');
      expect(deps.b.b).toBe('PluginD');
      expect(counters.c).toBe(1);
      return {
        c: 'PluginC'
      };
    }
  });
  const PluginD = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      counters.d++;
      expect(deps.a.a).toBe('PluginA');
      expect(counters.d).toBe(1);
      return {
        b: 'PluginD'
      };
    }
  });
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  app.register(TokenC, PluginC).alias(TokenB, TokenD);
  app.register(TokenD, PluginD);
  expect(counters.a).toBe(0);
  expect(counters.b).toBe(0);
  expect(counters.c).toBe(0);
  expect(counters.d).toBe(0);
  app.resolve();
  expect(counters.a).toBe(1);
  expect(counters.b).toBe(1);
  expect(counters.c).toBe(1);
  expect(counters.d).toBe(1);
});
test('optional dependency registration with aliases', () => {
  const app = new App('el', el => el);
  expect(app).toBeTruthy();
  const counters = {
    a: 0,
    b: 0,
    c: 0,
    d: 0
  };
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      counters.a++;
      expect(counters.a).toBe(1);
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      counters.b++;
      expect(deps.a.a).toBe('PluginA');
      expect(counters.b).toBe(1);
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB.optional
    },
    provides: deps => {
      counters.c++;
      expect(deps.a.a).toBe('PluginA');
      expect(deps.b && deps.b.b).toBe('PluginD');
      expect(counters.c).toBe(1);
      return {
        c: 'PluginC'
      };
    }
  });
  const PluginD = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      counters.d++;
      expect(deps.a.a).toBe('PluginA');
      expect(counters.d).toBe(1);
      return {
        b: 'PluginD'
      };
    }
  });
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  app.register(TokenC, PluginC).alias(TokenB, TokenD);
  app.register(TokenD, PluginD);
  expect(counters.a).toBe(0);
  expect(counters.b).toBe(0);
  expect(counters.c).toBe(0);
  expect(counters.d).toBe(0);
  app.resolve();
  expect(counters.a).toBe(1);
  expect(counters.b).toBe(1);
  expect(counters.c).toBe(1);
  expect(counters.d).toBe(1);
});
test('dependency registration with aliasing non-plugins', () => {
  const app = new App('el', el => el);
  expect(app).toBeTruthy();
  const counters = {
    a: 0,
    b: 0,
    c: 0,
    d: 0
  };
  const ValueA = 'some-value';
  const AliasedValue = 'some-aliased-value';
  const ValueTokenA = (0, _createToken.createToken)('ValueA');
  const AliasedTokenA = (0, _createToken.createToken)('AliasedTokenA');
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: ValueTokenA
    },
    provides: deps => {
      counters.b++;
      expect(deps.a).toBe('some-value');
      expect(counters.b).toBe(1);
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: ValueTokenA
    },
    provides: deps => {
      counters.c++;
      expect(deps.a).toBe('some-aliased-value');
      expect(counters.c).toBe(1);
      return {
        c: 'PluginC'
      };
    }
  });
  app.register(ValueTokenA, ValueA);
  app.register(TokenB, PluginB);
  app.register(TokenC, PluginC).alias(ValueTokenA, AliasedTokenA);
  app.register(AliasedTokenA, AliasedValue);
  expect(counters.b).toBe(0);
  expect(counters.c).toBe(0);
  app.resolve();
  expect(counters.b).toBe(1);
  expect(counters.c).toBe(1);
});
test('dependency registration with no token', () => {
  const app = new App('el', el => el);
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      expect(deps.a.a).toBe('PluginA');
      return {
        b: 'PluginB'
      };
    }
  });
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  app.register((0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: deps => {
      expect(deps.a.a).toBe('PluginA');
      expect(deps.b.b).toBe('PluginB');
    }
  }));
  app.resolve();
});
test('dependency registration with middleware', () => {
  const counters = {
    a: 0,
    b: 0,
    c: 0,
    d: 0
  };
  const app = new App('el', el => el);
  expect(app).toBeTruthy();
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      counters.a++;
      expect(counters.a).toBe(1);
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA
    },
    provides: deps => {
      counters.b++;
      expect(deps.a.a).toBe('PluginA');
      expect(counters.b).toBe(1);
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: deps => {
      counters.c++;
      expect(deps.a.a).toBe('PluginA');
      expect(deps.b.b).toBe('PluginB');
      expect(counters.c).toBe(1);
      return {
        c: 'PluginC'
      };
    },
    middleware: () => (ctx, next) => next()
  });
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  app.register(TokenC, PluginC);
  expect(counters.a).toBe(0);
  expect(counters.b).toBe(0);
  expect(counters.c).toBe(0);
  app.resolve();
  expect(counters.a).toBe(1);
  expect(counters.b).toBe(1);
  expect(counters.c).toBe(1);
});
test('dependency registration with missing dependency', () => {
  const app = new App('el', el => el);
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: () => {
      return {
        c: 'PluginC'
      };
    }
  });
  app.register(TokenA, PluginA);
  app.register(TokenC, PluginC);
  expect(() => app.resolve()).toThrow();
});
test('dependency registration with missing dependency and multiple dependent plugins', () => {
  const app = new App('el', el => el);
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      return {
        a: 'PluginA'
      };
    }
  });
  const OtherPlugin = (0, _createPlugin.createPlugin)({
    deps: {
      b: TokenB.optional
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: () => {
      return {
        c: 'PluginC'
      };
    }
  });
  app.register(OtherPlugin);
  app.register(TokenA, PluginA);
  app.register(TokenC, PluginC);
  expect(() => app.resolve()).toThrow();
});
test('dependency registration with null value', () => {
  const app = new App('el', el => el);
  expect(() => {
    const PluginC = (0, _createPlugin.createPlugin)({
      deps: {
        optionalNull: TokenEAsNullable
      },
      provides: deps => {
        expect(deps.optionalNull).toBe(null);
      }
    });
    app.register(TokenEAsNullable, null);
    app.register(PluginC);
    app.resolve();
  }).not.toThrow();
  expect(() => {
    const app = new App('el', el => el);
    app.register(TokenString, null);
    app.middleware({
      something: TokenString
    }, ({
      something
    }) => {
      expect(something).toBe(null);
      return (ctx, next) => next();
    });
    app.resolve();
  }).not.toThrow();
});
test('dependency registration with optional deps', () => {
  const app = new App('el', el => el);
  const checkString = s => {
    expect(s).toBe('hello');
  };
  const checkNumUndefined = n => {
    expect(n).toBe(undefined);
  };
  const PluginA = (0, _createPlugin.createPlugin)({
    deps: {
      str: TokenString,
      numOpt: TokenNumber.optional
    },
    provides: ({
      str,
      numOpt
    }) => {
      checkString(str);
      checkNumUndefined(numOpt);
      return {
        a: 'Hello'
      };
    }
  });
  app.register(TokenString, 'hello');
  app.register(PluginA);
  app.resolve();
});
test('dependency registration with missing deep tree dependency', () => {
  const app = new App('el', el => el);
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      return {
        a: 'PluginA'
      };
    }
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      d: (0, _createToken.createToken)('RANDOM-TOKEN')
    },
    provides: () => {
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      a: TokenA,
      b: TokenB
    },
    provides: () => {
      return {
        c: 'PluginC'
      };
    }
  });
  app.register(TokenC, PluginC);
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  expect(() => app.resolve()).toThrow();
});
test('dependency registration with circular dependency', () => {
  const app = new App('el', el => el);
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      c: TokenC
    },
    provides: () => {
      return {
        b: 'PluginB'
      };
    }
  });
  const PluginC = (0, _createPlugin.createPlugin)({
    deps: {
      b: TokenB
    },
    provides: () => {
      return {
        c: 'PluginC'
      };
    }
  });
  app.register(TokenB, PluginB);
  app.register(TokenC, PluginC);
  expect(() => app.resolve()).toThrow();
});
test('dependency configuration with missing deps', () => {
  const ParentToken = (0, _createToken.createToken)('parent-token');
  const StringToken = (0, _createToken.createToken)('string-token');
  const OtherStringToken = (0, _createToken.createToken)('other-string-token');
  const app = new App('el', el => el);
  const provides = jest.fn();
  app.register(ParentToken, (0, _createPlugin.createPlugin)({
    deps: {
      a: StringToken,
      b: OtherStringToken
    },
    provides
  }));
  app.register(StringToken, 'string-a');
  expect(() => app.resolve()).toThrow(/Missing registration for token other-string-token. This is a dependency of plugin registered @/);
  expect(provides).not.toHaveBeenCalled();
});
test('error message when dependent plugin does not have token', () => {
  const StringToken = (0, _createToken.createToken)('string-token');
  const OtherStringToken = (0, _createToken.createToken)('other-string-token');
  const app = new App('el', el => el);
  const provides = jest.fn();
  app.register((0, _createPlugin.createPlugin)({
    deps: {
      a: StringToken,
      b: OtherStringToken
    },
    provides
  }));
  app.register(StringToken, 'string-a');
  expect(() => app.resolve()).toThrow(/Missing registration for token other-string-token. This is a dependency of plugin registered @/);
  expect(provides).not.toHaveBeenCalled();
});
test('Missing token errors reasonably', () => {
  const app = new App('el', el => el);
  // @ts-expect-error
  expect(() => app.register('some-value')).toThrow(/Cannot register some-value/);
  const BrowserPlugin = null; // idiomatic browser plugin implementation for server-only plugin is `export default null`;
  expect(() => app.register(BrowserPlugin)).toThrow(/Cannot register null/);
});
test('retrieve dependency', () => {
  const app = new App('el', el => el);
  const TokenA = (0, _createToken.createToken)('a');
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      return {
        a: 'Hello'
      };
    }
  });
  app.register(TokenA, PluginA);
  app.resolve();
  expect(app.getService(TokenA).a).toBe('Hello');
});
test('retrieve unresolved dependency', () => {
  const app = new App('el', el => el);
  const TokenA = (0, _createToken.createToken)('a');
  const PluginA = (0, _createPlugin.createPlugin)({
    provides: () => {
      return {
        a: 'Hello'
      };
    }
  });
  app.register(TokenA, PluginA);
  expect(() => app.getService(TokenA)).toThrow(/Cannot get service from unresolved app/);
});
test('cycle error', () => {
  const app = new App('el', el => el);
  const TokenA = (0, _createToken.createToken)('TokenA');
  const TokenB = (0, _createToken.createToken)('TokenB');
  const PluginA = (0, _createPlugin.createPlugin)({
    deps: {
      B: TokenB
    },
    provides: () => {}
  });
  const PluginB = (0, _createPlugin.createPlugin)({
    deps: {
      A: TokenA
    },
    provides: () => {}
  });
  app.register(TokenA, PluginA);
  app.register(TokenB, PluginB);
  try {
    app.resolve();
  } catch (e) {
    // Make path deterministic
    let message = e.message.split(__dirname).join('/root').replace(new RegExp(/◀(─)*╯/g), '◀───────────────╯');

    // Needed to make snapshots deterministic
    // eslint-disable-next-line jest/no-try-expect
    expect(message).toMatchInlineSnapshot(`
      "Error: Plugin dependency graph must not have cycles.
      ┌─▶ Registration @ /root/dependency-resolution.ts:744:7 ──╮
      │╭─── depends on token TokenA provided by ◀───────────────╯
      │╰▶ Registration @ /root/dependency-resolution.ts:743:7 ──╮
      ╰──── depends on token TokenB provided by ◀───────────────╯
      "
    `);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,