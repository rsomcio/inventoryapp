"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _createPlugin = require("./create-plugin");
var _createToken = require("./create-token");
var _tokens = require("./tokens");
var _ssr = require("./plugins/ssr");
var _routeTags = _interopRequireDefault(require("./plugins/route-tags"));
var _stackTrace = require("./stack-trace");
var _core = require("./core");
var _legacyCompat = require("./legacy-compat");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-disable require-yield */

class BaseApp extends _core.App {
  constructor(el, render) {
    super();
    this.registered = new Map(); // getTokenRef(token) -> {value, aliases, enhancers}
    this.plugins = []; // Token
    el && this.register(_tokens.ElementToken, el);
    if (render) {
      this.renderer = render;
    }
    this.register(_tokens.SSRDeciderToken, _ssr.SSRDecider);
    this.register(_tokens.RouteTagsToken, _routeTags.default);
    this.done = false;
  }

  // eslint-disable-next-line

  register(tokenOrValue, maybeValue) {
    const hasToken = tokenOrValue instanceof _createToken.TokenImpl;
    const token = hasToken ? tokenOrValue : (0, _createToken.createToken)('UnnamedPlugin');
    const value = hasToken ? maybeValue : tokenOrValue;
    if (!hasToken && (value == null || !(0, _createPlugin.getPluginFn)(value))) {
      throw new _stackTrace.DIError({
        message: process.env.NODE_ENV !== "production" ? `Cannot register ${String(tokenOrValue)} without a token. Did you accidentally register a ${true ? 'browser' : 'server'} plugin on the ${true ? 'server' : 'browser'}?` : 'Invalid configuration registration',
        errorDoc: 'value-without-token',
        caller: this.register
      });
    }
    // the renderer is a special case, since it needs to be always run last
    if (token === _tokens.RenderToken) {
      this.renderer = value;
      const alias = () => {
        throw new _stackTrace.DIError({
          message: 'Aliasing for RenderToken not supported',
          caller: alias
        });
      };
      return {
        alias
      };
    }
    token.stacks.push({
      type: 'register',
      stack: (0, _stackTrace.captureStackTrace)(this.register)
    });
    if (value && value.__plugin__) {
      token.stacks.push({
        type: 'plugin',
        stack: value.stack
      });
    }
    return this._register(token, value);
  }
  _register(token, value) {
    const foundPluginFn = (0, _createPlugin.getPluginFn)(value);

    // const registerResult = super.registerPlugin(token, value);

    const registerResult = super.registerPlugin(token, foundPluginFn ? foundPluginFn : (0, _createPlugin.declarePlugin)(function* () {
      return value;
    }));

    // getPluginFn(valaue)
    //   ? super.registerPlugin(token, value.__fn__)
    //   : super.registerPlugin(
    //       token,
    //       declarePlugin(function* () {
    //         return value;
    //       })
    //     );

    // For introspect plugin
    const {
      aliases,
      enhancers
    } = this.registered.get((0, _createToken.getTokenRef)(token)) || {
      aliases: new Map(),
      enhancers: []
    };
    this.registered.set((0, _createToken.getTokenRef)(token), {
      value,
      aliases,
      enhancers,
      token
    });
    const alias = (sourceToken, destToken) => {
      registerResult.alias(sourceToken, destToken);
      const stack = (0, _stackTrace.captureStackTrace)(alias);
      sourceToken.stacks.push({
        type: 'alias-from',
        stack
      });
      destToken.stacks.push({
        type: 'alias-to',
        stack
      });
      return {
        alias
      };
    };
    return {
      alias
    };
  }
  middleware(deps, middleware) {
    if (middleware === undefined) {
      middleware = () => deps;
    }
    this.register((0, _createPlugin.createPlugin)({
      deps: deps,
      middleware
    }));
  }
  enhance(token, enhancer) {
    token.stacks.push({
      type: 'enhance',
      stack: (0, _stackTrace.captureStackTrace)(this.enhance)
    });

    // For introspect plugin
    const {
      value,
      aliases,
      enhancers
    } = this.registered.get((0, _createToken.getTokenRef)(token)) || {
      aliases: new Map(),
      enhancers: [],
      value: undefined
    };
    if (enhancers && Array.isArray(enhancers)) {
      // @ts-ignore (Remove once references are used)
      enhancers.push(enhancer);
    }
    this.registered.set((0, _createToken.getTokenRef)(token), {
      value,
      aliases,
      enhancers,
      token
    });
    return super.enhance(token, enhancer);
  }
  cleanup() {
    return Promise.all(this.cleanups.map(fn => fn()));
  }
  resolve() {
    if (!this.renderer) {
      throw new Error('Missing registration for RenderToken');
    }
    this._register(_tokens.RenderToken, this.renderer);
    if (this.registeredTokens.has((0, _createToken.getTokenRef)(_tokens.EnableMiddlewareTimingToken))) {
      this.enableMiddlewareTiming = true;
    }

    // Note that core init actually returns a promise.
    // However, core init will synchronously complete as long as there is no
    // async tasks. The only planned async hook is withStartup(), which is not
    // currently implemented. Introducing async startup is technically a
    // breaking change, which we are avoiding initially. When we want to make
    // this breaking change and introduce withStartup(), we should add an await
    // to the statement below
    super.init();
    (0, _legacyCompat.sortLegacy)(this); // Preserve legacy order for compatibility

    this.done = true;
  }

  // @ts-ignore (Remove once references are used)
  getService(token) {
    if (!this.done) {
      throw new _stackTrace.DIError({
        message: 'Cannot get service from unresolved app',
        caller: this.getService
      });
    }
    const result = (0, _core.getResolvedDep)(this, token);
    if (result.resolved) {
      return result.value;
    }
  }
  callback(...args) {}
}
var _default = BaseApp;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,