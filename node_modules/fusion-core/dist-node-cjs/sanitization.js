"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unescape = exports.html = exports.escape = exports.dangerouslySetHTML = exports.consumeSanitizedHTML = void 0;
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
/*
We never want developers to be able to write `ctx.template.body.push(`<div>${stuff}</div>`)`
because that allows XSS attacks by default (e.g. if stuff === '<script>alert(1)</script>')
Instead, they should use html`<div>{stuff}</div>` so interpolated data gets automatically escaped
We trust the markup outside of interpolation because it's code written by a developer with commit permissions,
which can be audited via code reviews
*/

// eslint-disable-next-line import/no-mutable-exports
let html, dangerouslySetHTML, consumeSanitizedHTML, escape;
exports.escape = escape;
exports.consumeSanitizedHTML = consumeSanitizedHTML;
exports.dangerouslySetHTML = dangerouslySetHTML;
exports.html = html;
if (true) {
  const forbiddenChars = {
    '<': '\\u003C',
    '>': '\\u003E',
    '"': '\\u0022',
    '&': '\\u0026',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
  };
  const replaceForbidden = c => forbiddenChars[c];
  const key = Symbol('sanitized html');
  const inspect = Symbol.for('nodejs.util.inspect.custom');
  exports.html = html = ([head, ...rest], ...values) => {
    const obj = {};
    Object.defineProperty(obj, inspect, {
      value: function inspectHtml() {
        return consumeSanitizedHTML(this);
      }
    });
    Object.defineProperty(obj, key, {
      enumerable: false,
      configurable: false,
      value: head + values.map((s, i) => escape(s) + rest[i]).join('')
    });
    return obj;
  };
  exports.dangerouslySetHTML = dangerouslySetHTML = str => html(
  // @ts-expect-error not a template string array, but implementation allows that as well
  [str]);
  exports.escape = escape = str => {
    if (str && str[key] !== undefined) return consumeSanitizedHTML(str);
    return String(str).replace(/[<>&"\u2028\u2029]/g, replaceForbidden);
  };
  exports.consumeSanitizedHTML = consumeSanitizedHTML = h => {
    if (typeof h === 'string') {
      throw new Error(`Unsanitized html. Use html\`${h}\``);
    }
    return h[key];
  };
}
const replaceEscaped = c => String.fromCodePoint(parseInt(c.slice(2), 16));
const unescape = str => {
  return str.replace(/\\u003C|\\u003E|\\u0022|\\u002F|\\u2028|\\u2029|\\u0026/g, replaceEscaped);
};
exports.unescape = unescape;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodG1sIiwiZGFuZ2Vyb3VzbHlTZXRIVE1MIiwiY29uc3VtZVNhbml0aXplZEhUTUwiLCJlc2NhcGUiLCJmb3JiaWRkZW5DaGFycyIsInJlcGxhY2VGb3JiaWRkZW4iLCJjIiwia2V5IiwiU3ltYm9sIiwiaW5zcGVjdCIsImZvciIsImhlYWQiLCJyZXN0IiwidmFsdWVzIiwib2JqIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImluc3BlY3RIdG1sIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1hcCIsInMiLCJpIiwiam9pbiIsInN0ciIsInVuZGVmaW5lZCIsIlN0cmluZyIsInJlcGxhY2UiLCJoIiwiRXJyb3IiLCJyZXBsYWNlRXNjYXBlZCIsImZyb21Db2RlUG9pbnQiLCJwYXJzZUludCIsInNsaWNlIiwidW5lc2NhcGUiXSwic291cmNlcyI6WyJzcmMvc2FuaXRpemF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbi8qXG5XZSBuZXZlciB3YW50IGRldmVsb3BlcnMgdG8gYmUgYWJsZSB0byB3cml0ZSBgY3R4LnRlbXBsYXRlLmJvZHkucHVzaChgPGRpdj4ke3N0dWZmfTwvZGl2PmApYFxuYmVjYXVzZSB0aGF0IGFsbG93cyBYU1MgYXR0YWNrcyBieSBkZWZhdWx0IChlLmcuIGlmIHN0dWZmID09PSAnPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PicpXG5JbnN0ZWFkLCB0aGV5IHNob3VsZCB1c2UgaHRtbGA8ZGl2PntzdHVmZn08L2Rpdj5gIHNvIGludGVycG9sYXRlZCBkYXRhIGdldHMgYXV0b21hdGljYWxseSBlc2NhcGVkXG5XZSB0cnVzdCB0aGUgbWFya3VwIG91dHNpZGUgb2YgaW50ZXJwb2xhdGlvbiBiZWNhdXNlIGl0J3MgY29kZSB3cml0dGVuIGJ5IGEgZGV2ZWxvcGVyIHdpdGggY29tbWl0IHBlcm1pc3Npb25zLFxud2hpY2ggY2FuIGJlIGF1ZGl0ZWQgdmlhIGNvZGUgcmV2aWV3c1xuKi9cblxuaW1wb3J0IHR5cGUge1Nhbml0aXplZEhUTUxXcmFwcGVyfSBmcm9tICcuL3R5cGVzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcbmxldCBodG1sOiAoXG4gICAgc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksXG4gICAgLi4uZXhwcmVzc2lvbnM6IEFycmF5PHN0cmluZz5cbiAgKSA9PiBTYW5pdGl6ZWRIVE1MV3JhcHBlcixcbiAgZGFuZ2Vyb3VzbHlTZXRIVE1MOiAoaHRtbDogc3RyaW5nKSA9PiBhbnksXG4gIGNvbnN1bWVTYW5pdGl6ZWRIVE1MOiAoaDogU2FuaXRpemVkSFRNTFdyYXBwZXIpID0+IHN0cmluZyxcbiAgZXNjYXBlOiAoc3RyOiBzdHJpbmcpID0+IHN0cmluZztcbmlmIChfX05PREVfXykge1xuICBjb25zdCBmb3JiaWRkZW5DaGFycyA9IHtcbiAgICAnPCc6ICdcXFxcdTAwM0MnLFxuICAgICc+JzogJ1xcXFx1MDAzRScsXG4gICAgJ1wiJzogJ1xcXFx1MDAyMicsXG4gICAgJyYnOiAnXFxcXHUwMDI2JyxcbiAgICAnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOScsXG4gIH07XG4gIGNvbnN0IHJlcGxhY2VGb3JiaWRkZW4gPSAoYykgPT4gZm9yYmlkZGVuQ2hhcnNbY107XG5cbiAgY29uc3Qga2V5ID0gU3ltYm9sKCdzYW5pdGl6ZWQgaHRtbCcpO1xuICBjb25zdCBpbnNwZWN0ID0gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKTtcbiAgaHRtbCA9IChcbiAgICBbaGVhZCwgLi4ucmVzdF06IFRlbXBsYXRlU3RyaW5nc0FycmF5LFxuICAgIC4uLnZhbHVlczogQXJyYXk8c3RyaW5nPlxuICApOiBTYW5pdGl6ZWRIVE1MV3JhcHBlciA9PiB7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgaW5zcGVjdCwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3BlY3RIdG1sKCkge1xuICAgICAgICByZXR1cm4gY29uc3VtZVNhbml0aXplZEhUTUwodGhpcyk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGhlYWQgKyB2YWx1ZXMubWFwKChzLCBpKSA9PiBlc2NhcGUocykgKyByZXN0W2ldKS5qb2luKCcnKSxcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuICBkYW5nZXJvdXNseVNldEhUTUwgPSAoc3RyOiBzdHJpbmcpOiBhbnkgPT5cbiAgICBodG1sKFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3QgYSB0ZW1wbGF0ZSBzdHJpbmcgYXJyYXksIGJ1dCBpbXBsZW1lbnRhdGlvbiBhbGxvd3MgdGhhdCBhcyB3ZWxsXG4gICAgICBbc3RyXVxuICAgICk7XG4gIGVzY2FwZSA9IChzdHI6IGFueSk6IHN0cmluZyA9PiB7XG4gICAgaWYgKHN0ciAmJiBzdHJba2V5XSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gY29uc3VtZVNhbml0aXplZEhUTUwoc3RyKTtcbiAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvWzw+JlwiXFx1MjAyOFxcdTIwMjldL2csIHJlcGxhY2VGb3JiaWRkZW4pO1xuICB9O1xuICBjb25zdW1lU2FuaXRpemVkSFRNTCA9IChoOiBTYW5pdGl6ZWRIVE1MV3JhcHBlcik6IHN0cmluZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBoID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnNhbml0aXplZCBodG1sLiBVc2UgaHRtbFxcYCR7aH1cXGBgKTtcbiAgICB9XG4gICAgcmV0dXJuIGhba2V5XTtcbiAgfTtcbn1cbmNvbnN0IHJlcGxhY2VFc2NhcGVkID0gKGMpID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KGMuc2xpY2UoMiksIDE2KSk7XG5jb25zdCB1bmVzY2FwZSA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZShcbiAgICAvXFxcXHUwMDNDfFxcXFx1MDAzRXxcXFxcdTAwMjJ8XFxcXHUwMDJGfFxcXFx1MjAyOHxcXFxcdTIwMjl8XFxcXHUwMDI2L2csXG4gICAgcmVwbGFjZUVzY2FwZWRcbiAgKTtcbn07XG5cbmV4cG9ydCB7aHRtbCwgZGFuZ2Vyb3VzbHlTZXRIVE1MLCBjb25zdW1lU2FuaXRpemVkSFRNTCwgZXNjYXBlLCB1bmVzY2FwZX07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0EsSUFBSUEsSUFHdUIsRUFDekJDLGtCQUF5QyxFQUN6Q0Msb0JBQXlELEVBQ3pEQyxNQUErQjtBQUFDO0FBQUE7QUFBQTtBQUFBO0FBQ2xDLFVBQWM7RUFDWixNQUFNQyxjQUFjLEdBQUc7SUFDckIsR0FBRyxFQUFFLFNBQVM7SUFDZCxHQUFHLEVBQUUsU0FBUztJQUNkLEdBQUcsRUFBRSxTQUFTO0lBQ2QsR0FBRyxFQUFFLFNBQVM7SUFDZCxRQUFRLEVBQUUsU0FBUztJQUNuQixRQUFRLEVBQUU7RUFDWixDQUFDO0VBQ0QsTUFBTUMsZ0JBQWdCLEdBQUlDLENBQUMsSUFBS0YsY0FBYyxDQUFDRSxDQUFDLENBQUM7RUFFakQsTUFBTUMsR0FBRyxHQUFHQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7RUFDcEMsTUFBTUMsT0FBTyxHQUFHRCxNQUFNLENBQUNFLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQztFQUN4RCxlQUFBVixJQUFJLEdBQUcsQ0FDTCxDQUFDVyxJQUFJLEVBQUUsR0FBR0MsSUFBSSxDQUF1QixFQUNyQyxHQUFHQyxNQUFxQixLQUNDO0lBQ3pCLE1BQU1DLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDZEMsTUFBTSxDQUFDQyxjQUFjLENBQUNGLEdBQUcsRUFBRUwsT0FBTyxFQUFFO01BQ2xDUSxLQUFLLEVBQUUsU0FBU0MsV0FBVyxHQUFHO1FBQzVCLE9BQU9oQixvQkFBb0IsQ0FBQyxJQUFJLENBQUM7TUFDbkM7SUFDRixDQUFDLENBQUM7SUFDRmEsTUFBTSxDQUFDQyxjQUFjLENBQUNGLEdBQUcsRUFBRVAsR0FBRyxFQUFFO01BQzlCWSxVQUFVLEVBQUUsS0FBSztNQUNqQkMsWUFBWSxFQUFFLEtBQUs7TUFDbkJILEtBQUssRUFBRU4sSUFBSSxHQUFHRSxNQUFNLENBQUNRLEdBQUcsQ0FBQyxDQUFDQyxDQUFDLEVBQUVDLENBQUMsS0FBS3BCLE1BQU0sQ0FBQ21CLENBQUMsQ0FBQyxHQUFHVixJQUFJLENBQUNXLENBQUMsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxFQUFFO0lBQ2pFLENBQUMsQ0FBQztJQUNGLE9BQU9WLEdBQUc7RUFDWixDQUFDO0VBQ0QsNkJBQUFiLGtCQUFrQixHQUFJd0IsR0FBVyxJQUMvQnpCLElBQUk7RUFDRjtFQUNBLENBQUN5QixHQUFHLENBQUMsQ0FDTjtFQUNILGlCQUFBdEIsTUFBTSxHQUFJc0IsR0FBUSxJQUFhO0lBQzdCLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDbEIsR0FBRyxDQUFDLEtBQUttQixTQUFTLEVBQUUsT0FBT3hCLG9CQUFvQixDQUFDdUIsR0FBRyxDQUFDO0lBQ25FLE9BQU9FLE1BQU0sQ0FBQ0YsR0FBRyxDQUFDLENBQUNHLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRXZCLGdCQUFnQixDQUFDO0VBQ3JFLENBQUM7RUFDRCwrQkFBQUgsb0JBQW9CLEdBQUkyQixDQUF1QixJQUFhO0lBQzFELElBQUksT0FBT0EsQ0FBQyxLQUFLLFFBQVEsRUFBRTtNQUN6QixNQUFNLElBQUlDLEtBQUssQ0FBRSwrQkFBOEJELENBQUUsSUFBRyxDQUFDO0lBQ3ZEO0lBQ0EsT0FBT0EsQ0FBQyxDQUFDdEIsR0FBRyxDQUFDO0VBQ2YsQ0FBQztBQUNIO0FBQ0EsTUFBTXdCLGNBQWMsR0FBSXpCLENBQUMsSUFBS3FCLE1BQU0sQ0FBQ0ssYUFBYSxDQUFDQyxRQUFRLENBQUMzQixDQUFDLENBQUM0QixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUUsTUFBTUMsUUFBUSxHQUFJVixHQUFXLElBQWE7RUFDeEMsT0FBT0EsR0FBRyxDQUFDRyxPQUFPLENBQ2hCLDBEQUEwRCxFQUMxREcsY0FBYyxDQUNmO0FBQ0gsQ0FBQztBQUFDIn0=