/// <reference types="node" />
/// <reference types="node" />
import { Middleware } from './types';
export default function (): {
    new (el: any, render: any): {
        _app: import('koa');
        endpoints: Map<string, Middleware>;
        resolve(): void;
        callback(): (req: import("http").IncomingMessage | import("http2").Http2ServerRequest, res: import("http").ServerResponse | import("http2").Http2ServerResponse) => void;
        registered: Map<any, {
            aliases?: Map<any, any>;
            enhancers?: any[];
            token: any;
            value?: import("./types").FusionPlugin<any, any>;
        }>;
        enhancerToToken: Map<any, any>;
        plugins: any[];
        renderer: any;
        _getService: (a: any) => any;
        _dependedOn: Set<any>;
        done: boolean;
        enableMiddlewareTiming: boolean;
        register<T>(tokenOrValue: import("./types").Token<T> | import("./types").FusionPlugin<any, T>, maybeValue?: T | import("./types").FusionPlugin<any, T>): import("./types").aliaser;
        _register<T_1>(token: import("./types").Token<T_1>, value: any): import("./types").aliaser;
        middleware<TDeps extends {} = {}>(deps: Middleware | TDeps, middleware?: (Deps: import("./types").ExtractDepsType<TDeps>) => Middleware): void;
        enhance<TResolved>(token: import("./types").Token<TResolved>, enhancer: Function): void;
        cleanup(): Promise<any>;
        getService<TResolved_1>(token: import("./types").Token<TResolved_1>): TResolved_1;
        taskMap: Map<any, any>;
        resolved: Map<any, any>;
        count: number;
        unresolvedAsyncCount: number;
        registeredTokens: Set<any>;
        enhancerChainRoots: Map<any, any>;
        enhancerChainTails: Map<any, any>;
        enhancerTokens: Map<any, any>;
        cleanups: import("./types").cleanupFn[];
        wrappers: any[];
        renderSetup: any[];
        universalValues: Object;
        prepareBoundary: {
            effects: any[];
            id: string;
            resolved: boolean;
            addEffect(effect: any): void;
            reset(): void;
            done(): void;
        };
        pending: Set<any>;
        activeTask: any;
        registerPlugin(id: any, taskFn: any, param?: any): {
            alias: (from: any, to: any) => void;
        };
        init(): Promise<unknown>;
        _setRef(): void;
        _clearRef(): void;
    };
};
//# sourceMappingURL=server-app.d.ts.map