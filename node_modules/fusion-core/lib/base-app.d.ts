/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { App as Core } from './core';
import type { aliaser, ExtractDepsType, FusionPlugin, Middleware, Token } from './types';
declare class BaseApp extends Core {
    constructor(el: any, render: any);
    registered: Map<any, {
        aliases?: Map<any, any>;
        enhancers?: Array<any>;
        token: any;
        value?: FusionPlugin<any, any>;
    }>;
    enhancerToToken: Map<any, any>;
    plugins: Array<any>;
    renderer: any;
    _getService: (a: any) => any;
    _dependedOn: Set<any>;
    done: boolean;
    enableMiddlewareTiming: boolean;
    register<T>(tokenOrValue: Token<T> | FusionPlugin<any, T>, maybeValue?: FusionPlugin<any, T> | T): aliaser;
    _register<T>(token: Token<T>, value: any): aliaser;
    middleware<TDeps extends {} = {}>(deps: TDeps | Middleware, middleware?: (Deps: ExtractDepsType<TDeps>) => Middleware): void;
    enhance<TResolved>(token: Token<TResolved>, enhancer: Function): void;
    cleanup(): Promise<any>;
    resolve(): void;
    getService<TResolved>(token: Token<TResolved>): TResolved;
    callback(...args: any[]): Promise<void> | any;
}
export default BaseApp;
//# sourceMappingURL=base-app.d.ts.map