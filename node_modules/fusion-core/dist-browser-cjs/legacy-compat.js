"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlugin = createPlugin;
exports.sortLegacy = sortLegacy;
var _core = require("./core");
var _createPlugin = require("./create-plugin");
var _createToken = require("./create-token");
function createPlugin(opts) {
  function* LegacyPlugin() {
    let resolvedDeps = {};
    const depKeys = opts.deps ? Object.keys(opts.deps) : [];
    if (depKeys.length) {
      const deps = yield (0, _core.withDeps)(depKeys.map(key => opts.deps[key]));
      deps.forEach((dep, i) => {
        resolvedDeps[depKeys[i]] = dep;
      });
    }
    let providedValue;
    if (opts.provides) {
      providedValue = opts.provides(resolvedDeps);
    }
    if (opts.middleware) {
      let legacyMiddleware = opts.middleware(resolvedDeps, providedValue);
      (0, _core.withUniversalMiddleware)(legacyMiddleware);
    }
    if (opts.cleanup && typeof opts.cleanup === 'function') {
      (0, _core.withCleanup)(() => {
        opts.cleanup(providedValue);
      });
    }
    return providedValue;
  }
  return (0, _createPlugin.declarePlugin)(LegacyPlugin);
}

// The core implementation yields a topological order of middleware, however
// it differs from the old implementation. In order to maintain compatibility
// with existing apps, we should sort this in the same way
function sortLegacy(app) {
  let legacySorted = [];
  const seen = new Set();
  function visit(task) {
    if (seen.has(task)) {
      return;
    }
    seen.add(task);
    let requested = new Set(task.requested);
    for (let t of app.taskMap.values()) {
      if (requested.has((0, _createToken.getTokenRef)(t.id))) {
        visit(t);
      }
    }
    if (task.child) {
      visit(task.child);
    }
    if (task.middleware) {
      // @ts-ignore (Remove once references are used)
      legacySorted.push(task.middleware);
    }
    if (app.enhancerChainTails.has((0, _createToken.getTokenRef)(task.id))) {
      visit(app.taskMap.get(app.enhancerChainTails.get((0, _createToken.getTokenRef)(task.id))));
    }
  }
  for (let task of app.taskMap.values()) {
    if (!app.enhancerTokens.has(task.id)) {
      visit(task);
    }
  }
  app.plugins = legacySorted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVQbHVnaW4iLCJvcHRzIiwiTGVnYWN5UGx1Z2luIiwicmVzb2x2ZWREZXBzIiwiZGVwS2V5cyIsImRlcHMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwid2l0aERlcHMiLCJtYXAiLCJrZXkiLCJmb3JFYWNoIiwiZGVwIiwiaSIsInByb3ZpZGVkVmFsdWUiLCJwcm92aWRlcyIsIm1pZGRsZXdhcmUiLCJsZWdhY3lNaWRkbGV3YXJlIiwid2l0aFVuaXZlcnNhbE1pZGRsZXdhcmUiLCJjbGVhbnVwIiwid2l0aENsZWFudXAiLCJkZWNsYXJlUGx1Z2luIiwic29ydExlZ2FjeSIsImFwcCIsImxlZ2FjeVNvcnRlZCIsInNlZW4iLCJTZXQiLCJ2aXNpdCIsInRhc2siLCJoYXMiLCJhZGQiLCJyZXF1ZXN0ZWQiLCJ0IiwidGFza01hcCIsInZhbHVlcyIsImdldFRva2VuUmVmIiwiaWQiLCJjaGlsZCIsInB1c2giLCJlbmhhbmNlckNoYWluVGFpbHMiLCJnZXQiLCJlbmhhbmNlclRva2VucyIsInBsdWdpbnMiXSwic291cmNlcyI6WyJzcmMvbGVnYWN5LWNvbXBhdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3dpdGhEZXBzLCB3aXRoVW5pdmVyc2FsTWlkZGxld2FyZSwgd2l0aENsZWFudXB9IGZyb20gJy4vY29yZSc7XG5pbXBvcnQge2RlY2xhcmVQbHVnaW59IGZyb20gJy4vY3JlYXRlLXBsdWdpbic7XG5cbmltcG9ydCB7Z2V0VG9rZW5SZWZ9IGZyb20gJy4vY3JlYXRlLXRva2VuJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBsdWdpbihvcHRzKSB7XG4gIGZ1bmN0aW9uKiBMZWdhY3lQbHVnaW4oKSB7XG4gICAgbGV0IHJlc29sdmVkRGVwcyA9IHt9O1xuICAgIGNvbnN0IGRlcEtleXMgPSBvcHRzLmRlcHMgPyBPYmplY3Qua2V5cyhvcHRzLmRlcHMpIDogW107XG4gICAgaWYgKGRlcEtleXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBkZXBzID0geWllbGQgd2l0aERlcHMoZGVwS2V5cy5tYXAoKGtleSkgPT4gb3B0cy5kZXBzW2tleV0pKTtcbiAgICAgIGRlcHMuZm9yRWFjaCgoZGVwLCBpKSA9PiB7XG4gICAgICAgIHJlc29sdmVkRGVwc1tkZXBLZXlzW2ldXSA9IGRlcDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcHJvdmlkZWRWYWx1ZTtcbiAgICBpZiAob3B0cy5wcm92aWRlcykge1xuICAgICAgcHJvdmlkZWRWYWx1ZSA9IG9wdHMucHJvdmlkZXMocmVzb2x2ZWREZXBzKTtcbiAgICB9XG4gICAgaWYgKG9wdHMubWlkZGxld2FyZSkge1xuICAgICAgbGV0IGxlZ2FjeU1pZGRsZXdhcmUgPSBvcHRzLm1pZGRsZXdhcmUocmVzb2x2ZWREZXBzLCBwcm92aWRlZFZhbHVlKTtcbiAgICAgIHdpdGhVbml2ZXJzYWxNaWRkbGV3YXJlKGxlZ2FjeU1pZGRsZXdhcmUpO1xuICAgIH1cbiAgICBpZiAob3B0cy5jbGVhbnVwICYmIHR5cGVvZiBvcHRzLmNsZWFudXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdpdGhDbGVhbnVwKCgpID0+IHtcbiAgICAgICAgb3B0cy5jbGVhbnVwKHByb3ZpZGVkVmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm92aWRlZFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGRlY2xhcmVQbHVnaW4oTGVnYWN5UGx1Z2luKTtcbn1cblxuLy8gVGhlIGNvcmUgaW1wbGVtZW50YXRpb24geWllbGRzIGEgdG9wb2xvZ2ljYWwgb3JkZXIgb2YgbWlkZGxld2FyZSwgaG93ZXZlclxuLy8gaXQgZGlmZmVycyBmcm9tIHRoZSBvbGQgaW1wbGVtZW50YXRpb24uIEluIG9yZGVyIHRvIG1haW50YWluIGNvbXBhdGliaWxpdHlcbi8vIHdpdGggZXhpc3RpbmcgYXBwcywgd2Ugc2hvdWxkIHNvcnQgdGhpcyBpbiB0aGUgc2FtZSB3YXlcbmV4cG9ydCBmdW5jdGlvbiBzb3J0TGVnYWN5KGFwcCkge1xuICBsZXQgbGVnYWN5U29ydGVkID0gW107XG5cbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgZnVuY3Rpb24gdmlzaXQodGFzaykge1xuICAgIGlmIChzZWVuLmhhcyh0YXNrKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWVuLmFkZCh0YXNrKTtcbiAgICBsZXQgcmVxdWVzdGVkID0gbmV3IFNldCh0YXNrLnJlcXVlc3RlZCk7XG4gICAgZm9yIChsZXQgdCBvZiBhcHAudGFza01hcC52YWx1ZXMoKSkge1xuICAgICAgaWYgKHJlcXVlc3RlZC5oYXMoZ2V0VG9rZW5SZWYodC5pZCkpKSB7XG4gICAgICAgIHZpc2l0KHQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFzay5jaGlsZCkge1xuICAgICAgdmlzaXQodGFzay5jaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKHRhc2subWlkZGxld2FyZSkge1xuICAgICAgLy8gQHRzLWlnbm9yZSAoUmVtb3ZlIG9uY2UgcmVmZXJlbmNlcyBhcmUgdXNlZClcbiAgICAgIGxlZ2FjeVNvcnRlZC5wdXNoKHRhc2subWlkZGxld2FyZSk7XG4gICAgfVxuXG4gICAgaWYgKGFwcC5lbmhhbmNlckNoYWluVGFpbHMuaGFzKGdldFRva2VuUmVmKHRhc2suaWQpKSkge1xuICAgICAgdmlzaXQoYXBwLnRhc2tNYXAuZ2V0KGFwcC5lbmhhbmNlckNoYWluVGFpbHMuZ2V0KGdldFRva2VuUmVmKHRhc2suaWQpKSkpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IHRhc2sgb2YgYXBwLnRhc2tNYXAudmFsdWVzKCkpIHtcbiAgICBpZiAoIWFwcC5lbmhhbmNlclRva2Vucy5oYXModGFzay5pZCkpIHtcbiAgICAgIHZpc2l0KHRhc2spO1xuICAgIH1cbiAgfVxuXG4gIGFwcC5wbHVnaW5zID0gbGVnYWN5U29ydGVkO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBRU8sU0FBU0EsWUFBWSxDQUFDQyxJQUFJLEVBQUU7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