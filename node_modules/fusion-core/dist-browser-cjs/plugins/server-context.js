"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = middleware;
var _v = _interopRequireDefault(require("uuid/v4"));
var _uaParserJs = _interopRequireDefault(require("ua-parser-js"));
var _getEnv = _interopRequireDefault(require("../get-env"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const envVars = (0, _getEnv.default)();
function middleware(ctx, next) {
  // env vars
  ctx.rootDir = envVars.rootDir;
  ctx.env = envVars.env;
  ctx.prefix = envVars.prefix;
  ctx.assetPath = envVars.assetPath;
  ctx.cdnUrl = envVars.cdnUrl;

  // webpack-related things
  ctx.preloadChunks = [];
  ctx.webpackPublicPath = ctx.webpackPublicPath || envVars.cdnUrl || envVars.assetPath;

  // these are set by fusion-cli, however since fusion-cli plugins are not added when
  // running simulation tests, it is good to default them here
  ctx.syncChunks = ctx.syncChunks || [];
  ctx.chunkUrlMap = ctx.chunkUrlMap || new Map();

  // fusion-specific things
  ctx.nonce = (0, _v.default)();
  ctx.useragent = new _uaParserJs.default(ctx.headers['user-agent']).getResult();
  ctx.element = null;
  ctx.rendered = null;
  ctx.postPrepareEffects = [];
  ctx.universalValues = {};
  return next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbnZWYXJzIiwiZ2V0RW52IiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJyb290RGlyIiwiZW52IiwicHJlZml4IiwiYXNzZXRQYXRoIiwiY2RuVXJsIiwicHJlbG9hZENodW5rcyIsIndlYnBhY2tQdWJsaWNQYXRoIiwic3luY0NodW5rcyIsImNodW5rVXJsTWFwIiwiTWFwIiwibm9uY2UiLCJ1dWlkdjQiLCJ1c2VyYWdlbnQiLCJVQVBhcnNlciIsImhlYWRlcnMiLCJnZXRSZXN1bHQiLCJlbGVtZW50IiwicmVuZGVyZWQiLCJwb3N0UHJlcGFyZUVmZmVjdHMiLCJ1bml2ZXJzYWxWYWx1ZXMiXSwic291cmNlcyI6WyJzcmMvcGx1Z2lucy9zZXJ2ZXItY29udGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB1dWlkdjQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQgVUFQYXJzZXIgZnJvbSAndWEtcGFyc2VyLWpzJztcbmltcG9ydCBnZXRFbnYgZnJvbSAnLi4vZ2V0LWVudic7XG5cbmltcG9ydCB0eXBlIHtDb250ZXh0fSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGVudlZhcnMgPSBnZXRFbnYoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlkZGxld2FyZShjdHg6IENvbnRleHQsIG5leHQ6ICgpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgLy8gZW52IHZhcnNcbiAgY3R4LnJvb3REaXIgPSBlbnZWYXJzLnJvb3REaXI7XG4gIGN0eC5lbnYgPSBlbnZWYXJzLmVudjtcbiAgY3R4LnByZWZpeCA9IGVudlZhcnMucHJlZml4O1xuICBjdHguYXNzZXRQYXRoID0gZW52VmFycy5hc3NldFBhdGg7XG4gIGN0eC5jZG5VcmwgPSBlbnZWYXJzLmNkblVybDtcblxuICAvLyB3ZWJwYWNrLXJlbGF0ZWQgdGhpbmdzXG4gIGN0eC5wcmVsb2FkQ2h1bmtzID0gW107XG4gIGN0eC53ZWJwYWNrUHVibGljUGF0aCA9XG4gICAgY3R4LndlYnBhY2tQdWJsaWNQYXRoIHx8IGVudlZhcnMuY2RuVXJsIHx8IGVudlZhcnMuYXNzZXRQYXRoO1xuXG4gIC8vIHRoZXNlIGFyZSBzZXQgYnkgZnVzaW9uLWNsaSwgaG93ZXZlciBzaW5jZSBmdXNpb24tY2xpIHBsdWdpbnMgYXJlIG5vdCBhZGRlZCB3aGVuXG4gIC8vIHJ1bm5pbmcgc2ltdWxhdGlvbiB0ZXN0cywgaXQgaXMgZ29vZCB0byBkZWZhdWx0IHRoZW0gaGVyZVxuICBjdHguc3luY0NodW5rcyA9IGN0eC5zeW5jQ2h1bmtzIHx8IFtdO1xuICBjdHguY2h1bmtVcmxNYXAgPSBjdHguY2h1bmtVcmxNYXAgfHwgbmV3IE1hcCgpO1xuXG4gIC8vIGZ1c2lvbi1zcGVjaWZpYyB0aGluZ3NcbiAgY3R4Lm5vbmNlID0gdXVpZHY0KCk7XG4gIGN0eC51c2VyYWdlbnQgPSBuZXcgVUFQYXJzZXIoY3R4LmhlYWRlcnNbJ3VzZXItYWdlbnQnXSkuZ2V0UmVzdWx0KCk7XG4gIGN0eC5lbGVtZW50ID0gbnVsbDtcbiAgY3R4LnJlbmRlcmVkID0gbnVsbDtcbiAgY3R4LnBvc3RQcmVwYXJlRWZmZWN0cyA9IFtdO1xuICBjdHgudW5pdmVyc2FsVmFsdWVzID0ge307XG5cbiAgcmV0dXJuIG5leHQoKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQWdDO0FBVGhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFRQSxNQUFNQSxPQUFPLEdBQUcsSUFBQUMsZUFBTSxHQUFFO0FBRVQsU0FBU0MsVUFBVSxDQUFDQyxHQUFZLEVBQUVDLElBQXlCLEVBQUU7RUFDMUU7RUFDQUQsR0FBRyxDQUFDRSxPQUFPLEdBQUdMLE9BQU8sQ0FBQ0ssT0FBTztFQUM3QkYsR0FBRyxDQUFDRyxHQUFHLEdBQUdOLE9BQU8sQ0FBQ00sR0FBRztFQUNyQkgsR0FBRyxDQUFDSSxNQUFNLEdBQUdQLE9BQU8sQ0FBQ08sTUFBTTtFQUMzQkosR0FBRyxDQUFDSyxTQUFTLEdBQUdSLE9BQU8sQ0FBQ1EsU0FBUztFQUNqQ0wsR0FBRyxDQUFDTSxNQUFNLEdBQUdULE9BQU8sQ0FBQ1MsTUFBTTs7RUFFM0I7RUFDQU4sR0FBRyxDQUFDTyxhQUFhLEdBQUcsRUFBRTtFQUN0QlAsR0FBRyxDQUFDUSxpQkFBaUIsR0FDbkJSLEdBQUcsQ0FBQ1EsaUJBQWlCLElBQUlYLE9BQU8sQ0FBQ1MsTUFBTSxJQUFJVCxPQUFPLENBQUNRLFNBQVM7O0VBRTlEO0VBQ0E7RUFDQUwsR0FBRyxDQUFDUyxVQUFVLEdBQUdULEdBQUcsQ0FBQ1MsVUFBVSxJQUFJLEVBQUU7RUFDckNULEdBQUcsQ0FBQ1UsV0FBVyxHQUFHVixHQUFHLENBQUNVLFdBQVcsSUFBSSxJQUFJQyxHQUFHLEVBQUU7O0VBRTlDO0VBQ0FYLEdBQUcsQ0FBQ1ksS0FBSyxHQUFHLElBQUFDLFVBQU0sR0FBRTtFQUNwQmIsR0FBRyxDQUFDYyxTQUFTLEdBQUcsSUFBSUMsbUJBQVEsQ0FBQ2YsR0FBRyxDQUFDZ0IsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNDLFNBQVMsRUFBRTtFQUNuRWpCLEdBQUcsQ0FBQ2tCLE9BQU8sR0FBRyxJQUFJO0VBQ2xCbEIsR0FBRyxDQUFDbUIsUUFBUSxHQUFHLElBQUk7RUFDbkJuQixHQUFHLENBQUNvQixrQkFBa0IsR0FBRyxFQUFFO0VBQzNCcEIsR0FBRyxDQUFDcUIsZUFBZSxHQUFHLENBQUMsQ0FBQztFQUV4QixPQUFPcEIsSUFBSSxFQUFFO0FBQ2YifQ==