"use strict";

var fs = _interopRequireWildcard(require("fs"));
var path = _interopRequireWildcard(require("path"));
var util = _interopRequireWildcard(require("util"));
var parser = _interopRequireWildcard(require("@babel/parser"));
var _traverse = _interopRequireDefault(require("@babel/traverse"));
var t = _interopRequireWildcard(require("@babel/types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const readDir = util.promisify(fs.readdir);
const readFile = util.promisify(fs.readFile);
test('DIErrors within fusion-core all correspond to markdown documents', async () => {
  const srcDir = path.resolve('src');
  const srcFiles = await recursiveReadDir(srcDir);
  const docReferences = [];
  const visitor = createDocumentVisitor(doc => docReferences.push(doc));
  for (const file of srcFiles) {
    if (path.extname(file) !== '.ts') continue;
    const code = await readFile(file, 'utf-8');
    const ast = parser.parse(code, {
      sourceType: 'module',
      plugins: ['typescript', 'classProperties']
    });
    (0, _traverse.default)(ast, visitor);
  }
  expect(docReferences.length).not.toBe(0);
  const markdownFiles = (await readDir('../errors')).map(file => file.replace(/\.md$/, ''));
  expect(markdownFiles.length).not.toBe(0);

  // Error docs will not be deleted when an error is obviated/removed, so
  // markdown files will always be a superset including current error references
  docReferences.forEach(docRef => {
    expect(markdownFiles).toContain(docRef);
  });
});
async function recursiveReadDir(dir) {
  const files = await readDir(dir, {
    withFileTypes: true
  });
  return [].concat(...(await Promise.all(files.map(file => {
    const resolved = path.resolve(dir, file.name);
    if (file.isDirectory()) {
      return recursiveReadDir(resolved);
    } else {
      return resolved;
    }
  }))));
}
function createDocumentVisitor(callback) {
  return {
    ImportDeclaration(path) {
      // import {DIError} from '../stack-trace.js';
      const DIError = path.node.specifiers.find(sp => {
        const importPath = path.node.source.value;
        return sp.imported && sp.imported.name === 'DIError' && /stack-trace/.test(importPath);
      });
      if (!DIError) return;
      const uses = path.scope.bindings[DIError.local.name].referencePaths;
      for (const usage of uses) {
        if (t.isNewExpression(usage.parent)) {
          if (!usage.parent.arguments || usage.parent.arguments.length !== 1 || !t.isObjectExpression(usage.parent.arguments[0])) {
            throw new Error('DIError invocation must have options object passed as only argument');
          }
          let doc = usage.parent.arguments[0].properties.find(prop => {
            // @ts-expect-error
            return prop.key.name === 'errorDoc';
          });
          if (!doc) {
            // Some errors won't have docs
            continue;
          }
          // @ts-expect-errors
          doc = doc.value;
          if (!t.isStringLiteral(doc)) {
            throw new Error('DIError document must be a string literal');
          }
          // @ts-expect-errors
          callback(doc.value);
        } else {
          throw new Error(`DIError must be invoked with 'new' operator`);
        }
      }
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,