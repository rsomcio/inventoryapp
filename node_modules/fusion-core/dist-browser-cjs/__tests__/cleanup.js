"use strict";

var _clientApp = _interopRequireDefault(require("../client-app"));
var _createPlugin = require("../create-plugin");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const App = true ? (0, _clientApp.default)() : ServerAppFactory();
test('app.cleanup with no cleanup plugins', async () => {
  const app = new App('el', el => el);
  app.register((0, _createPlugin.createPlugin)({
    provides: () => 'hello world',
    middleware: () => (ctx, next) => next()
  }));
  app.resolve();
  await app.cleanup();
  expect('cleans up ok').toBeTruthy();
});
test('app.cleanup with async cleanup plugins', async () => {
  const app = new App('el', el => el);
  let firstCleanupCalled = false;
  let nextCleanupCalled = false;
  app.register((0, _createPlugin.createPlugin)({
    provides: () => 'hello world',
    cleanup: p => {
      firstCleanupCalled = true;
      expect(p).toBe('hello world');
      return Promise.resolve();
    },
    middleware: () => (ctx, next) => next()
  }));
  app.register((0, _createPlugin.createPlugin)({
    provides: () => 'another test',
    cleanup: p => {
      nextCleanupCalled = true;
      expect(p).toBe('another test');
      return Promise.resolve();
    },
    middleware: () => (ctx, next) => next()
  }));
  app.resolve();
  expect(firstCleanupCalled).toBeFalsy();
  expect(nextCleanupCalled).toBeFalsy();
  await app.cleanup();
  expect(firstCleanupCalled).toBeTruthy();
  expect(nextCleanupCalled).toBeTruthy();
});
test('app.cleanup does not cleanup if cleanup was not given a function', async () => {
  const app = new App('el', el => el);
  app.register((0, _createPlugin.createPlugin)({
    provides: () => 'hello world',
    // @ts-expect-error - Ignore this to test branch
    cleanup: 'notafunc',
    middleware: () => (ctx, next) => next()
  }));
  app.resolve();
  await app.cleanup();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcHAiLCJDbGllbnRBcHBGYWN0b3J5IiwiU2VydmVyQXBwRmFjdG9yeSIsInRlc3QiLCJhcHAiLCJlbCIsInJlZ2lzdGVyIiwiY3JlYXRlUGx1Z2luIiwicHJvdmlkZXMiLCJtaWRkbGV3YXJlIiwiY3R4IiwibmV4dCIsInJlc29sdmUiLCJjbGVhbnVwIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImZpcnN0Q2xlYW51cENhbGxlZCIsIm5leHRDbGVhbnVwQ2FsbGVkIiwicCIsInRvQmUiLCJQcm9taXNlIiwidG9CZUZhbHN5Il0sInNvdXJjZXMiOlsic3JjL19fdGVzdHNfXy9jbGVhbnVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGllbnRBcHBGYWN0b3J5IGZyb20gJy4uL2NsaWVudC1hcHAnO1xuaW1wb3J0IFNlcnZlckFwcEZhY3RvcnkgZnJvbSAnLi4vc2VydmVyLWFwcCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbn0gZnJvbSAnLi4vY3JlYXRlLXBsdWdpbic7XG5cbmNvbnN0IEFwcCA9IF9fQlJPV1NFUl9fID8gQ2xpZW50QXBwRmFjdG9yeSgpIDogU2VydmVyQXBwRmFjdG9yeSgpO1xuXG50ZXN0KCdhcHAuY2xlYW51cCB3aXRoIG5vIGNsZWFudXAgcGx1Z2lucycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgnZWwnLCAoZWwpID0+IGVsKTtcbiAgYXBwLnJlZ2lzdGVyKFxuICAgIGNyZWF0ZVBsdWdpbih7XG4gICAgICBwcm92aWRlczogKCkgPT4gJ2hlbGxvIHdvcmxkJyxcbiAgICAgIG1pZGRsZXdhcmU6ICgpID0+IChjdHgsIG5leHQpID0+IG5leHQoKSxcbiAgICB9KVxuICApO1xuICBhcHAucmVzb2x2ZSgpO1xuICBhd2FpdCBhcHAuY2xlYW51cCgpO1xuICBleHBlY3QoJ2NsZWFucyB1cCBvaycpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG50ZXN0KCdhcHAuY2xlYW51cCB3aXRoIGFzeW5jIGNsZWFudXAgcGx1Z2lucycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgnZWwnLCAoZWwpID0+IGVsKTtcbiAgbGV0IGZpcnN0Q2xlYW51cENhbGxlZCA9IGZhbHNlO1xuICBsZXQgbmV4dENsZWFudXBDYWxsZWQgPSBmYWxzZTtcbiAgYXBwLnJlZ2lzdGVyKFxuICAgIGNyZWF0ZVBsdWdpbih7XG4gICAgICBwcm92aWRlczogKCkgPT4gJ2hlbGxvIHdvcmxkJyxcbiAgICAgIGNsZWFudXA6IChwKSA9PiB7XG4gICAgICAgIGZpcnN0Q2xlYW51cENhbGxlZCA9IHRydWU7XG4gICAgICAgIGV4cGVjdChwKS50b0JlKCdoZWxsbyB3b3JsZCcpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9LFxuICAgICAgbWlkZGxld2FyZTogKCkgPT4gKGN0eCwgbmV4dCkgPT4gbmV4dCgpLFxuICAgIH0pXG4gICk7XG4gIGFwcC5yZWdpc3RlcihcbiAgICBjcmVhdGVQbHVnaW4oe1xuICAgICAgcHJvdmlkZXM6ICgpID0+ICdhbm90aGVyIHRlc3QnLFxuICAgICAgY2xlYW51cDogKHApID0+IHtcbiAgICAgICAgbmV4dENsZWFudXBDYWxsZWQgPSB0cnVlO1xuICAgICAgICBleHBlY3QocCkudG9CZSgnYW5vdGhlciB0ZXN0Jyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH0sXG4gICAgICBtaWRkbGV3YXJlOiAoKSA9PiAoY3R4LCBuZXh0KSA9PiBuZXh0KCksXG4gICAgfSlcbiAgKTtcbiAgYXBwLnJlc29sdmUoKTtcbiAgZXhwZWN0KGZpcnN0Q2xlYW51cENhbGxlZCkudG9CZUZhbHN5KCk7XG4gIGV4cGVjdChuZXh0Q2xlYW51cENhbGxlZCkudG9CZUZhbHN5KCk7XG4gIGF3YWl0IGFwcC5jbGVhbnVwKCk7XG4gIGV4cGVjdChmaXJzdENsZWFudXBDYWxsZWQpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KG5leHRDbGVhbnVwQ2FsbGVkKS50b0JlVHJ1dGh5KCk7XG59KTtcblxudGVzdCgnYXBwLmNsZWFudXAgZG9lcyBub3QgY2xlYW51cCBpZiBjbGVhbnVwIHdhcyBub3QgZ2l2ZW4gYSBmdW5jdGlvbicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IEFwcCgnZWwnLCAoZWwpID0+IGVsKTtcbiAgYXBwLnJlZ2lzdGVyKFxuICAgIGNyZWF0ZVBsdWdpbih7XG4gICAgICBwcm92aWRlczogKCkgPT4gJ2hlbGxvIHdvcmxkJyxcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBJZ25vcmUgdGhpcyB0byB0ZXN0IGJyYW5jaFxuICAgICAgY2xlYW51cDogJ25vdGFmdW5jJyxcbiAgICAgIG1pZGRsZXdhcmU6ICgpID0+IChjdHgsIG5leHQpID0+IG5leHQoKSxcbiAgICB9KVxuICApO1xuICBhcHAucmVzb2x2ZSgpO1xuICBhd2FpdCBhcHAuY2xlYW51cCgpO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQTtBQUE4QztBQUU5QyxNQUFNQSxHQUFHLEdBQUcsT0FBYyxJQUFBQyxrQkFBZ0IsR0FBRSxHQUFHQyxnQkFBZ0IsRUFBRTtBQUVqRUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQVk7RUFDdEQsTUFBTUMsR0FBRyxHQUFHLElBQUlKLEdBQUcsQ0FBQyxJQUFJLEVBQUdLLEVBQUUsSUFBS0EsRUFBRSxDQUFDO0VBQ3JDRCxHQUFHLENBQUNFLFFBQVEsQ0FDVixJQUFBQywwQkFBWSxFQUFDO0lBQ1hDLFFBQVEsRUFBRSxNQUFNLGFBQWE7SUFDN0JDLFVBQVUsRUFBRSxNQUFNLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLQSxJQUFJO0VBQ3ZDLENBQUMsQ0FBQyxDQUNIO0VBQ0RQLEdBQUcsQ0FBQ1EsT0FBTyxFQUFFO0VBQ2IsTUFBTVIsR0FBRyxDQUFDUyxPQUFPLEVBQUU7RUFDbkJDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0FBQ3JDLENBQUMsQ0FBQztBQUVGWixJQUFJLENBQUMsd0NBQXdDLEVBQUUsWUFBWTtFQUN6RCxNQUFNQyxHQUFHLEdBQUcsSUFBSUosR0FBRyxDQUFDLElBQUksRUFBR0ssRUFBRSxJQUFLQSxFQUFFLENBQUM7RUFDckMsSUFBSVcsa0JBQWtCLEdBQUcsS0FBSztFQUM5QixJQUFJQyxpQkFBaUIsR0FBRyxLQUFLO0VBQzdCYixHQUFHLENBQUNFLFFBQVEsQ0FDVixJQUFBQywwQkFBWSxFQUFDO0lBQ1hDLFFBQVEsRUFBRSxNQUFNLGFBQWE7SUFDN0JLLE9BQU8sRUFBR0ssQ0FBQyxJQUFLO01BQ2RGLGtCQUFrQixHQUFHLElBQUk7TUFDekJGLE1BQU0sQ0FBQ0ksQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxhQUFhLENBQUM7TUFDN0IsT0FBT0MsT0FBTyxDQUFDUixPQUFPLEVBQUU7SUFDMUIsQ0FBQztJQUNESCxVQUFVLEVBQUUsTUFBTSxDQUFDQyxHQUFHLEVBQUVDLElBQUksS0FBS0EsSUFBSTtFQUN2QyxDQUFDLENBQUMsQ0FDSDtFQUNEUCxHQUFHLENBQUNFLFFBQVEsQ0FDVixJQUFBQywwQkFBWSxFQUFDO0lBQ1hDLFFBQVEsRUFBRSxNQUFNLGNBQWM7SUFDOUJLLE9BQU8sRUFBR0ssQ0FBQyxJQUFLO01BQ2RELGlCQUFpQixHQUFHLElBQUk7TUFDeEJILE1BQU0sQ0FBQ0ksQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxjQUFjLENBQUM7TUFDOUIsT0FBT0MsT0FBTyxDQUFDUixPQUFPLEVBQUU7SUFDMUIsQ0FBQztJQUNESCxVQUFVLEVBQUUsTUFBTSxDQUFDQyxHQUFHLEVBQUVDLElBQUksS0FBS0EsSUFBSTtFQUN2QyxDQUFDLENBQUMsQ0FDSDtFQUNEUCxHQUFHLENBQUNRLE9BQU8sRUFBRTtFQUNiRSxNQUFNLENBQUNFLGtCQUFrQixDQUFDLENBQUNLLFNBQVMsRUFBRTtFQUN0Q1AsTUFBTSxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDSSxTQUFTLEVBQUU7RUFDckMsTUFBTWpCLEdBQUcsQ0FBQ1MsT0FBTyxFQUFFO0VBQ25CQyxNQUFNLENBQUNFLGtCQUFrQixDQUFDLENBQUNELFVBQVUsRUFBRTtFQUN2Q0QsTUFBTSxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDRixVQUFVLEVBQUU7QUFDeEMsQ0FBQyxDQUFDO0FBRUZaLElBQUksQ0FBQyxrRUFBa0UsRUFBRSxZQUFZO0VBQ25GLE1BQU1DLEdBQUcsR0FBRyxJQUFJSixHQUFHLENBQUMsSUFBSSxFQUFHSyxFQUFFLElBQUtBLEVBQUUsQ0FBQztFQUNyQ0QsR0FBRyxDQUFDRSxRQUFRLENBQ1YsSUFBQUMsMEJBQVksRUFBQztJQUNYQyxRQUFRLEVBQUUsTUFBTSxhQUFhO0lBQzdCO0lBQ0FLLE9BQU8sRUFBRSxVQUFVO0lBQ25CSixVQUFVLEVBQUUsTUFBTSxDQUFDQyxHQUFHLEVBQUVDLElBQUksS0FBS0EsSUFBSTtFQUN2QyxDQUFDLENBQUMsQ0FDSDtFQUNEUCxHQUFHLENBQUNRLE9BQU8sRUFBRTtFQUNiLE1BQU1SLEdBQUcsQ0FBQ1MsT0FBTyxFQUFFO0FBQ3JCLENBQUMsQ0FBQyJ9