"use strict";

var _index = _interopRequireDefault(require("../index"));
var _compose = require("../compose");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

test('context composition', async () => {
  const element = 'hello';
  const render = el => `<h1>${el}</h1>`;
  const wrap = (ctx, next) => {
    ctx.element = ctx.element.toUpperCase();
    return next();
  };
  const chunkUrlMap = new Map();
  const chunkIdZero = new Map();
  chunkIdZero.set('es5', 'es5-file.js');
  chunkUrlMap.set(0, chunkIdZero);
  const context = {
    method: 'GET',
    headers: {
      accept: 'text/html'
    },
    path: '/',
    syncChunks: [0],
    preloadChunks: [],
    chunkUrlMap,
    webpackPublicPath: '/',
    element: null,
    rendered: null,
    render: null,
    type: null,
    body: null
  };
  const app = new _index.default(element, render);
  app.middleware(wrap);
  app.resolve();
  const middleware = (0, _compose.compose)(app.plugins);
  await expect(
  // @ts-expect-errors
  middleware(context, () => Promise.resolve())).resolves.not.toThrow();
  expect(typeof context.rendered).toBe('string');
  expect(context.rendered.includes('<h1>HELLO</h1>')).toBeTruthy();
});
test('context composition with a cdn', async () => {
  const element = 'hello';
  const render = el => `<h1>${el}</h1>`;
  const wrap = () => (ctx, next) => {
    ctx.element = ctx.element.toUpperCase();
    return next();
  };
  const chunkUrlMap = new Map();
  const chunkIdZero = new Map();
  chunkIdZero.set('es5', 'es5-file.js');
  chunkUrlMap.set(0, chunkIdZero);
  const context = {
    method: 'GET',
    headers: {
      accept: 'text/html'
    },
    path: '/',
    syncChunks: [0],
    preloadChunks: [],
    chunkUrlMap,
    webpackPublicPath: 'https://something.com/lol',
    element: null,
    rendered: null,
    render: null,
    type: null,
    body: null
  };
  const app = new _index.default(element, render);
  app.middleware(wrap());
  app.resolve();
  const middleware = (0, _compose.compose)(app.plugins);
  await expect(middleware(context, () => Promise.resolve())).resolves.not.toThrow();
  expect(context.body.includes('https://something.com/lol/es5-file.js')).toBeTruthy();
});
test('prepare boundary works', async () => {
  const element = 'hello';
  const render = el => `<h1>${el}</h1>`;
  const app = new _index.default(element, render);
  let done = false;
  app.prepareBoundary.addEffect(() => {
    done = true;
  });
  app.prepareBoundary.done();
  expect(done).toEqual(true);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,