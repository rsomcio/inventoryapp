/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-disable react/no-unescaped-entities */
import App from 'fusion-react';
import fs from 'fs';
import path from 'path';
import React from 'react';
import { getSimulator } from 'fusion-test-utils';
import { Helmet } from 'react-helmet-async';
import HelmetPlugin from '../index';
import { jsx as _jsx } from "react/jsx-runtime";
const name = true ? 'Server' : 'Client';
test(`${name} side render - default title escaping`, async () => {
  const TestA = () => {
    return /*#__PURE__*/_jsx("div", {
      children: /*#__PURE__*/_jsx(Helmet, {
        defaultTitle: "My Default Title's </title>"
      })
    });
  };
  const Root = /*#__PURE__*/_jsx("div", {
    children: /*#__PURE__*/_jsx(TestA, {})
  });
  let app;
  let root;
  if (false) {
    root = document.createElement('div');
    root.setAttribute('id', 'root');
    if (document.body) {
      document.body.appendChild(root);
    }
    app = new App(Root, el => render(el, root));
  } else {
    app = new App(Root);
  }
  app.register(HelmetPlugin);
  app.middleware((ctx, next) => {
    ctx.nonce = 'test-nonce';
    return next();
  });
  const sim = getSimulator(app);
  const ctx = await sim.render('/');
  if (true) {
    const fixtureFile = path.resolve(__dirname + '/../__fixtures__/ssr2.html');
    // Uncomment to regenerate fixture
    // fs.writeFileSync(fixtureFile, ctx.body);
    expect(ctx.body).toBe(fs.readFileSync(fixtureFile).toString());
  } else if (false) {
    // need to wait until next tick for dom changes
    await new Promise(resolve => setTimeout(resolve, 100));
    expect(document.title).toBe("My Default Title's </title>");
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcHAiLCJmcyIsInBhdGgiLCJSZWFjdCIsImdldFNpbXVsYXRvciIsIkhlbG1ldCIsIkhlbG1ldFBsdWdpbiIsIm5hbWUiLCJ0ZXN0IiwiVGVzdEEiLCJSb290IiwiYXBwIiwicm9vdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImVsIiwicmVuZGVyIiwicmVnaXN0ZXIiLCJtaWRkbGV3YXJlIiwiY3R4IiwibmV4dCIsIm5vbmNlIiwic2ltIiwiZml4dHVyZUZpbGUiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiZXhwZWN0IiwidG9CZSIsInJlYWRGaWxlU3luYyIsInRvU3RyaW5nIiwiUHJvbWlzZSIsInNldFRpbWVvdXQiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbInNyYy9fX3Rlc3RzX18vcmVuZGVyLWRlZmF1bHQtdGl0bGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tdW5lc2NhcGVkLWVudGl0aWVzICovXG5pbXBvcnQgQXBwIGZyb20gJ2Z1c2lvbi1yZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2dldFNpbXVsYXRvcn0gZnJvbSAnZnVzaW9uLXRlc3QtdXRpbHMnO1xuaW1wb3J0IHtIZWxtZXR9IGZyb20gJ3JlYWN0LWhlbG1ldC1hc3luYyc7XG5pbXBvcnQgSGVsbWV0UGx1Z2luIGZyb20gJy4uL2luZGV4JztcblxuY29uc3QgbmFtZSA9IF9fTk9ERV9fID8gJ1NlcnZlcicgOiAnQ2xpZW50JztcblxudGVzdChgJHtuYW1lfSBzaWRlIHJlbmRlciAtIGRlZmF1bHQgdGl0bGUgZXNjYXBpbmdgLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IFRlc3RBID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8SGVsbWV0IGRlZmF1bHRUaXRsZT1cIk15IERlZmF1bHQgVGl0bGUncyA8L3RpdGxlPlwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IFJvb3QgPSAoXG4gICAgPGRpdj5cbiAgICAgIDxUZXN0QSAvPlxuICAgIDwvZGl2PlxuICApO1xuXG4gIGxldCBhcHA7XG4gIGxldCByb290O1xuICBpZiAoX19CUk9XU0VSX18pIHtcbiAgICByb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcm9vdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Jvb3QnKTtcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcbiAgICB9XG4gICAgYXBwID0gbmV3IEFwcChSb290LCAoZWwpID0+IHJlbmRlcihlbCwgcm9vdCkpO1xuICB9IGVsc2Uge1xuICAgIGFwcCA9IG5ldyBBcHAoUm9vdCk7XG4gIH1cbiAgYXBwLnJlZ2lzdGVyKEhlbG1ldFBsdWdpbik7XG4gIGFwcC5taWRkbGV3YXJlKChjdHgsIG5leHQpID0+IHtcbiAgICBjdHgubm9uY2UgPSAndGVzdC1ub25jZSc7XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfSk7XG4gIGNvbnN0IHNpbSA9IGdldFNpbXVsYXRvcihhcHApO1xuICBjb25zdCBjdHggPSBhd2FpdCBzaW0ucmVuZGVyKCcvJyk7XG5cbiAgaWYgKF9fTk9ERV9fKSB7XG4gICAgY29uc3QgZml4dHVyZUZpbGUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lICsgJy8uLi9fX2ZpeHR1cmVzX18vc3NyMi5odG1sJyk7XG4gICAgLy8gVW5jb21tZW50IHRvIHJlZ2VuZXJhdGUgZml4dHVyZVxuICAgIC8vIGZzLndyaXRlRmlsZVN5bmMoZml4dHVyZUZpbGUsIGN0eC5ib2R5KTtcbiAgICBleHBlY3QoY3R4LmJvZHkpLnRvQmUoZnMucmVhZEZpbGVTeW5jKGZpeHR1cmVGaWxlKS50b1N0cmluZygpKTtcbiAgfSBlbHNlIGlmIChfX0JST1dTRVJfXykge1xuICAgIC8vIG5lZWQgdG8gd2FpdCB1bnRpbCBuZXh0IHRpY2sgZm9yIGRvbSBjaGFuZ2VzXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgZXhwZWN0KGRvY3VtZW50LnRpdGxlKS50b0JlKFwiTXkgRGVmYXVsdCBUaXRsZSdzIDwvdGl0bGU+XCIpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBT0EsR0FBRyxNQUFNLGNBQWM7QUFFOUIsT0FBT0MsRUFBRSxNQUFNLElBQUk7QUFDbkIsT0FBT0MsSUFBSSxNQUFNLE1BQU07QUFDdkIsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFDekIsU0FBUUMsWUFBWSxRQUFPLG1CQUFtQjtBQUM5QyxTQUFRQyxNQUFNLFFBQU8sb0JBQW9CO0FBQ3pDLE9BQU9DLFlBQVksTUFBTSxVQUFVO0FBQUM7QUFFcEMsTUFBTUMsSUFBSSxHQUFHLE9BQVcsUUFBUSxHQUFHLFFBQVE7QUFFM0NDLElBQUksQ0FBRSxHQUFFRCxJQUFLLHVDQUFzQyxFQUFFLFlBQVk7RUFDL0QsTUFBTUUsS0FBSyxHQUFHLE1BQU07SUFDbEIsb0JBQ0U7TUFBQSx1QkFDRSxLQUFDLE1BQU07UUFBQyxZQUFZLEVBQUM7TUFBNkI7SUFBRyxFQUNqRDtFQUVWLENBQUM7RUFFRCxNQUFNQyxJQUFJLGdCQUNSO0lBQUEsdUJBQ0UsS0FBQyxLQUFLO0VBQUcsRUFFWjtFQUVELElBQUlDLEdBQUc7RUFDUCxJQUFJQyxJQUFJO0VBQ1IsV0FBaUI7SUFDZkEsSUFBSSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDcENGLElBQUksQ0FBQ0csWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7SUFDL0IsSUFBSUYsUUFBUSxDQUFDRyxJQUFJLEVBQUU7TUFDakJILFFBQVEsQ0FBQ0csSUFBSSxDQUFDQyxXQUFXLENBQUNMLElBQUksQ0FBQztJQUNqQztJQUNBRCxHQUFHLEdBQUcsSUFBSVgsR0FBRyxDQUFDVSxJQUFJLEVBQUdRLEVBQUUsSUFBS0MsTUFBTSxDQUFDRCxFQUFFLEVBQUVOLElBQUksQ0FBQyxDQUFDO0VBQy9DLENBQUMsTUFBTTtJQUNMRCxHQUFHLEdBQUcsSUFBSVgsR0FBRyxDQUFDVSxJQUFJLENBQUM7RUFDckI7RUFDQUMsR0FBRyxDQUFDUyxRQUFRLENBQUNkLFlBQVksQ0FBQztFQUMxQkssR0FBRyxDQUFDVSxVQUFVLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7SUFDNUJELEdBQUcsQ0FBQ0UsS0FBSyxHQUFHLFlBQVk7SUFDeEIsT0FBT0QsSUFBSSxFQUFFO0VBQ2YsQ0FBQyxDQUFDO0VBQ0YsTUFBTUUsR0FBRyxHQUFHckIsWUFBWSxDQUFDTyxHQUFHLENBQUM7RUFDN0IsTUFBTVcsR0FBRyxHQUFHLE1BQU1HLEdBQUcsQ0FBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUVqQyxVQUFjO0lBQ1osTUFBTU8sV0FBVyxHQUFHeEIsSUFBSSxDQUFDeUIsT0FBTyxDQUFDQyxTQUFTLEdBQUcsNEJBQTRCLENBQUM7SUFDMUU7SUFDQTtJQUNBQyxNQUFNLENBQUNQLEdBQUcsQ0FBQ04sSUFBSSxDQUFDLENBQUNjLElBQUksQ0FBQzdCLEVBQUUsQ0FBQzhCLFlBQVksQ0FBQ0wsV0FBVyxDQUFDLENBQUNNLFFBQVEsRUFBRSxDQUFDO0VBQ2hFLENBQUMsTUFBTSxXQUFpQjtJQUN0QjtJQUNBLE1BQU0sSUFBSUMsT0FBTyxDQUFFTixPQUFPLElBQUtPLFVBQVUsQ0FBQ1AsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hERSxNQUFNLENBQUNoQixRQUFRLENBQUNzQixLQUFLLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLDZCQUE2QixDQUFDO0VBQzVEO0FBQ0YsQ0FBQyxDQUFDIn0=