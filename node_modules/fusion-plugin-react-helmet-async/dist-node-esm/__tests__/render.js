/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-disable react/no-unescaped-entities */
import App from 'fusion-react';
import fs from 'fs';
import path from 'path';
import React from 'react';
import { getSimulator } from 'fusion-test-utils';
import { Helmet } from 'react-helmet-async';
import HelmetPlugin from '../index';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const name = true ? 'Server' : 'Client';
test(`${name} side render`, async () => {
  const TestA = () => {
    return /*#__PURE__*/_jsx("div", {
      children: /*#__PURE__*/_jsxs(Helmet, {
        defaultTitle: "My Default Title",
        children: [/*#__PURE__*/_jsx("html", {
          lang: "en",
          amp: true
        }), /*#__PURE__*/_jsx("body", {
          className: "root"
        }), /*#__PURE__*/_jsxs("title", {
          itemProp: "name",
          lang: "en",
          children: ["My Title's ", '</title>']
        }), /*#__PURE__*/_jsx("base", {
          target: "_blank",
          href: "http://mysite.com/"
        }), /*#__PURE__*/_jsx("meta", {
          name: "description",
          content: "Helmet application"
        }), /*#__PURE__*/_jsx("meta", {
          property: "og:type",
          content: "article"
        }), /*#__PURE__*/_jsx("link", {
          rel: "canonical",
          href: "http://mysite.com/example"
        }), /*#__PURE__*/_jsx("link", {
          rel: "apple-touch-icon",
          href: "http://mysite.com/img/apple-touch-icon-57x57.png"
        }), /*#__PURE__*/_jsx("script", {
          src: "http://include.com/pathtojs.js",
          type: "text/javascript"
        }), /*#__PURE__*/_jsx("script", {
          type: "application/ld+json",
          children: `
        {
            "@context": "http://schema.org"
        }
    `
        }), /*#__PURE__*/_jsx("noscript", {
          children: `
        <link rel="stylesheet" type="text/css" href="foo.css" />
    `
        }), /*#__PURE__*/_jsx("style", {
          type: "text/css",
          children: `
        body {
            background-color: blue;
        }

        p {
            font-size: 12px;
        }
    `
        })]
      })
    });
  };
  const Root = /*#__PURE__*/_jsx("div", {
    children: /*#__PURE__*/_jsx(TestA, {})
  });
  let app;
  let root;
  if (false) {
    root = document.createElement('div');
    root.setAttribute('id', 'root2');
    if (document.body) {
      document.body.appendChild(root);
    }
    app = new App(Root, el => render(el, root));
  } else {
    app = new App(Root);
  }
  app.register(HelmetPlugin);
  app.middleware((ctx, next) => {
    ctx.nonce = 'test-nonce';
    return next();
  });
  const sim = getSimulator(app);
  const ctx = await sim.render('/');
  if (true) {
    const fixtureFile = path.resolve(__dirname + '/../__fixtures__/ssr1.html');
    // Uncomment to regenerate fixture
    // fs.writeFileSync(fixtureFile, ctx.body);
    expect(ctx.body).toBe(fs.readFileSync(fixtureFile).toString());
  } else if (false) {
    // need to wait until next tick for dom changes
    await new Promise(resolve => setTimeout(resolve, 100));
    expect(document.title).toBe("My Title's </title>");
    const baseEl = document.querySelector('base');
    if (!baseEl) {
      throw new Error('Could not find base element');
    }
    expect(baseEl.getAttribute('href')).toBe('http://mysite.com/');
    const metaDescription = document.querySelector('meta[name="description"]');
    if (!metaDescription) {
      throw new Error('Could not find meta description');
    }
    expect(metaDescription.getAttribute('content')).toBe('Helmet application');
    if (document.body && root instanceof HTMLElement) {
      document.body.removeChild(root);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,