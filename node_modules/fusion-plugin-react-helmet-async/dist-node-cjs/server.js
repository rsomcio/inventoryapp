"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _fusionCore = require("fusion-core");
var _reactHelmetAsync = require("react-helmet-async");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const keys = ['meta', 'link', 'style', 'base', 'noscript', 'script'];
const plugin = true && (0, _fusionCore.createPlugin)({
  middleware: () => {
    return async (ctx, next) => {
      if (!ctx.element) {
        return next();
      }
      const helmetContext = {};
      ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactHelmetAsync.HelmetProvider, {
        context: helmetContext,
        children: ctx.element
      });
      await next();
      const {
        helmet
      } = helmetContext;
      if (helmet) {
        ctx.template.title = (0, _fusionCore.dangerouslySetHTML)(helmet.title.toString().replace('</title>', '').replace(/^<title.*>/, ''));
        keys.forEach(key => {
          ctx.template.head.push((0, _fusionCore.dangerouslySetHTML)(helmet[key].toString()));
        });
        Object.assign(ctx.template.htmlAttrs, helmet.htmlAttributes.toComponent());
      }
    };
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJrZXlzIiwicGx1Z2luIiwiY3JlYXRlUGx1Z2luIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJlbGVtZW50IiwiaGVsbWV0Q29udGV4dCIsImhlbG1ldCIsInRlbXBsYXRlIiwidGl0bGUiLCJkYW5nZXJvdXNseVNldEhUTUwiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJmb3JFYWNoIiwia2V5IiwiaGVhZCIsInB1c2giLCJPYmplY3QiLCJhc3NpZ24iLCJodG1sQXR0cnMiLCJodG1sQXR0cmlidXRlcyIsInRvQ29tcG9uZW50Il0sInNvdXJjZXMiOlsic3JjL3NlcnZlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW4sIGRhbmdlcm91c2x5U2V0SFRNTH0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuaW1wb3J0IHtIZWxtZXRQcm92aWRlcn0gZnJvbSAncmVhY3QtaGVsbWV0LWFzeW5jJztcblxuaW1wb3J0IHR5cGUge0Z1c2lvblBsdWdpbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5jb25zdCBrZXlzID0gWydtZXRhJywgJ2xpbmsnLCAnc3R5bGUnLCAnYmFzZScsICdub3NjcmlwdCcsICdzY3JpcHQnXTtcblxuY29uc3QgcGx1Z2luID1cbiAgX19OT0RFX18gJiZcbiAgY3JlYXRlUGx1Z2luKHtcbiAgICBtaWRkbGV3YXJlOiAoKSA9PiB7XG4gICAgICByZXR1cm4gYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBpZiAoIWN0eC5lbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWxtZXRDb250ZXh0OiBhbnkgPSB7fTtcbiAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgPEhlbG1ldFByb3ZpZGVyIGNvbnRleHQ9e2hlbG1ldENvbnRleHR9PntjdHguZWxlbWVudH08L0hlbG1ldFByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBuZXh0KCk7XG4gICAgICAgIGNvbnN0IHtoZWxtZXR9ID0gaGVsbWV0Q29udGV4dDtcbiAgICAgICAgaWYgKGhlbG1ldCkge1xuICAgICAgICAgIGN0eC50ZW1wbGF0ZS50aXRsZSA9IGRhbmdlcm91c2x5U2V0SFRNTChcbiAgICAgICAgICAgIGhlbG1ldC50aXRsZVxuICAgICAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAucmVwbGFjZSgnPC90aXRsZT4nLCAnJylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL148dGl0bGUuKj4vLCAnJylcbiAgICAgICAgICApO1xuICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjdHgudGVtcGxhdGUuaGVhZC5wdXNoKGRhbmdlcm91c2x5U2V0SFRNTChoZWxtZXRba2V5XS50b1N0cmluZygpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIGN0eC50ZW1wbGF0ZS5odG1sQXR0cnMsXG4gICAgICAgICAgICBoZWxtZXQuaHRtbEF0dHJpYnV0ZXMudG9Db21wb25lbnQoKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgfSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBsdWdpbiBhcyBhbnkgYXMgRnVzaW9uUGx1Z2luPHVuZGVmaW5lZCwgdW5kZWZpbmVkPjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQWtEO0FBQUE7QUFUbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFBLE1BQU1BLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDO0FBRXBFLE1BQU1DLE1BQU0sR0FDVixRQUNBLElBQUFDLHdCQUFZLEVBQUM7RUFDWEMsVUFBVSxFQUFFLE1BQU07SUFDaEIsT0FBTyxPQUFPQyxHQUFHLEVBQUVDLElBQUksS0FBSztNQUMxQixJQUFJLENBQUNELEdBQUcsQ0FBQ0UsT0FBTyxFQUFFO1FBQ2hCLE9BQU9ELElBQUksRUFBRTtNQUNmO01BQ0EsTUFBTUUsYUFBa0IsR0FBRyxDQUFDLENBQUM7TUFDN0JILEdBQUcsQ0FBQ0UsT0FBTyxnQkFDVCxxQkFBQyxnQ0FBYztRQUFDLE9BQU8sRUFBRUMsYUFBYztRQUFBLFVBQUVILEdBQUcsQ0FBQ0U7TUFBTyxFQUNyRDtNQUNELE1BQU1ELElBQUksRUFBRTtNQUNaLE1BQU07UUFBQ0c7TUFBTSxDQUFDLEdBQUdELGFBQWE7TUFDOUIsSUFBSUMsTUFBTSxFQUFFO1FBQ1ZKLEdBQUcsQ0FBQ0ssUUFBUSxDQUFDQyxLQUFLLEdBQUcsSUFBQUMsOEJBQWtCLEVBQ3JDSCxNQUFNLENBQUNFLEtBQUssQ0FDVEUsUUFBUSxFQUFFLENBQ1ZDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQ3ZCQSxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUM3QjtRQUNEYixJQUFJLENBQUNjLE9BQU8sQ0FBRUMsR0FBRyxJQUFLO1VBQ3BCWCxHQUFHLENBQUNLLFFBQVEsQ0FBQ08sSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBQU4sOEJBQWtCLEVBQUNILE1BQU0sQ0FBQ08sR0FBRyxDQUFDLENBQUNILFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDO1FBQ0ZNLE1BQU0sQ0FBQ0MsTUFBTSxDQUNYZixHQUFHLENBQUNLLFFBQVEsQ0FBQ1csU0FBUyxFQUN0QlosTUFBTSxDQUFDYSxjQUFjLENBQUNDLFdBQVcsRUFBRSxDQUNwQztNQUNIO0lBQ0YsQ0FBQztFQUNIO0FBQ0YsQ0FBQyxDQUFDO0FBQUMsZUFFVXJCLE1BQU07QUFBQSJ9