"use strict";

var _fusionReact = _interopRequireDefault(require("fusion-react"));
var _reactDom = require("react-dom");
var _react = _interopRequireDefault(require("react"));
var _fusionTestUtils = require("fusion-test-utils");
var _reactHelmetAsync = require("react-helmet-async");
var _index = _interopRequireDefault(require("../index"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* eslint-disable react/no-unescaped-entities */

const name = false ? 'Server' : 'Client';
test(`${name} side render - default title escaping`, async () => {
  const TestA = () => {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactHelmetAsync.Helmet, {
        defaultTitle: "My Default Title's </title>"
      })
    });
  };
  const Root = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestA, {})
  });
  let app;
  let root;
  if (true) {
    root = document.createElement('div');
    root.setAttribute('id', 'root');
    if (document.body) {
      document.body.appendChild(root);
    }
    app = new _fusionReact.default(Root, el => (0, _reactDom.render)(el, root));
  } else {
    app = new _fusionReact.default(Root);
  }
  app.register(_index.default);
  app.middleware((ctx, next) => {
    ctx.nonce = 'test-nonce';
    return next();
  });
  const sim = (0, _fusionTestUtils.getSimulator)(app);
  const ctx = await sim.render('/');
  if (false) {
    const fixtureFile = path.resolve(__dirname + '/../__fixtures__/ssr2.html');
    // Uncomment to regenerate fixture
    // fs.writeFileSync(fixtureFile, ctx.body);
    expect(ctx.body).toBe(fs.readFileSync(fixtureFile).toString());
  } else if (true) {
    // need to wait until next tick for dom changes
    await new Promise(resolve => setTimeout(resolve, 100));
    expect(document.title).toBe("My Default Title's </title>");
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuYW1lIiwidGVzdCIsIlRlc3RBIiwiUm9vdCIsImFwcCIsInJvb3QiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJBcHAiLCJlbCIsInJlbmRlciIsInJlZ2lzdGVyIiwiSGVsbWV0UGx1Z2luIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJub25jZSIsInNpbSIsImdldFNpbXVsYXRvciIsImZpeHR1cmVGaWxlIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJleHBlY3QiLCJ0b0JlIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJ0b1N0cmluZyIsIlByb21pc2UiLCJzZXRUaW1lb3V0IiwidGl0bGUiXSwic291cmNlcyI6WyJzcmMvX190ZXN0c19fL3JlbmRlci1kZWZhdWx0LXRpdGxlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXVuZXNjYXBlZC1lbnRpdGllcyAqL1xuaW1wb3J0IEFwcCBmcm9tICdmdXNpb24tcmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtnZXRTaW11bGF0b3J9IGZyb20gJ2Z1c2lvbi10ZXN0LXV0aWxzJztcbmltcG9ydCB7SGVsbWV0fSBmcm9tICdyZWFjdC1oZWxtZXQtYXN5bmMnO1xuaW1wb3J0IEhlbG1ldFBsdWdpbiBmcm9tICcuLi9pbmRleCc7XG5cbmNvbnN0IG5hbWUgPSBfX05PREVfXyA/ICdTZXJ2ZXInIDogJ0NsaWVudCc7XG5cbnRlc3QoYCR7bmFtZX0gc2lkZSByZW5kZXIgLSBkZWZhdWx0IHRpdGxlIGVzY2FwaW5nYCwgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBUZXN0QSA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPEhlbG1ldCBkZWZhdWx0VGl0bGU9XCJNeSBEZWZhdWx0IFRpdGxlJ3MgPC90aXRsZT5cIiAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBSb290ID0gKFxuICAgIDxkaXY+XG4gICAgICA8VGVzdEEgLz5cbiAgICA8L2Rpdj5cbiAgKTtcblxuICBsZXQgYXBwO1xuICBsZXQgcm9vdDtcbiAgaWYgKF9fQlJPV1NFUl9fKSB7XG4gICAgcm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJvb3Quc2V0QXR0cmlidXRlKCdpZCcsICdyb290Jyk7XG4gICAgaWYgKGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocm9vdCk7XG4gICAgfVxuICAgIGFwcCA9IG5ldyBBcHAoUm9vdCwgKGVsKSA9PiByZW5kZXIoZWwsIHJvb3QpKTtcbiAgfSBlbHNlIHtcbiAgICBhcHAgPSBuZXcgQXBwKFJvb3QpO1xuICB9XG4gIGFwcC5yZWdpc3RlcihIZWxtZXRQbHVnaW4pO1xuICBhcHAubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgY3R4Lm5vbmNlID0gJ3Rlc3Qtbm9uY2UnO1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH0pO1xuICBjb25zdCBzaW0gPSBnZXRTaW11bGF0b3IoYXBwKTtcbiAgY29uc3QgY3R4ID0gYXdhaXQgc2ltLnJlbmRlcignLycpO1xuXG4gIGlmIChfX05PREVfXykge1xuICAgIGNvbnN0IGZpeHR1cmVGaWxlID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSArICcvLi4vX19maXh0dXJlc19fL3NzcjIuaHRtbCcpO1xuICAgIC8vIFVuY29tbWVudCB0byByZWdlbmVyYXRlIGZpeHR1cmVcbiAgICAvLyBmcy53cml0ZUZpbGVTeW5jKGZpeHR1cmVGaWxlLCBjdHguYm9keSk7XG4gICAgZXhwZWN0KGN0eC5ib2R5KS50b0JlKGZzLnJlYWRGaWxlU3luYyhmaXh0dXJlRmlsZSkudG9TdHJpbmcoKSk7XG4gIH0gZWxzZSBpZiAoX19CUk9XU0VSX18pIHtcbiAgICAvLyBuZWVkIHRvIHdhaXQgdW50aWwgbmV4dCB0aWNrIGZvciBkb20gY2hhbmdlc1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpO1xuICAgIGV4cGVjdChkb2N1bWVudC50aXRsZSkudG9CZShcIk15IERlZmF1bHQgVGl0bGUncyA8L3RpdGxlPlwiKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBUUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQW9DO0FBQUE7QUFmcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQVVBLE1BQU1BLElBQUksR0FBRyxRQUFXLFFBQVEsR0FBRyxRQUFRO0FBRTNDQyxJQUFJLENBQUUsR0FBRUQsSUFBSyx1Q0FBc0MsRUFBRSxZQUFZO0VBQy9ELE1BQU1FLEtBQUssR0FBRyxNQUFNO0lBQ2xCLG9CQUNFO01BQUEsdUJBQ0UscUJBQUMsd0JBQU07UUFBQyxZQUFZLEVBQUM7TUFBNkI7SUFBRyxFQUNqRDtFQUVWLENBQUM7RUFFRCxNQUFNQyxJQUFJLGdCQUNSO0lBQUEsdUJBQ0UscUJBQUMsS0FBSztFQUFHLEVBRVo7RUFFRCxJQUFJQyxHQUFHO0VBQ1AsSUFBSUMsSUFBSTtFQUNSLFVBQWlCO0lBQ2ZBLElBQUksR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ3BDRixJQUFJLENBQUNHLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO0lBQy9CLElBQUlGLFFBQVEsQ0FBQ0csSUFBSSxFQUFFO01BQ2pCSCxRQUFRLENBQUNHLElBQUksQ0FBQ0MsV0FBVyxDQUFDTCxJQUFJLENBQUM7SUFDakM7SUFDQUQsR0FBRyxHQUFHLElBQUlPLG9CQUFHLENBQUNSLElBQUksRUFBR1MsRUFBRSxJQUFLLElBQUFDLGdCQUFNLEVBQUNELEVBQUUsRUFBRVAsSUFBSSxDQUFDLENBQUM7RUFDL0MsQ0FBQyxNQUFNO0lBQ0xELEdBQUcsR0FBRyxJQUFJTyxvQkFBRyxDQUFDUixJQUFJLENBQUM7RUFDckI7RUFDQUMsR0FBRyxDQUFDVSxRQUFRLENBQUNDLGNBQVksQ0FBQztFQUMxQlgsR0FBRyxDQUFDWSxVQUFVLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7SUFDNUJELEdBQUcsQ0FBQ0UsS0FBSyxHQUFHLFlBQVk7SUFDeEIsT0FBT0QsSUFBSSxFQUFFO0VBQ2YsQ0FBQyxDQUFDO0VBQ0YsTUFBTUUsR0FBRyxHQUFHLElBQUFDLDZCQUFZLEVBQUNqQixHQUFHLENBQUM7RUFDN0IsTUFBTWEsR0FBRyxHQUFHLE1BQU1HLEdBQUcsQ0FBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUVqQyxXQUFjO0lBQ1osTUFBTVMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxHQUFHLDRCQUE0QixDQUFDO0lBQzFFO0lBQ0E7SUFDQUMsTUFBTSxDQUFDVCxHQUFHLENBQUNSLElBQUksQ0FBQyxDQUFDa0IsSUFBSSxDQUFDQyxFQUFFLENBQUNDLFlBQVksQ0FBQ1AsV0FBVyxDQUFDLENBQUNRLFFBQVEsRUFBRSxDQUFDO0VBQ2hFLENBQUMsTUFBTSxVQUFpQjtJQUN0QjtJQUNBLE1BQU0sSUFBSUMsT0FBTyxDQUFFUCxPQUFPLElBQUtRLFVBQVUsQ0FBQ1IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hERSxNQUFNLENBQUNwQixRQUFRLENBQUMyQixLQUFLLENBQUMsQ0FBQ04sSUFBSSxDQUFDLDZCQUE2QixDQUFDO0VBQzVEO0FBQ0YsQ0FBQyxDQUFDIn0=